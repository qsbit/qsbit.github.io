<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jungle</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-05-11T09:21:20.105Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Jungle</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Air Conditioner</title>
    <link href="http://example.com/2021/05/11/Air%20Conditioner/"/>
    <id>http://example.com/2021/05/11/Air%20Conditioner/</id>
    <published>2021-05-11T08:45:22.000Z</published>
    <updated>2021-05-11T09:21:20.105Z</updated>
    
    <content type="html"><![CDATA[<h3 id="分享一个好玩儿的小项目（Air-Conditioner）"><a href="#分享一个好玩儿的小项目（Air-Conditioner）" class="headerlink" title="分享一个好玩儿的小项目（Air Conditioner）"></a>分享一个好玩儿的小项目（Air Conditioner）</h3><p>项目演示如下：</p><iframe   height=740  width=100% src="https://ac.yunyoujun.cn/"   frameborder=0   allowfullscreen> </iframe> 下载方式：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/YunYouJun/air-conditioner.git</span><br></pre></td></tr></table></figure><p>运行方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install &amp; yarn install</span><br><span class="line">yarn start</span><br></pre></td></tr></table></figure><p>iframe安装使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">height</span>=<span class="string">&quot;740&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://ac.yunyoujun.cn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;分享一个好玩儿的小项目（Air-Conditioner）&quot;&gt;&lt;a href=&quot;#分享一个好玩儿的小项目（Air-Conditioner）&quot; class=&quot;headerlink&quot; title=&quot;分享一个好玩儿的小项目（Air Conditioner）&quot;&gt;&lt;/a&gt;分享</summary>
      
    
    
    
    <category term="资源分享" scheme="http://example.com/categories/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="demo" scheme="http://example.com/tags/demo/"/>
    
  </entry>
  
  <entry>
    <title>内卷之下|拒绝个人内卷化</title>
    <link href="http://example.com/2021/05/10/Perception-03/"/>
    <id>http://example.com/2021/05/10/Perception-03/</id>
    <published>2021-05-10T02:44:27.000Z</published>
    <updated>2021-05-10T10:43:34.638Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>总结：</strong>内卷不但不会创造价值，而且会危害每一个人。</p></blockquote><p>不知道从什么时候开始，“内卷”这个概念变得很火炎焱燚。</p><p>什么是内卷？什么是内卷化？内卷究竟卷的是什么？众说纷纭。</p><p><strong>随着网络的发酵，“内卷”的使用场景不断扩大，“万物皆可内卷”。</strong>人们对内卷这个概念原本的语义价值已经不太在意，更多只是用来描述当下的“难”，借以表达对各自行业和处境的不满。</p><p><strong>内卷，渐渐成为“标签化”的情绪攻讦。</strong></p><p>如此，就太可惜了。我们连最开始讨论“内卷”的意义都失去了。</p><p>我们需要的是，冷静地审视“内卷”：社会的内卷，个人的内卷；更需要的是，冷静地思考：内卷之下，如何寻求突破？</p><h2 id="但无论如何我们都要去清楚的了解，什么才是“内卷”！"><a href="#但无论如何我们都要去清楚的了解，什么才是“内卷”！" class="headerlink" title="但无论如何我们都要去清楚的了解，什么才是“内卷”！"></a>但无论如何我们都要去清楚的了解，什么才是“内卷”！</h2><h3 id="1-什么是内卷"><a href="#1-什么是内卷" class="headerlink" title="1. 什么是内卷"></a><strong>1. 什么是内卷</strong></h3><p>很久很久以前，地球上有一个小镇。小镇上有很多鞋店，这些鞋店每天上午10点开门，中午12点到下午2点午休，下午2点到晚上6点继续营业；每周一至周五营业5天，周末休息。</p><p>天最热的那几天，鞋店老板们会纷纷把店关掉，去南方的海边度假；冬天最冷的那几天，鞋店老板们也会纷纷把店关掉，去北方的山里滑雪。</p><p>多年以来，小镇上的常住人口没有什么变化，鞋的品质一直优秀，供货也稳定，所以，<strong>小镇上的鞋的供需关系一直处于一个近乎完美的平衡状态。</strong></p><p>后来有一天，一户人家出于不明原因从大城市搬来小镇上，并且也开了一家鞋店。小镇虽然小，但也算具有一定规模，鞋的供需平衡还不至于因为新增一家鞋店而被打破。</p><p>但是，那座大城市的人民以勤奋、能吃苦著称。果然，这户来自大城市的人家也具备这些特点。他们家的鞋店每天早晨7点就开门了，中午也不午休，晚上直到11点才关门；周末他们也正常营业，夏天和冬天他们也从不去度假。</p><p>渐渐地，他们的“勤奋”得到了回报，他们鞋店的生意明显好于小镇上的其他鞋店。以前小镇人民吃完晚饭后是无法买鞋的，但现在，他们几乎随时可以去大城市人的鞋店买鞋，也就没什么必要光顾其他鞋店了。</p><p>但小镇老板们也不服输，他们纷纷效仿大城市人民的作息时间，每周工作7天，每天工作16小时。他们的“勤奋”也得到了“回报”：他们的营业收入恢复到了以前的状态。</p><p>那么，此时的小镇生活发生了什么样的变化呢？由于小镇人口并没有增加，鞋的需求量保持恒定，跟以前一样，所以每家鞋店最终的营业收入没什么变化，并不会增长。但营业时间从原来的每周5天，每天6小时变成了每周7天，每天16小时。</p><p>也就是说，<strong>他们的工作时间变长了，但收入却没有增加。</strong></p><p>这就是传说中的内卷（involution）。同时，这也是传说中的囚徒困境。</p><h3 id="2-什么是囚徒困境"><a href="#2-什么是囚徒困境" class="headerlink" title="2. 什么是囚徒困境"></a><strong>2. 什么是囚徒困境</strong></h3><p>我们可以把鞋店简化为两家：大城市鞋店和小镇鞋店。他们工作模式也可简化为996和955。小镇上鞋的需求不变。根据以上条件可知：</p><ul><li><strong>如果两家鞋店都选择955</strong>，会平分市场需求，同时也保证了休息时间，这种情况下总体收益最高，假设两家的收益分别是5, 5。</li><li><strong>如果两家鞋店都采取996</strong>工作模式，最终仍然会平分市场，但由于休息时间减少，幸福感降低，收益不能再是5, 5而应该是3, 3。</li><li><strong>而如果一家店选择了996而另一家店选择了955</strong>，那么996鞋店最终可能会独占市场，而955鞋店会没生意，于是两家的收益可假设为8, 0。</li></ul><p>这场博弈中两位鞋店的<strong>赢利表</strong>如下：</p><p><img src="/images/Perception-03/640" alt="图片"></p><p>两位鞋店老板彼此不知道对方是怎么想的，但他们都是“聪明”人，很容易算出：如果对方996，那么我955的收益是0，我也996的收益是3，所以我应该996；如果对方955，那么我也955的收益是5，我996的收益8，所以我应该996。</p><p>最终，两家鞋店都选择了996，这场博弈达到<strong>纳什均衡</strong>，<strong>两位老板都成了996的“囚徒”。</strong></p><blockquote><p>纳什均衡是这样一种状态，在该状态下每个参与人所采取的策略都是对于其他参与人的策略的最优反应。</p><p>——摘自董志强 《身边的博弈》，机械工业出版社·华章经管</p></blockquote><h3 id="3-什么是勤劳和公平"><a href="#3-什么是勤劳和公平" class="headerlink" title="3. 什么是勤劳和公平"></a><strong>3. 什么是勤劳和公平</strong></h3><p>任何一个行业都不是孤立存在的。鞋店老板们工作时间变长了，娱乐时间就变少了，他们光顾餐馆、咖啡馆的次数就少了，于是小镇上的餐饮业变得冷清了。虽然鞋店的营业时间延长，他们的耗电量增加，但餐馆、咖啡馆却在一些生意冷清的时段进入了节电模式，所以发电厂的生意也没有变好。</p><p><strong>总体算下来，小镇的经济不但没有变好，反而变差了一些。</strong>所以，我们可以看到，<strong>内卷不但有危害，而且会危害到看似无辜的每一个人。</strong></p><p>疲惫的小镇鞋店老板们也很快意识到了这个问题，于是他们成立鞋业协会，联合小镇政府制定强制性的行业规则和劳动法：每日工作时间不得超过8小时、每周营业时间不得超过5天，法定节假日必须休息……鞋业协会有权要求不遵守规定的鞋店关门，对屡教不改者，鞋业协会将联合小镇政府将其驱逐出小镇……</p><p>行规一出，来自大城市的人家就立即抗议，他们觉得这是对勤劳致富者的不尊重，也是对消费者的不尊重，这是干涉他们的自由，这是对他们的不公平对待和地域歧视……</p><p>鞋业协会立即怼了回去：你们所谓的勤劳并没有真正致富，反而对社会造成了危害。鞋店又不是急救中心，消费者早一天买鞋还是晚一天买鞋往往并没有区别。你们只顾着自己的作息时间而不管他人，这不是自由，而是自私，这才是真正的不公平……劳动法面前人人平等，并没针对谁、歧视谁，对违法的人采取强制措施也是天经地义……</p><h3 id="4、大城市社会工作中"><a href="#4、大城市社会工作中" class="headerlink" title="4、大城市社会工作中"></a>4、大城市社会工作中</h3><p>如果你觉得内卷是老板们才要关心的问题，跟打工人无关，那么我们离开小镇，来看看大城市里发生的故事。</p><p>大城市里有一家皮鞋款式设计公司，原本每一位打工人都是9点上班5点下班。后来，一位从小镇来的打工人进入这家公司，他本没有从业经验，为了得到这份工作在简历上和面试时都说了谎。于是开始打工时，他非常吃力，每天5点下班时他都无法完成工作，只好继续加班到9点才离开。</p><p>有一天，老板买了一个跑步机放在自己办公室里。从那天起，老板都会在完成工作后跑步健身，要在8点左右才离开办公室。所以他发现，这位小镇青年每天在8点时还没下班。于是，在下一个月的公司例会上，他表扬了小镇青年的刻苦精神，并宣布要他发奖金。</p><p>此后，其他打工人也发生了变化。有些人想，反正我下班之后也没什么事情，不如等8点以后再走，让老板也看到我加班，也给我发奖金。于是，加班的人逐渐多了起来。</p><p>起初，他们获得奖金，但一段时间过后，<strong>随着加班的人变成了大多数</strong>，老板对这些“勤奋刻苦”的人见怪不怪了，<strong>奖金的事也不再提了</strong>……。反而是那些下班后有事要做不能加班的人经常被老板批评，甚至被扣工资。</p><p>于是，打工人的工作时间延长了，但收入并没有增加，内卷害了每一个人。</p><p>要打破囚徒困境，打工人可以像小镇鞋店老板那样，成立工会争取自己合法权利。但他们其实还有另一种办法，就是辞掉这份工作，去另一家不需要加班的公司。</p><p>而对于老板来说，如果选择满足工会要求，其实并没有什么损失，大家只是回到以前的状态而已，公司的业绩就算不增长，也不会下降。但如果他选择拒绝，那么那些本来能力优秀的打工人很可能选择离开，留下像小镇青年那样不得不加班的低效率打工人，这就是<strong>劣币驱逐良币</strong>，毫无疑问，良币被驱逐意味着企业将蒙受损失。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>因此，内卷不会创造价值，而且会危害每一个人。如果打工人不觉醒、不抗争，管理者不制定有效措施防止内卷，而任由内卷的发生，我们每一个人都将是受害者，每个人的幸福感都会降低。</p><h2 id="内卷之下｜如何解决个人的内卷化问题？"><a href="#内卷之下｜如何解决个人的内卷化问题？" class="headerlink" title="内卷之下｜如何解决个人的内卷化问题？"></a><strong>内卷之下｜如何解决个人的内卷化问题？</strong></h2><h3 id="1、解决个人的内卷化问题，一定要从个人的思维方式和行为方式入手。"><a href="#1、解决个人的内卷化问题，一定要从个人的思维方式和行为方式入手。" class="headerlink" title="1、解决个人的内卷化问题，一定要从个人的思维方式和行为方式入手。"></a>1、<strong>解决个人的内卷化问题，一定要从个人的思维方式和行为方式入手。</strong></h3><p>中国传统文化给了我们很多精神财富，同时也给了我们很多包袱：热衷道德宣判，没事喜欢评价别人，又特别害怕别人评价自己；随大流受魅惑，没有独立的眼光，独立的判断能力；功利意识爆棚，满口仁义道德，真到做事，功利为上；贪多求全责备，恨不得拿下所有证书；多元眼光为零，对社会的观察完全没有多元的眼光。</p><p>当下又被管理主义、教条主义、科学主义折腾得够呛。每天做无数的规定动作，在其中消耗生命。</p><p>这种情况下，我们需要一个坚定的心态来实现个人的反内卷。</p><ul><li><p><strong>第一，面对嘈嘈杂杂的意见，要有战略性躺平的意识。</strong></p></li><li><p><strong>第二，对于重重叠叠的要求，要明白它们的机制性来由。</strong></p></li><li><p><strong>第三，对于社会提倡的林林总总的能力，你要集中一切精力和资历，培养行业的核心能力。</strong></p></li></ul><h3 id="2、善于用智慧的方式实现个人成长。"><a href="#2、善于用智慧的方式实现个人成长。" class="headerlink" title="2、善于用智慧的方式实现个人成长。"></a>2、善于用智慧的方式实现个人成长。</h3><ul><li><strong>第一，培养独立人格。你要有独立的眼光，要把自己立起来，站稳脚跟。这是成长的起点。</strong></li></ul><p>如果你心里装的全是别人塞给你的各种各样的观点，身受各种各样的枷锁，你怎么可能观察这样的社会？你连你自己都认识不了，你怎么认识社会？你连你自己都立不起来，你怎么样去做事业？</p><ul><li><strong>第二，进行系统化修身。</strong></li></ul><p>你要明白自身这个相对独立的小系统的运作，掌握身心两个层面的结构调试能力，在自我调试中悟道。这是成长的基础。</p><ul><li><strong>第三，实现人生的开放式演化。</strong></li></ul><p>你要找到你自身这个小系统与社会大系统、天地超系统之间的关联点，锚定价值点。</p><h3 id="何谓成长之道？"><a href="#何谓成长之道？" class="headerlink" title="何谓成长之道？"></a>何谓成长之道？</h3><p>就是去做只有你才能做的事，或者你能比别人做得更好的事。只要你能为社会做出贡献，你就有权利得到回报。同时培养自己轨道放开的能力，就是在具体问题上，不要锁死在一个轨道上，或者锁死在某一个目标上，某一个情绪上。心灵是开放的，思维方式是开放的，即所谓成长之道！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt;内卷不但不会创造价值，而且会危害每一个人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不知道从什么时候开始，“内卷”这个概念变得很火炎焱燚。&lt;/p&gt;
&lt;p&gt;什么是内卷？什么是内卷化？内卷究竟卷的是什么？众说纷</summary>
      
    
    
    
    <category term="随笔感悟" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94%E6%84%9F%E6%82%9F/"/>
    
    
    <category term="Perception" scheme="http://example.com/tags/Perception/"/>
    
  </entry>
  
  <entry>
    <title>Vue基础知识总结-Vuex</title>
    <link href="http://example.com/2021/05/07/VueBasis-Vuex/"/>
    <id>http://example.com/2021/05/07/VueBasis-Vuex/</id>
    <published>2021-05-07T11:13:15.000Z</published>
    <updated>2021-05-07T08:32:09.314Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h3><h4 id="1、什么是vuex？"><a href="#1、什么是vuex？" class="headerlink" title="1、什么是vuex？"></a>1、什么是vuex？</h4><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态， 并以相应的规则保证状态以一种可预测的方式发生改变简单来说，就是用来集中管理数据；</p><h4 id="2、使用vuex的核心概念"><a href="#2、使用vuex的核心概念" class="headerlink" title="2、使用vuex的核心概念"></a>2、使用vuex的核心概念</h4><h5 id="1）store"><a href="#1）store" class="headerlink" title="1）store"></a>1）store</h5><p>vuex 中最关键的是store对象，这是vuex的核心。可以说，vuex这个插件其实就是一个store对象，每个vue应用仅且仅有一个store对象。</p><p>（1）创建store</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;...&#125;);</span><br></pre></td></tr></table></figure><p>可见，store是Vuex.Store这个构造函数new出来的实例。在构造函数中可以传一个对象参数。这个参数中可以包含5个对象：</p><ul><li><p>state – 存放状态</p></li><li><p>getters – state的计算属性</p></li><li><p>mutations – 更改状态的逻辑，同步操作</p></li><li><p>actions – 提交mutation，异步操作</p></li><li><p>mudules – 将store模块化</p></li></ul><p>关于store，需要先记住两点：</p><ul><li><p>store 中存储的状态是响应式的，当组件从store中读取状态时，如果store中的状态发生了改变，那么相应的组件也会得到更新；</p></li><li><p>不能直接改变store中的状态。改变store中的状态的唯一途径是提交(commit)mutations。这样使得我们可以方便地跟踪每一个状态的变化。</p></li></ul><p>（2）完整的store的结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">state: &#123;</span><br><span class="line"><span class="comment">// 存放状态</span></span><br><span class="line">&#125;,</span><br><span class="line">getters: &#123;</span><br><span class="line"><span class="comment">// state的计算属性</span></span><br><span class="line">&#125;,</span><br><span class="line">mutations: &#123;</span><br><span class="line">    <span class="comment">// 更改state中状态的逻辑，同步操作</span></span><br><span class="line">&#125;,</span><br><span class="line">actions: &#123;</span><br><span class="line"><span class="comment">// 提交mutation，异步操作</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 如果将store分成一个个的模块的话，则需要用到modules。</span></span><br><span class="line"><span class="comment">//然后在每一个module中写state, getters, mutations, actions等。</span></span><br><span class="line">modules: &#123;</span><br><span class="line">a: moduleA,</span><br><span class="line">b: moduleB,</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2）-state"><a href="#2）-state" class="headerlink" title="2） state"></a>2） state</h5><p>state上存放的，说的简单一些就是变量，也就是所谓的状态。没有使用 state 的时候，我们都是直接在data 中进行初始化的，但是有了 state 之后，我们就把 data 上的数据转移到 state 上去了。另外有些状态是组件私有的状态，称为组件的局部状态，我们不需要把这部分状态放在store中去。</p><p>（1）如何在组件中获取vuex状态</p><p>由于vuex的状态是响应式的，所以从store中读取状态的的方法是在组件的计算属性中返回某个状态。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;store&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line">template: <span class="string">`&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">computed: &#123;</span><br><span class="line">count () &#123;</span><br><span class="line"><span class="comment">// 获取store中的状态</span></span><br><span class="line"><span class="keyword">return</span> store.state.count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，组件中的状态就与store中的状态关联起来了。每当store.state.count发生变化时，都会重新求取计算属性，从而更新DOM。<br>然而，每个组件中都需要反复倒入store。<strong>可以将store注入到vue实例对象中去</strong>，这样每一个子组件中都可以直接获取store中的状态，而不需要反复的倒入store了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="comment">// 把 store 对象注入到了</span></span><br><span class="line">store,</span><br><span class="line">components: &#123; Counter &#125;,</span><br><span class="line">template: <span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;counter&gt;&lt;/counter&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样可以在子组件中使用<code>this.$store.state.count</code>访问到state里面的count这个状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line">template: <span class="string">`&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">computed: &#123;</span><br><span class="line">count () &#123;</span><br><span class="line"><span class="comment">// 获取store中的状态</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.$store.state.count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2） mapState<br>当一个组件获取多种状态的时候，则在计算属性中要写多个函数。为了方便，可以使用mapState辅助函<br>数来帮我们生成计算属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">data ()&#123;</span><br><span class="line">localState: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">computed: mapState(&#123;</span><br><span class="line"><span class="comment">// 此处的state即为store里面的state</span></span><br><span class="line">count: <span class="function"><span class="params">state</span> =&gt;</span> state.count,</span><br><span class="line"><span class="comment">// 当计算属性的名称与state的状态名称一样时，可以省写</span></span><br><span class="line"><span class="comment">// 映射 this.count1 为 store.state.count1</span></span><br><span class="line">count1,</span><br><span class="line"><span class="comment">//&#x27;count&#x27;等同于 ‘state =&gt; state.count’</span></span><br><span class="line">countAlias: <span class="string">&#x27;count&#x27;</span>,</span><br><span class="line">countPlus (state)&#123;</span><br><span class="line"><span class="comment">// 使用普通函数是为了保证this指向组件对象</span></span><br><span class="line"><span class="keyword">return</span> state.count + <span class="built_in">this</span>.localState;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//上面是通过mapState的对象来赋值的，还可以通过mapState的数组来赋值</span></span><br><span class="line">computed: mapState([<span class="string">&#x27;count&#x27;</span>]);</span><br><span class="line"><span class="comment">//这种方式很简洁，但是组件中的state的名称就跟store中映射过来的同名</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对象扩展运算符<br>mapState 函数返回的是一个对象，为了将它里面的计算属性与组件本身的局部计算属性组合起来，需<br>要用到对象扩展运算符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">localState () &#123;</span><br><span class="line">...mapState (&#123;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，mapState中的计算属性就与localState计算属性混合一起了</p><h5 id="3）getters"><a href="#3）getters" class="headerlink" title="3）getters"></a>3）getters</h5><p>有时候我们需要从 store 中的 state 中派生出一些状态，例如对列表表进行过滤并计数。此时可以用到<br>getters，getters可以看作是store的计算属性，其参数为state。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">state: &#123;</span><br><span class="line">todos: [</span><br><span class="line">&#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">&#x27;reading&#x27;</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">&#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">&#x27;playBastketball&#x27;</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">getters: &#123;</span><br><span class="line">doneTodos: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> state.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.done);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>获取getters里面的状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">store.getters.doneTodos <span class="comment">// [&#123; id: 1, text: &#x27;reading&#x27;, done: true &#125;]</span></span><br><span class="line"><span class="comment">//在组件中，则要写在计算属性中，</span></span><br><span class="line">computed: &#123;</span><br><span class="line">doneTodos () &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.$store.getters.doneTodos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4）mutations"><a href="#4）mutations" class="headerlink" title="4）mutations"></a>4）mutations</h5><p>mutations里面是如何更改state中状态的逻辑。更改Vuex中的state的唯一方法是，提交mutation，即<br>store.commit(‘increment’)。</p><blockquote><p>注意：mutation必须是同步函数，不能是异步的，这是为了调试的方便。</p></blockquote><h5 id="5）actions"><a href="#5）actions" class="headerlink" title="5）actions"></a>5）actions</h5><p>因为mutations中只能是同步操作，但是在实际的项目中，会有异步操作，那么actions就是为了异步操<br>作而设置的。这样，就变成了在action中去提交mutation，然后在组件的methods中去提交action。只<br>是提交actions的时候使用的是dispatch函数，而mutations则是用commit函数。</p><h4 id="3、Vuex在Vue-Cli中的实践使用"><a href="#3、Vuex在Vue-Cli中的实践使用" class="headerlink" title="3、Vuex在Vue-Cli中的实践使用"></a>3、Vuex在Vue-Cli中的实践使用</h4><p>项目搭建及添加vuex<br>当我们使用vue-cli搭建一个vue项目的时候，搭建完成后的文件目录是这样子的</p><p><img src="/images/VueBasis-Vuex/image-20210507161550120.png" alt="image-20210507161550120"></p><p>首先使用 <code>npm install --save-dev vuex </code>把vuex添加到依赖，接下来就是如何在组件中使用vuex，大<br>体上来说有以下两种形式。</p><h5 id="1、通过-store-选项"><a href="#1、通过-store-选项" class="headerlink" title="1、通过 store 选项"></a>1、通过 store 选项</h5><p>如果vue-cli搭建成功，在src目录下会有一个main.js文件，main.js的主要作用是把项目中最顶层的<br>app.vue组件挂载到DOM中，其他所有的组件都可以看做是app.vue的子组件。<br>在main.js中，做如下操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意下面的代码</span></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">state： &#123;&#125;，</span><br><span class="line">getters: &#123;&#125;,</span><br><span class="line">actions: &#123;&#125;,</span><br><span class="line">mutations: &#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//注意router选项，此处的写法等同于store: store</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">router,</span><br><span class="line">store,</span><br><span class="line">components: &#123; App &#125;,</span><br><span class="line">    template: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在组件中，就可以通过 this.$store 来使用store实例；<br>如果在项目中需要配置的vuex选项很多，我们则应该把vuex的相关代码分割到不同模块<br>在src下新建store文件夹，在文件夹中创建如下几个文件</p><p><img src="/images/VueBasis-Vuex/image-20210507161924220.png" alt="image-20210507161924220"></p><p>我们可以随意设置文件名，但最好可以通过文件名就能判断出这个文件是用来干嘛的<br><code>index.js</code>：整合各个模块，创建并导出vuex实例<br><code>rootState.js</code>：配置vuex实例的state选项<br><code>getters.js</code>：getter选项<br><code>mutations.js</code>：mutations选项<br><code>actions.js</code>：actions选项</p><p>在index.js中，我们需要</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> state <span class="keyword">from</span> <span class="string">&#x27;./rootState.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> getters <span class="keyword">from</span> <span class="string">&#x27;./getters.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">&#x27;./mutations.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> actions <span class="keyword">from</span> <span class="string">&#x27;./actions.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">state,</span><br><span class="line">getters,</span><br><span class="line">actions,</span><br><span class="line">mutations</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>剩下的四个文件配置都差不多一样，以<code>rootState.js</code>为例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">count: <span class="number">0</span>,</span><br><span class="line">arr: [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> state;</span><br></pre></td></tr></table></figure><p>如此这般，在main.js中，我们需要编写的代码就减少了很多</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store/index&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">router,</span><br><span class="line">store,</span><br><span class="line">components: &#123; App &#125;,</span><br><span class="line">template: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>将vuex实例挂载到vue原型链上</strong></p><p>这是一种非主流的方式，主要是受axios启发，在这种方法中，我们需要这样修改main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The Vue build version to load with the `import` command</span></span><br><span class="line"><span class="comment">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store/index&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在vue中使用vuex必须先调用vue.use方法</span></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"><span class="comment">//具体挂载到vue原型的哪个属性上，可以由我们自行决定</span></span><br><span class="line"><span class="comment">//遇到配置繁多的情况也可以进行分割</span></span><br><span class="line">Vue.prototype.$store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">state： &#123;&#125;，</span><br><span class="line">getters: &#123;&#125;,</span><br><span class="line">actions: &#123;&#125;,</span><br><span class="line">mutations: &#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//没有了store选项</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">router,</span><br><span class="line">components: &#123; App &#125;,</span><br><span class="line">template: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如此这般，还是可以通过 <code>this.$store</code> 来使用vuex。</p><h4 id="4、实践操作，修改state的值"><a href="#4、实践操作，修改state的值" class="headerlink" title="4、实践操作，修改state的值"></a>4、实践操作，修改state的值</h4><p>1）安装 vuex</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex -S</span><br></pre></td></tr></table></figure><p>2）在目录下创建store文件,并进行如下编辑</p><p><img src="/images/VueBasis-Vuex/image-20210507162519056.png" alt="image-20210507162519056"></p><p>3）然后再main.js中全局引入</p><p><img src="/images/VueBasis-Vuex/image-20210507162618400.png" alt="image-20210507162618400"></p><p>4）最后在组件中使用</p><p><img src="/images/VueBasis-Vuex/image-20210507162745928.png" alt="image-20210507162745928"></p><p>这个的功能是运用mutations 修改state中的值，演示效果如下：</p><p><img src="/images/VueBasis-Vuex/directive.gif" alt="directive"></p><h4 id="5、vuex-actions异步修改状态"><a href="#5、vuex-actions异步修改状态" class="headerlink" title="5、vuex actions异步修改状态"></a>5、vuex actions异步修改状态</h4><p>1）在store.js中声明actions</p><p>actions是可以调用Mutations里的方法的，我们还是继续在上节课的代码基础上进行学习，在actions里<br>调用add和reduce两个方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> actions =&#123;</span><br><span class="line"><span class="function"><span class="title">addAction</span>(<span class="params">context</span>)</span>&#123;</span><br><span class="line">context.commit(<span class="string">&#x27;add&#x27;</span>,<span class="number">10</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">reduceAction</span>(<span class="params">&#123;commit&#125;</span>)</span>&#123;</span><br><span class="line">commit(<span class="string">&#x27;reduce&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在actions里写了两个方法addAction和reduceAction，在方法体里，我们都用commit调用了Mutations<br>里边的方法。细心的小伙伴会发现这两个方法传递的参数也不一样。</p><ul><li><p>context：上下文对象，这里你可以理解称store本身。</p></li><li><p>{commit}：直接把commit对象传递过来，可以让方法体逻辑和代码更清晰明了。</p></li></ul><p>2）模板中的使用</p><p>我们需要在count.vue模板中编写代码，让actions生效。我们先复制两个以前有的按钮，并改成我们的<br>actions里的方法名，分别是：addAction和reduceAction。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">&lt;button @click=<span class="string">&quot;addAction&quot;</span>&gt;+&lt;/button&gt;</span><br><span class="line">&lt;button @click=<span class="string">&quot;reduceAction&quot;</span>&gt;-&lt;/button&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>改造一下我们的methods方法，首先还是用扩展运算符把mapMutations和mapActions加入。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">...mapMutations([</span><br><span class="line"><span class="string">&#x27;add&#x27;</span>,<span class="string">&#x27;reduce&#x27;</span></span><br><span class="line">]),</span><br><span class="line">...mapActions([<span class="string">&#x27;addAction&#x27;</span>,<span class="string">&#x27;reduceAction&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>得用import把我们的mapActions引入才可以使用。</p></blockquote><p>3）增加异步检验</p><p>我们现在看的效果和我们用Mutations作的一模一样，肯定有的小伙伴会好奇，那actions有什么用，我<br>们为了演示actions的异步功能，我们增加一个计时器（setTimeOut）延迟执行。在addAction里使用<br>setTimeOut进行延迟执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setTimeOut(<span class="function">()=&gt;</span>&#123;context.commit(reduce)&#125;,<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;我比reduce提前执行&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;vuex&quot;&gt;&lt;a href=&quot;#vuex&quot; class=&quot;headerlink&quot; title=&quot;vuex&quot;&gt;&lt;/a&gt;vuex&lt;/h3&gt;&lt;h4 id=&quot;1、什么是vuex？&quot;&gt;&lt;a href=&quot;#1、什么是vuex？&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="框架学习" scheme="http://example.com/categories/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Vue" scheme="http://example.com/categories/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/Vue/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
    <category term="Vuex" scheme="http://example.com/tags/Vuex/"/>
    
  </entry>
  
  <entry>
    <title>Vue基础知识总结-VueRouter</title>
    <link href="http://example.com/2021/05/05/VueBasis-VueRouter/"/>
    <id>http://example.com/2021/05/05/VueBasis-VueRouter/</id>
    <published>2021-05-05T06:32:25.000Z</published>
    <updated>2021-05-07T03:02:05.516Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h3><h4 id="1、vue-router如何响应-路由参数-的变化？"><a href="#1、vue-router如何响应-路由参数-的变化？" class="headerlink" title="1、vue-router如何响应 路由参数 的变化？"></a>1、vue-router如何响应 路由参数 的变化？</h4><p>提醒一下，当使用路由参数时，例如从 /user/foo 导航到 /user/bar，<strong>原来的组件实例会被复用</strong>。因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。不过，这<strong>也意味着组件的生命周期钩子不会再被调用。</strong></p><p>复用组件时，想对路由参数的变化作出响应的话，你可以简单地<strong>watch (监测变化) $route 对象</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = &#123;</span><br><span class="line">template: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">watch: &#123;</span><br><span class="line"><span class="string">&#x27;$route&#x27;</span> (to, <span class="keyword">from</span>) &#123;</span><br><span class="line"><span class="comment">// 对路由变化作出响应...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者使用 2.2 中引入的 <code>beforeRouteUpdate</code> 导航守卫：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = &#123;</span><br><span class="line">template: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line"><span class="comment">// react to route changes...</span></span><br><span class="line"><span class="comment">// don&#x27;t forget to call next()</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">注意是：</span><br><span class="line">（<span class="number">1</span>）从同一个组件跳转到同一个组件。</span><br><span class="line">（<span class="number">2</span>）生命周期钩子created和mounted都不会调用。</span><br></pre></td></tr></table></figure><h4 id="2、完整的-vue-router-导航解析流"><a href="#2、完整的-vue-router-导航解析流" class="headerlink" title="2、完整的 vue-router 导航解析流"></a>2、完整的 vue-router 导航解析流</h4><p>1）导航被触发。</p><p>2）在失活的组件里调用离开守卫。</p><p>3）调用全局的 beforeEach 守卫。</p><p>4）在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。</p><p>5）在路由配置里调用 beforeEnter 。</p><p>6）解析异步路由组件。</p><p>7）在被激活的组件里调用 beforeRouteEnter 。</p><p>8）调用全局的 beforeResolve 守卫 (2.5+)。</p><p>9）导航被确认。</p><p>10）调用全局的 afterEach 钩子。</p><p>11）触发 DOM 更新。</p><p>12）用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。</p><p><img src="/images/VueBasis-VueRouter/image-20210429173157369.png" alt="image-20210429173157369"></p><h4 id="3、vue-router有哪几种导航钩子（-导航守卫-）？"><a href="#3、vue-router有哪几种导航钩子（-导航守卫-）？" class="headerlink" title="3、vue-router有哪几种导航钩子（ 导航守卫 ）？"></a>3、vue-router有哪几种导航钩子（ 导航守卫 ）？</h4><p>vue-router 提供的导航守卫主要用来通过跳转或取消的方式守卫导航。</p><p>例如判断登录信息：没登录全部跳到登录页。判断必要操作是否进行没进行的话中断跳转。<br><strong>参数或查询的改变并不会触发进入/离开的导航守卫</strong>。你可以通过观察 <code>$route</code> 对象响应路由参数的变<br>化)来应对这些变化，或使用 <code>beforeRouteUpdate</code> 的组件内守卫。</p><p><strong>分为三大类：全局守卫、路由守卫、组件守卫</strong></p><h5 id="全局前置守卫"><a href="#全局前置守卫" class="headerlink" title="全局前置守卫"></a>全局前置守卫</h5><p>可以使用 router.beforeEach 注册一个全局前置守卫：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123; ... &#125;)</span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当一个导航触发时，全局前置守卫按照创建顺序调用。守卫是异步解析执行，此时导航在所有守卫<br>resolve 完之前一直处于 等待中。<br>    &nbsp; 每个守卫方法接收三个参数：</p><ul><li><code>to: Route</code> : 即将要进入的目标 路由对象</li><li><code>from: Route</code> : 当前导航正要离开的路由</li><li><code>next: Function</code> : 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。</li><li><code>next()</code> : 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed (确认的)。</li><li><code>next(false</code>) : 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 from 路由对应的地址。</li><li><code>next(&#39;/&#39;) </code><strong>或者</strong> <code>next(&#123; path: &#39;/&#39; &#125;)</code> : 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 next 传递任意位置对象，且允许设置诸如 <code>replace: true</code> 、 <code>name:&#39;home&#39; </code>之类的选项以及任何用在 <code>router-link </code>的 <code>to </code>prop或 <code>router.push</code> `中的选项。</li><li><code>next(error) :</code> (2.4.0+) 如果传入 <code>next </code>的参数是一个 <code>Error</code> 实例，则导航会被终止且该错误会被传递给 <code>router.onError() </code>注册过的回调。</li></ul><p><strong>确保要调用 <code>next </code>方法，否则钩子就不会被 resolved。</strong></p><h5 id="全局解析守卫"><a href="#全局解析守卫" class="headerlink" title="全局解析守卫"></a>全局解析守卫</h5><p>在 2.5.0+ 你可以用 <code>router.beforeResolve</code> 注册一个全局守卫。这和 router.beforeEach 类似，区<br>别是在导航被确认之前，<strong>同时在所有组件内守卫和异步路由组件被解析之后</strong>，解析守卫就被调用。</p><h5 id="全局后置钩子"><a href="#全局后置钩子" class="headerlink" title="全局后置钩子"></a>全局后置钩子</h5><p>你也可以注册全局后置钩子，然而和守卫不同的是，这些钩子不会接受 <code>next </code>函数也不会改变导航本<br>身：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="路由独享的守卫"><a href="#路由独享的守卫" class="headerlink" title="路由独享的守卫"></a>路由独享的守卫</h5><p>你可以在路由配置上直接定义 <code>beforeEnter</code> 守卫：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">routes: [</span><br><span class="line">&#123;</span><br><span class="line">path: <span class="string">&#x27;/foo&#x27;</span>,</span><br><span class="line">component: Foo,</span><br><span class="line">beforeEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这些守卫与全局前置守卫的方法参数是一样的。</p><h5 id="组件内的守卫"><a href="#组件内的守卫" class="headerlink" title="组件内的守卫"></a>组件内的守卫</h5><p>最后，可以在路由组件内直接定义以下路由导航守卫：</p><ul><li><code>beforeRouteEnter</code></li><li><code>beforeRouteUpdate</code> (2.2 新增)</li><li><code>beforeRouteLeave</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = &#123;</span><br><span class="line">template: <span class="string">`...`</span>,</span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line"><span class="comment">// 在渲染该组件的对应路由被 confirm 前调用</span></span><br><span class="line"><span class="comment">// 不！能！获取组件实例 `this`</span></span><br><span class="line"><span class="comment">// 因为当守卫执行前，组件实例还没被创建</span></span><br><span class="line">&#125;,</span><br><span class="line">beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line"><span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line"><span class="comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class="line"><span class="comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line"><span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">&#125;,</span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line"><span class="comment">// 导航离开该组件的对应路由时调用</span></span><br><span class="line"><span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>beforeRouteEnter </code>守卫 <strong>不能</strong> 访问 <code>this</code> ，因为守卫在导航确认前被调用,因此即将登场的新组件还没<br>被创建。<br>不过，你可以通过传一个回调给 next 来访问组件实例。在导航被确认的时候执行回调，并且把组件实<br>例作为回调方法的参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">next(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 通过 `vm` 访问组件实例</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意 <code>beforeRouteEnter</code> 是支持给 <code>next </code>传递回调的唯一守卫。对于 <code>beforeRouteUpdate </code>和<br><code>beforeRouteLeave</code> 来说， <code>this</code> 已经可用了，所以不支持传递回调，因为没有必要了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line"><span class="comment">// just use `this`</span></span><br><span class="line"><span class="built_in">this</span>.name = to.params.name</span><br><span class="line">next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个离开守卫通常用来禁止用户在还未保存修改前突然离开。该导航可以通过 <code>next(false)</code> 来取消。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteLeave (to, <span class="keyword">from</span> , next) &#123;</span><br><span class="line"><span class="keyword">const</span> answer = <span class="built_in">window</span>.confirm(<span class="string">&#x27;Do you really want to leave? you have unsaved</span></span><br><span class="line"><span class="string">changes!&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> (answer) &#123;</span><br><span class="line">next()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">next(<span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、vue-router传递参数的几种方式"><a href="#4、vue-router传递参数的几种方式" class="headerlink" title="4、vue-router传递参数的几种方式"></a>4、vue-router传递参数的几种方式</h4><h5 id="1）使用name传递"><a href="#1）使用name传递" class="headerlink" title="1）使用name传递"></a>1）使用name传递</h5><p>之前一直在配置路由的时候出现一个name,但不知道他具体有什么用，在路由里他可以用来传递参数。<br>在index.js中将路由的name都写好</p><p><img src="/images/VueBasis-VueRouter/image-20210429213649393.png" alt="image-20210429213649393"></p><p>接收参数：</p><p>在我们需要接收它的页面里添加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是router-name:&#123;&#123;$route.name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/VueBasis-VueRouter/image-20210429213719976.png" alt="image-20210429213719976"></p><p>比如我在这里是在APP.vue中接收的，我希望切换每个页面都能看见参数。<br>但这种方法不太常用，因为我们觉得它不太规整。</p><h5 id="2）to来传递"><a href="#2）to来传递" class="headerlink" title="2）to来传递"></a>2）to来传递</h5><p>利用router-link 中的to来传参，看语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link v-bind:to&#x3D;&quot;&#123;name:&#39;xxx&#39;,params:&#123;key:value&#125;&#125;&quot;&gt;&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure><ul><li><p>a.首先：to需要绑定；</p></li><li><p>b.传参使用类似与对象的形式；</p></li><li><p>c.name就是我们在配置路由时候取的名字；</p></li><li><p>d.参数也是采用对象的形式。</p></li><li><p>实际操作一下：</p><p>=&gt; a.在APP.vue中将to里面的路径改成上面那样</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to&#x3D;&quot;&#123;name:&#39;hellovue&#39;,params:&#123;username:&#39;tomcat&#39;&#125;&#125;&quot;&gt;hellovue页面</span><br><span class="line">&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure><p>这里我们注意to的写法，前面加了冒号，因为那是绑定的，传递一个username过去，值为tomcat</p><p>​    =&gt; b.在index.js里面给hellovue配置名字叫hellovue,与上面name相对应</p><p><img src="/images/VueBasis-VueRouter/image-20210429214048560.png" alt="image-20210429214048560"></p><p>​    =&gt; c、在hellovue.vue中接收参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>传递的名字是：&#123;&#123;$route.params.username&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3）采用url传参"><a href="#3）采用url传参" class="headerlink" title="3）采用url传参"></a>3）采用url传参</h5><p>在路由文件里采用冒号的形式传参，这就是对参数的绑定</p><ul><li><p>a、修改index.js里的path，这里我们修改myjob.vue组件</p><p><img src="/images/VueBasis-VueRouter/image-20210429214435188.png" alt="image-20210429214435188"></p></li><li><p>b、在App.vue组件里传递参数</p><p><img src="/images/VueBasis-VueRouter/image-20210429214445901.png" alt="image-20210429214445901"></p></li><li><p>c、在myjob.vue组件里显示我们要展示的内容（接收参数）</p></li></ul><p><img src="/images/VueBasis-VueRouter/image-20210429214453495.png" alt="image-20210429214453495"></p><h4 id="5、vue-router的动态路由匹配"><a href="#5、vue-router的动态路由匹配" class="headerlink" title="5、vue-router的动态路由匹配"></a>5、vue-router的动态路由匹配</h4><p>我们经常需要把某种模式匹配到的所有路由，全都映射到同个组件。例如，我们有一个 User 组件，对<br>于所有 ID 各不相同的用户，都要使用这个组件来渲染。那么，我们可以在 vue-router 的路由路径中<br>使用“动态路径参数”(dynamic segment) 来达到这个效果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = &#123;</span><br><span class="line">template: <span class="string">&#x27;&lt;div&gt;User&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">routes: [</span><br><span class="line"><span class="comment">// 动态路径参数 以冒号开头</span></span><br><span class="line">&#123; <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>, <span class="attr">component</span>: User &#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>现在呢，像<code>/user/foo</code>和 <code>/user/bar</code> 都将映射到相同的路由。</p><p>一个“路径参数”使用冒号 <code>: </code>标记。当匹配到一个路由时，参数值会被设置到 <code>this.$route.params</code>，<br>可以在每个组件内使用。于是，我们可以更新 <code>User</code> 的模板，输出当前用户的 ID：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = &#123;</span><br><span class="line">template: <span class="string">&#x27;&lt;div&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以在一个路由中设置多段“路径参数”，对应的值都会设置到 <code>$route.params</code> 中。例如：</p><table><thead><tr><th>模式</th><th>匹配路径</th><th>$route.params</th></tr></thead><tbody><tr><td>/user/:username</td><td>/user/evan</td><td><code>&#123; username: &#39;evan&#39; &#125;</code></td></tr><tr><td>/user/:username/post/:post_id</td><td>/user/evan/post/123</td><td><code>&#123; username: &#39;evan&#39;, post_id:&#39;123&#39; &#125;</code></td></tr></tbody></table><p>除了 <code>$route.params</code> 外， <code>$route</code> 对象还提供了其它有用的信息，例如， <code>$route.query</code> (如果 URL<br>中有查询参数)、 <code>$route.hash</code> 等等。</p><h4 id="6、vue-router如何定义嵌套路由？"><a href="#6、vue-router如何定义嵌套路由？" class="headerlink" title="6、vue-router如何定义嵌套路由？"></a>6、vue-router如何定义嵌套路由？</h4><p>任何子路由都是在其父路由的组件中切换显示，不管是多少层的路由嵌套，都是这样的理解，所以父路由需要有以下两点，二者缺一不可</p><blockquote><p>有组件引用<br>组件中有router-view组件</p></blockquote><p>父路由没有引用组件，导致子路由没有承载容器，自然而然就出现了两层路由跳不起来等不起效的情况</p><h4 id="7、-lt-router-link-gt-lt-router-link-gt-组件及其属性"><a href="#7、-lt-router-link-gt-lt-router-link-gt-组件及其属性" class="headerlink" title="7、 &lt;router-link&gt; &lt;/router-link&gt; 组件及其属性"></a>7、 <code>&lt;router-link&gt; &lt;/router-link&gt;</code> 组件及其属性</h4><p>支持用户在具有路由功能的应用中 (点击) 导航 通过 to 属性指定目标地址<br>一：router-link组件的props：</p><ul><li><strong>to</strong></li></ul><p>表示目标路由的链接。当被点击后，内部会立刻把 to 的值传到 router.push()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to&#x3D;&#39;&#x2F;Home&#39;&gt;Home&lt;&#x2F;router-link&gt;</span><br><span class="line">渲染结果：</span><br><span class="line">&lt;a href&#x3D;&quot;Home&quot;&gt;Home&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to&#x3D;&quot;&#123; path: &#39;register&#39;, query: &#123; name: &#39;fjw&#39; &#125;&#125;&quot;&gt;router&lt;&#x2F;routerlink&gt;</span><br><span class="line">渲染结果：</span><br><span class="line">&lt;a href&#x3D;&quot;&#x2F;register?name&#x3D;fjw&quot;&gt;router&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>tag</strong></li></ul><p>指定<code>&lt;router-link&gt;</code>组件最终被渲染成什么标签；非必须；如果没有tag属性，<code>router-link</code>默认会被渲染成a标签。在下面的例子中，渲染成了li标签。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to&#x3D;&#39;&#x2F;Home&#39; tag&#x3D;&quot;li&quot; &gt;Home&lt;&#x2F;router-link&gt;</span><br><span class="line">渲染结果：</span><br><span class="line">&lt;li&gt;Home&lt;&#x2F;li&gt;</span><br><span class="line">此时依旧会监听点击事件，触发导航</span><br></pre></td></tr></table></figure><ul><li><strong>replace</strong></li></ul><p>当点击时，会调用 <code>router.replace() </code>而不是 <code>router.push()</code>，于是导航后不会留下 history 记录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to&#x3D;&quot;&#123; path: &#39;&#x2F;abc&#39;&#125;&quot; replace&gt;&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>append</strong></li></ul><p>则在当前 (相对) 路径前添加基路径。/a 导航到一个相对路径 b，如果没有配置 append，则路径为 /b，如果配了，则为 /a/b</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to&#x3D;&quot;&#123; path: &#39;relative&#x2F;path&#39;&#125;&quot; append&gt;&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>active-class</strong></li></ul><p>表示激活这个链接时，添加的class，默认是<code>router-link-class</code>。默认值可以通过路由的构造选项<br><code>linkActiveClass</code> 来全局配置。</p><ul><li><strong>exact</strong></li></ul><p>“是否激活” 默认类名的依据是 inclusive match (全包含匹配)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 这个链接只会在地址为 &#x2F; 的时候被激活 --&gt;</span><br><span class="line">&lt;router-link to&#x3D;&quot;&#x2F;&quot; exact&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>event</strong></li></ul><p>默认值: ‘click’ 声明可以用来触发导航的事件。可以是一个字符串或是一个包含字符串的数组。</p><ul><li><strong>exact-active-class</strong></li></ul><p>默认值: “router-link-exact-active” 配置当链接被精确匹配的时候应该激活的 class。</p><h4 id="8、vue-router实现路由懒加载"><a href="#8、vue-router实现路由懒加载" class="headerlink" title="8、vue-router实现路由懒加载"></a>8、vue-router实现路由懒加载</h4><p>在项目router/index.js文件中将</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&#x27;../views/About.vue&#x27;</span></span><br></pre></td></tr></table></figure><p>更改为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法1：</span></span><br><span class="line"><span class="keyword">const</span> About = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/About&#x27;</span>)</span><br><span class="line"><span class="comment">//方法2：</span></span><br><span class="line"><span class="keyword">const</span> About = <span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">import</span>(<span class="string">&#x27;../views/About&#x27;</span>).then(<span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="built_in">module</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即可实现路由懒加载的效果</p><h4 id="9、vue-router路由的两种模式"><a href="#9、vue-router路由的两种模式" class="headerlink" title="9、vue-router路由的两种模式"></a>9、vue-router路由的两种模式</h4><p>类型: <code>string</code></p><p>默认值: <code>&quot;hash&quot; (浏览器环境) | &quot;abstract&quot; (Node.js 环境)</code></p><p>可选值: <code>&quot;hash&quot; | &quot;history&quot; | &quot;abstract</code></p><p>配置路由模式:</p><ul><li><p><code>hash </code>: 使用 URL hash 值来作路由。支持所有浏览器，包括不支持 HTML5 History Api 的浏览器。</p></li><li><p><code>history </code>: 依赖 HTML5 History API 和服务器配置。查看 HTML5 History 模式。</p></li><li><p><code>abstract </code>: 支持所有 JavaScript 运行环境，如 Node.js 服务器端。<strong>如果发现没有浏览器的 API，路由会自动强制进入这个模式</strong></p></li></ul><h5 id="Hash模式"><a href="#Hash模式" class="headerlink" title="Hash模式"></a><strong>Hash模式</strong></h5><p>Hash 模式是 Vue-Router 的默认模式，具体的体现是在浏览器地址栏上 URL 路径永远带着一个「#」号。在浏览器支持度上面，Hash 模式是比较强势的，甚至能兼容低版本的 IE 浏览器。「#」号后面内容的改变，不会引起页面对服务端的请求，所以也就不会重新加载页面。在部署服务器方面，个人认为 Hash 模式比 History 模式来得更为方便，因为 History 有 URL 重定向问题，需要在服务端去配置 url 重定向，否则会报 404 错误。市面上也有不少大厂是使用 Hash 模式进行开发的，比如网易云音乐</p><h5 id="History-模式"><a href="#History-模式" class="headerlink" title="History 模式"></a><strong>History 模式</strong></h5><p>HTML5 History API 提供了一个 <code>history.pushState</code> 和 <code>history.reolaceState</code> 方法（浏览器支持情况不是很乐观），它能让开发人员在不刷新网页的情况下改变站点的 URL。因为 Hash 模式会带上一个「#」号，会让 URL 地址变得比较难看，所以很多开发者都会选择 History 模式开发。但有个缺点，前端的 URL 必须和实际向服务端发起的请求的 URL 保持一致，如果服务端没有对相应的路由做处理，则会返回 404 错误页面。</p><blockquote><p>拓展：前进，后退，跳转操作方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">history.go(-<span class="number">3</span>);<span class="comment">//后退3次</span></span><br><span class="line">history.go(<span class="number">2</span>);<span class="comment">//前进2次</span></span><br><span class="line">history.go(<span class="number">0</span>);<span class="comment">//刷新当前页面</span></span><br><span class="line">history.back(); <span class="comment">//后退</span></span><br><span class="line">history.forward(); <span class="comment">//前进</span></span><br></pre></td></tr></table></figure></blockquote><h5 id="abstract-模式"><a href="#abstract-模式" class="headerlink" title="abstract 模式"></a><strong>abstract 模式</strong></h5><p>abstract 模式针对的是没有浏览器环境的情况，比如 Weex 客户端开发，内部是没有浏览器 API 的，那么 Vue-Router 自身会对环境做校验，强制切换到 abstract 模式，如果默认在 Vue-Router 的配置项中不写 mode 的值，在浏览器环境下会默认启用 Hash 模式，在移动客户端下使用 abstract 模式。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;vue-router&quot;&gt;&lt;a href=&quot;#vue-router&quot; class=&quot;headerlink&quot; title=&quot;vue-router&quot;&gt;&lt;/a&gt;vue-router&lt;/h3&gt;&lt;h4 id=&quot;1、vue-router如何响应-路由参数-的变化？&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="框架学习" scheme="http://example.com/categories/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Vue" scheme="http://example.com/categories/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/Vue/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
    <category term="Vue Router" scheme="http://example.com/tags/Vue-Router/"/>
    
  </entry>
  
  <entry>
    <title>Vue基础知识总结-Vue-cli工程</title>
    <link href="http://example.com/2021/05/03/VueBasis-VueCli/"/>
    <id>http://example.com/2021/05/03/VueBasis-VueCli/</id>
    <published>2021-05-03T04:22:45.000Z</published>
    <updated>2021-05-07T03:01:46.792Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue-cli工程"><a href="#vue-cli工程" class="headerlink" title="vue-cli工程"></a>vue-cli工程</h3><h4 id="1、构建的-vue-cli-工程都到了哪些技术，它们的作用分别是什么？"><a href="#1、构建的-vue-cli-工程都到了哪些技术，它们的作用分别是什么？" class="headerlink" title="1、构建的 vue-cli 工程都到了哪些技术，它们的作用分别是什么？"></a>1、构建的 vue-cli 工程都到了哪些技术，它们的作用分别是什么？</h4><p>(1) <code>vue.js</code>：vue-cli工程的核心，主要特点是 双向数据绑定 和 组件系统。<br>(2) <code>vue-route</code>r：vue官方推荐使用的路由框架。<br>(3) <code>vuex</code>：专为 Vue.js 应用项目开发的状态管理器，主要用于维护vue组件间共用的一些 变量 和 方法。<br>(4) <code>axios</code>（ 或者 fetch 、ajax ）：用于发起 GET 、或 POST 等 http请求，基于 Promise 设计。<br>(5) <code>vux</code>等：一个专为vue设计的移动端UI组件库。<br>(6) 创建一个emit.js文件，用于vue事件机制的管理。<br>(7) <code>webpack</code>：模块加载和vue-cli工程打包器。</p><h4 id="2、vue-cli-工程常用的-npm-命令有哪些？"><a href="#2、vue-cli-工程常用的-npm-命令有哪些？" class="headerlink" title="2、vue-cli 工程常用的 npm 命令有哪些？"></a>2、vue-cli 工程常用的 npm 命令有哪些？</h4><p>下载 node_modules 资源包的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>启动 vue-cli 开发环境的 npm命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>vue-cli 生成 生产环境部署资源 的 npm命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>用于查看 vue-cli 生产环境部署资源文件大小的 npm命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build --report</span><br></pre></td></tr></table></figure><h4 id="3、请说出vue-cli工程中每个文件夹和文件的用处"><a href="#3、请说出vue-cli工程中每个文件夹和文件的用处" class="headerlink" title="3、请说出vue-cli工程中每个文件夹和文件的用处"></a>3、请说出vue-cli工程中每个文件夹和文件的用处</h4><p>vue-cli目录解析：<br>(1) <code>build </code>文件夹：用于存放 webpack 相关配置和脚本。开发中仅 偶尔使用 到此文件夹下<br>webpack.base.conf.js 用于配置 less、sass等css预编译库，或者配置一下 UI 库。<br>(2) <code>config </code>文件夹：主要存放配置文件，用于区分开发环境、线上环境的不同。 常用到此文件夹下<br>config.js 配置开发环境的 端口号、是否开启热加载 或者 设置生产环境的静态资源相对路径、是否开启<br>gzip压缩、npm run build 命令打包生成静态资源的名称和路径等。<br>(3) <code>dist </code>文件夹：默认 npm run build 命令打包生成的静态资源文件，用于生产部署。<br>(4) <code>node_modules</code>：存放npm命令下载的开发环境和生产环境的依赖包。<br>(5) <code>src</code>: 存放项目源码及需要引用的资源文件。<br>(6) src下<code>assets</code>：存放项目中需要用到的资源文件，css、js、images等。<br>(7) src下<code>componets</code>：存放vue开发中一些公共组件：header.vue、footer.vue等。<br>(8) src下<code>emit</code>：自己配置的vue集中式事件管理机制。<br>(9) src下<code>router：vue</code>-router vue路由的配置文件。<br>(10) src下<code>service</code>：自己配置的vue请求后台接口方法。<br>(11) src下<code>page</code>：存在vue页面组件的文件夹。<br>(12) src下<code>util</code>：存放vue开发过程中一些公共的.js方法。<br>(13) src下<code>vuex</code>：存放 vuex 为vue专门开发的状态管理器。<br>(14) src下<code>app.vue</code>：使用标签 <code>&lt;route-view&gt;</code>  <code>&lt;/router-view&gt; </code>渲染整个工程的.vue组件。<br>(15) src下<code>main.js</code>：vue-cli工程的入口文件。<br>(16) <code>index.html</code>：设置项目的一些meta头信息和提供 <code>&lt;div id=&quot;app&quot;&gt;</code> <code>&lt;/div&gt;</code> 用于挂载 vue 节点。<br>(17) <code>package.json</code>：用于 node_modules资源部 和 启动、打包项目的 npm 命令管理。</p><h4 id="4、config文件夹-下-index-js-的对于工程-开发环境-和-生产环境-的配置"><a href="#4、config文件夹-下-index-js-的对于工程-开发环境-和-生产环境-的配置" class="headerlink" title="4、config文件夹 下 index.js 的对于工程 开发环境 和 生产环境 的配置"></a>4、config文件夹 下 index.js 的对于工程 开发环境 和 生产环境 的配置</h4><p>(1) <code>index</code>：配置打包后入口.html文件的名称以及文件夹名称<br>(2) <code>assetsRoot</code>：配置打包后生成的文件名称和路径<br>(3) <code>assetsPublicPath</code>：配置 打包后 .html 引用静态资源的路径，一般要设置成 “./“<br>(4) <code>productionGzip</code>：是否开发 gzip 压缩，以提升加载速度</p><h5 id="dev-对象下对于开发环境的配置："><a href="#dev-对象下对于开发环境的配置：" class="headerlink" title="dev 对象下对于开发环境的配置："></a>dev 对象下对于开发环境的配置：</h5><p>(1) <code>port</code>：设置端口号<br>(2) <code>autoOpenBrowser</code>：启动工程时，自动打开浏览器<br>(3) <code>proxyTable</code>：vue设置的代理，用以解决 跨域 问题</p><h4 id="5、详细介绍一些-package-json-里面的配置"><a href="#5、详细介绍一些-package-json-里面的配置" class="headerlink" title="5、详细介绍一些 package.json 里面的配置"></a>5、详细介绍一些 package.json 里面的配置</h4><p>常用对象解析：<br>(1) <code>scripts</code>：npm run xxx 命令调用node执行的 .js 文件<br>(2) <code>dependencies</code>：生产环境依赖包的名称和版本号，即这些 依赖包 都会打包进 生产环境的JS文件里面<br>(3) <code>devDependencies</code>：开发环境依赖包的名称和版本号，即这些 依赖包 只用于 代码开发 的时候，不<br>会打包进 生产环境js文件 里面。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;vue-cli工程&quot;&gt;&lt;a href=&quot;#vue-cli工程&quot; class=&quot;headerlink&quot; title=&quot;vue-cli工程&quot;&gt;&lt;/a&gt;vue-cli工程&lt;/h3&gt;&lt;h4 id=&quot;1、构建的-vue-cli-工程都到了哪些技术，它们的作用分别是什么？&quot;&gt;</summary>
      
    
    
    
    <category term="框架学习" scheme="http://example.com/categories/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Vue" scheme="http://example.com/categories/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/Vue/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
    <category term="Vue Cli" scheme="http://example.com/tags/Vue-Cli/"/>
    
  </entry>
  
  <entry>
    <title>Vue基础知识总结-核心知识点</title>
    <link href="http://example.com/2021/05/01/VueBasis-Core/"/>
    <id>http://example.com/2021/05/01/VueBasis-Core/</id>
    <published>2021-05-01T01:13:11.000Z</published>
    <updated>2021-05-07T07:58:30.945Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、对于Vue是一套渐进式框架的理解"><a href="#1、对于Vue是一套渐进式框架的理解" class="headerlink" title="1、对于Vue是一套渐进式框架的理解"></a>1、对于Vue是一套渐进式框架的理解</h4><p>渐进式代表的含义是：没有多做职责之外的事，vue.js只提供了vue-cli生态中最核心的组件系统和双向<br>数据绑定，就好像 vuex、vue-router都属于围绕vue.js开发的库。<br>示例：</p><h5 id="使用Angular，必须接受以下东西："><a href="#使用Angular，必须接受以下东西：" class="headerlink" title="使用Angular，必须接受以下东西："></a>使用Angular，必须接受以下东西：</h5><p>1）必须使用它的模块机制。<br>2）必须使用它的依赖注入。<br>3）必须使用它的特殊形式定义组件（这一点每个视图框架都有，这是难以避免的）<br>所以Angular是带有比较强的排它性的，如果你的应用不是从头开始，而是要不断考虑是否跟其他东西<br>集成，这些主张会带来一些困扰。</p><h5 id="使用React，你必须理解："><a href="#使用React，你必须理解：" class="headerlink" title="使用React，你必须理解："></a>使用React，你必须理解：</h5><p>1）函数式编程的理念。<br>2）需要知道它的副作用。<br>3）什么是纯函数。<br>4）如何隔离、避免副作用。<br>5）它的侵入性看似没有Angular那么强，主要因为它是属于软性侵入的。</p><h5 id="Vue与React、Angular的不同是，但它是渐进的："><a href="#Vue与React、Angular的不同是，但它是渐进的：" class="headerlink" title="Vue与React、Angular的不同是，但它是渐进的："></a>Vue与React、Angular的不同是，但它是渐进的：</h5><p>1）可以在原有的大系统的上面，把一两个组件改用它实现，就是当成jQuery来使用。<br>2）可以整个用它全家桶开发，当Angular来使用。<br>3）可以用它的视图，搭配你自己设计的整个下层使用。<br>4）可以在底层数据逻辑的地方用OO和设计模式的那套理念。<br>5）可以函数式，它只是个轻量视图而已，只做了最核心的东西。</p><h4 id="2、vue-js的两个核心是什么？"><a href="#2、vue-js的两个核心是什么？" class="headerlink" title="2、vue.js的两个核心是什么？"></a>2、vue.js的两个核心是什么？</h4><p>数据驱动和组件系统：<br><strong>数据驱动</strong>：ViewModel，保证数据和视图的一致性。<br><strong>组件系统</strong>：应用类UI可以看作全部是由组件树构成的。</p><h4 id="3、-v-if-和-v-show-有什么区别"><a href="#3、-v-if-和-v-show-有什么区别" class="headerlink" title="3、 v-if 和 v-show 有什么区别"></a>3、 v-if 和 v-show 有什么区别</h4><p><strong>相同点</strong>：<br>两者都是在判断DOM节点是否要显示。<br><strong>不同点</strong>：<br>(1) 实现方式： v-if是根据后面数据的真假值判断直接从Dom树上删除或重建元素节点。 v-show只是在<br>修改元素的css样式，也就是display的属性值，元素始终在Dom树上。<br>(2) 编译过程：v-if切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子<br>组件； v-show只是简单的基于css切换；<br>(3) 编译条件：v-if是惰性的，如果初始条件为假，则什么也不做；只有在条件第一次变为真时才开始局<br>部编译； v-show是在任何条件下（首次条件是否为真）都被编译，然后被缓存，而且DOM元素始终被<br>保留；<br>(4) 性能消耗：v-if有更高的切换消耗，不适合做频繁的切换； v-show有更高的初始渲染消耗，适合做频<br>繁的额切换；</p><h4 id="4、vue常用的修饰符"><a href="#4、vue常用的修饰符" class="headerlink" title="4、vue常用的修饰符"></a>4、vue常用的修饰符</h4><h5 id="a、按键修饰符"><a href="#a、按键修饰符" class="headerlink" title="a、按键修饰符"></a>a、按键修饰符</h5><p>如：.delete（捕获“删除”和”退格“键） 用法上和事件修饰符一样，挂载在v-on:后面，<br>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="class"><span class="keyword">class</span></span>=<span class="string">&#x27;aaa&#x27;</span> v-model=<span class="string">&quot;inputValue&quot;</span> @keyup.delete=<span class="string">&quot;onKey&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h5 id="b、系统修饰符"><a href="#b、系统修饰符" class="headerlink" title="b、系统修饰符"></a>b、系统修饰符</h5><p>可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器<br>(1) .ctrl<br>(2) .alt<br>(3) .shift<br>(4) .meta</p><h5 id="c、鼠标按钮修饰符"><a href="#c、鼠标按钮修饰符" class="headerlink" title="c、鼠标按钮修饰符"></a>c、鼠标按钮修饰符</h5><p>(1) .left<br>(2) .right<br>(3) .middle<br>这些修饰符会限制处理函数仅响应特定的鼠标按钮。<br>如： 鼠标滚轮单击触发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click.middle =<span class="string">&quot;onClick&quot;</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Click默认是鼠标左键单击</p></blockquote><h5 id="d、其他修饰符"><a href="#d、其他修饰符" class="headerlink" title="d、其他修饰符"></a>d、其他修饰符</h5><p>(1) .lazy<br>在默认情况下， v-model 在每次 input 事件触发后将输入框的值与数据进行同步 ，我们可以添<br>加 lazy 修饰符，从而转变为使用 change 事件进行同步：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model.lazy=<span class="string">&quot;msg&quot;</span> &gt;</span><br></pre></td></tr></table></figure><p>(2) .number<br>如果想自动将用户的输入值转为数值类型，可以给 v-model 添加 .number 修饰符：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model.number=<span class="string">&quot;age&quot;</span> type=<span class="string">&quot;number&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>这通常很有用，因为即使在 type=”number” 时，HTML 输入元素的值也总会返回字符串。如果这个值<br>无法被 parseFloat() 解析，则会返回原始的值。<br>(3) .trim<br>如果要自动过滤用户输入的首尾空白字符，可以给 v-model 添加 trim 修饰符：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model.trim=<span class="string">&quot;msg&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>同样前面都有空格加上.trim后 将前后空格都去掉了。</p><h4 id="5、v-on可以监听多个方法"><a href="#5、v-on可以监听多个方法" class="headerlink" title="5、v-on可以监听多个方法"></a>5、v-on可以监听多个方法</h4><p>v-on可以监听多个方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- v-on在vue2.x中测试,以下两种均可--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on</span>=<span class="string">&quot;&#123;mouseenter: onEnter,mouseleave: onLeave&#125;&quot;</span>&gt;</span>鼠标进来1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">mouseenter</span>=<span class="string">&quot;onEnter&quot;</span> @<span class="attr">mouseleave</span>=<span class="string">&quot;onLeave&quot;</span>&gt;</span>鼠标进来2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 一个事件绑定多个函数，按顺序执行，这里分隔函数可以用逗号也可以用分号--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;a(),b()&quot;</span>&gt;</span>点我ab<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;one()&quot;</span>&gt;</span>点我onetwothree<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6、vue中-key-值的作用"><a href="#6、vue中-key-值的作用" class="headerlink" title="6、vue中 key 值的作用"></a>6、vue中 key 值的作用</h4><p>使用key来给每个节点做一个<strong>唯一标识</strong><br>key的作用主要是为了高效的更新虚拟DOM。另外vue中在使用相同标签名元素的过渡切换时，也会使<br>用到key属性，其目的也是为了让vue可以区分它们，否则vue只会替换其内部属性而不会触发过渡效<br>果。</p><h4 id="7、vue-cli工程升级vue版本"><a href="#7、vue-cli工程升级vue版本" class="headerlink" title="7、vue-cli工程升级vue版本"></a>7、vue-cli工程升级vue版本</h4><p>npm install -g @vue/cli</p><h4 id="8、vue事件中如何使用event对象？"><a href="#8、vue事件中如何使用event对象？" class="headerlink" title="8、vue事件中如何使用event对象？"></a>8、vue事件中如何使用event对象？</h4><blockquote><p>注意在事件中要使用 $ 符号</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html部分</span></span><br><span class="line">&lt;a href=<span class="string">&quot;javascript:void(0);&quot;</span> data-id=<span class="string">&quot;12&quot;</span> @click=<span class="string">&quot;showEvent($event)&quot;</span>&gt;event&lt;/a&gt;</span><br><span class="line"><span class="comment">//js部分</span></span><br><span class="line"><span class="function"><span class="title">showEvent</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="comment">//获取自定义data-id</span></span><br><span class="line"><span class="built_in">console</span>.log(event.target.dataset.id)</span><br><span class="line"><span class="comment">//阻止事件冒泡</span></span><br><span class="line">event.stopPropagation();</span><br><span class="line"><span class="comment">//阻止默认</span></span><br><span class="line">event.preventDefault()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、-nextTick的使用"><a href="#9、-nextTick的使用" class="headerlink" title="9、$nextTick的使用"></a>9、$nextTick的使用</h4><blockquote><p>参数： {Function} [callback]</p></blockquote><p><strong>用法</strong>：将回调延迟到下次DOM更新循环之后执行。在修改数据之后立即使用它，然后等待DOM更新。<br>它跟全局方法 Vue.nextTick 一样，不同的是回调的 this 自动绑定到调用它的实例上。</p><p><strong>理解</strong>：<strong>nextTick()，是将回调函数延迟在下一次dom更新数据后调用</strong>，简单的理解是：<strong>当数据更新了，在dom中渲染后，自动执行该函数，</strong></p><p>实例：</p><p>未使用this.$nextTick()</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">ref</span>=<span class="string">&quot;msgp&quot;</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change&quot;</span>&gt;</span>$nextTick<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">name: <span class="string">&#x27;nextTick&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">msg: <span class="string">&#x27;未更新&#x27;</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line"><span class="javascript"><span class="function"><span class="title">change</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 修改数据</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.msg = <span class="string">&#x27;被更新了&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// DOM还没有更新</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.msgp.innerHTML)</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// DOM更新了</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&#x27;$nextTick:&#x27;</span> + <span class="built_in">this</span>.$refs.msgp.innerHTML)</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="javascript"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用this.$nextTick()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;    </span><br><span class="line">    testClick:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;      </span><br><span class="line">        <span class="keyword">let</span> that=<span class="built_in">this</span>;      </span><br><span class="line">        that.testMsg=<span class="string">&quot;修改后的值&quot;</span>;      </span><br><span class="line">        that.$nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;        </span><br><span class="line">            <span class="built_in">console</span>.log(that.$refs.aa.innerText);  /</span><br><span class="line">            /输出：修改后的值      </span><br><span class="line">        &#125;);    </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：Vue 实现响应式并不是数据发生变化之后 DOM 立即变化，而是按一定的策略进行 DOM 的更新。<code>$nextTick</code> 是在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后使用 <code>$nextTick</code>，则可以在回调中获取更新后的 DOM。</p></blockquote><h5 id="nextTick-的应用场景"><a href="#nextTick-的应用场景" class="headerlink" title="$nextTick() 的应用场景:"></a>$nextTick() 的应用场景:</h5><p>在vue的生命周期 <strong>created() 钩子函数中进行 dom 操作</strong>，一定要放在 <code>$nextTick()</code> 函数中执行。在created() 钩子函数执行的时候 DOM 其实并未进行任何渲染，而此时进行 DOM 操作无异于徒劳，所以此处一定要将 DOM 操作的代码放进 nextTick() 的回调函数中。</p><p><strong>mounted() 钩子函数</strong>，因为该钩子函数执行时，所有的 DOM 挂载和 渲染都已完成，此时在该钩子函数中进行任何 DOM 操作都不会有问题，</p><p>在<strong>数据变化后要执行某个操作</strong>，而这个操作需要随数据改变而改变DOM结构时，这个操作都是需要放置<code>$nextTick()</code> 的回调函数中。</p><h4 id="10、Vue-组件中-data-为什么必须是函数"><a href="#10、Vue-组件中-data-为什么必须是函数" class="headerlink" title="10、Vue 组件中 data 为什么必须是函数"></a>10、Vue 组件中 data 为什么必须是函数</h4><p>在 new Vue() 中， data 是可以作为一个对象进行操作的，然而在 component 中， data 只能以函数的形式存在，不能直接将对象赋值给它。</p><p>当data选项是一个函数的时候，每个实例可以维护一份被返回对象的独立的拷贝，这样各个实例中的<br>data不会相互影响，是独立的。</p><h4 id="11、v-for-与-v-if-的优先级"><a href="#11、v-for-与-v-if-的优先级" class="headerlink" title="11、v-for 与 v-if 的优先级"></a>11、v-for 与 v-if 的优先级</h4><p>当它们处于同一节点，v-for的优先级比v-if更高，这意味着 v-if将分别重复运行于每个 v-for循环中。当你想为仅有的一些项渲染节点时，这种优先级的机制会十分有用，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-<span class="keyword">for</span>=<span class="string">&quot;todo in todos&quot;</span> v-<span class="keyword">if</span>=<span class="string">&quot;!todo.isComplete&quot;</span>&gt;</span><br><span class="line">    &#123;&#123; todo &#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure><p>上面的代码只传递了未完成的 todos。</p><p>而如果你的目的是有条件地跳过循环的执行，那么可以将 v-if 置于外层元素 (或 <code>&lt;template&gt;</code> )上。如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul v-<span class="keyword">if</span>=<span class="string">&quot;!todo.isComplete&quot;</span>&gt;</span><br><span class="line">    &lt;li v-<span class="keyword">for</span>=<span class="string">&quot;todo in todos&quot;</span>&gt;</span><br><span class="line">        &#123;&#123; todo &#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;p v-<span class="keyword">else</span>&gt;No todos left!&lt;/p&gt;</span><br></pre></td></tr></table></figure><h4 id="12、vue中子组件调用父组件的方法"><a href="#12、vue中子组件调用父组件的方法" class="headerlink" title="12、vue中子组件调用父组件的方法"></a>12、vue中子组件调用父组件的方法</h4><h5 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h5><p>直接在子组件中通过this.$parent.event来调用父组件的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line">&lt;template&gt;    </span><br><span class="line">&lt;div&gt;        </span><br><span class="line">    &lt;child&gt;&lt;/child&gt;    </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">&#x27;~/components/dam/child&#x27;</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;    </span><br><span class="line">        components: &#123;        </span><br><span class="line">            child            </span><br><span class="line">        &#125;,    </span><br><span class="line">        methods: &#123;        </span><br><span class="line">            <span class="function"><span class="title">fatherMethod</span>(<span class="params"></span>)</span> &#123;            </span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;测试&#x27;</span>);            </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;childMethod()&quot;</span>&gt;点击&lt;/button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;&lt;/</span>template&gt;&lt;script&gt;<span class="keyword">export</span> <span class="keyword">default</span> &#123;    </span><br><span class="line">        methods: &#123;</span><br><span class="line">            <span class="function"><span class="title">childMethod</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.$parent.fatherMethod();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h5><p>在子组件里用 $emit 向父组件触发一个事件，父组件监听这个事件就行了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line">&lt;template&gt;    </span><br><span class="line">&lt;div&gt;        </span><br><span class="line">    &lt;child @fatherMethod=<span class="string">&quot;fatherMethod&quot;</span>&gt;&lt;/child&gt;    </span><br><span class="line">    &lt;<span class="regexp">/div&gt;&lt;/</span>template&gt;&lt;script&gt;<span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">&#x27;~/components/dam/child&#x27;</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;    </span><br><span class="line">        components: &#123;        </span><br><span class="line">            child            </span><br><span class="line">        &#125;,    </span><br><span class="line">        methods: &#123;        </span><br><span class="line">            <span class="function"><span class="title">fatherMethod</span>(<span class="params"></span>)</span> &#123;            </span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;测试&#x27;</span>);            </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;childMethod()&quot;</span>&gt;点击&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;    </span><br><span class="line">        methods: &#123;</span><br><span class="line">            <span class="function"><span class="title">childMethod</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.$emit(<span class="string">&#x27;fatherMethod&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="第三种方法"><a href="#第三种方法" class="headerlink" title="第三种方法"></a>第三种方法</h5><p>父组件把方法传入子组件中，在子组件里直接调用这个方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line">&lt;template&gt;    </span><br><span class="line">&lt;div&gt;        </span><br><span class="line">    &lt;child :fatherMethod=<span class="string">&quot;fatherMethod&quot;</span>&gt;&lt;/child&gt;    </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">&#x27;~/components/dam/child&#x27;</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;    </span><br><span class="line">        components: &#123;        </span><br><span class="line">            child            </span><br><span class="line">        &#125;,    </span><br><span class="line">        methods: &#123;        </span><br><span class="line">            <span class="function"><span class="title">fatherMethod</span>(<span class="params"></span>)</span> &#123;           </span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;测试&#x27;</span>);            </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;childMethod()&quot;</span>&gt;点击&lt;/button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;&lt;/</span>template&gt;&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;    </span><br><span class="line">        props: &#123;</span><br><span class="line">            fatherMethod: &#123;</span><br><span class="line">                type: <span class="built_in">Function</span>,</span><br><span class="line">                <span class="keyword">default</span>: <span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,    </span><br><span class="line">        methods: &#123;</span><br><span class="line">            <span class="function"><span class="title">childMethod</span>(<span class="params"></span>)</span> &#123;            </span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">this</span>.fatherMethod)&#123;                </span><br><span class="line">                    <span class="built_in">this</span>.fatherMethod();            </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="13、vue中-keep-alive-组件的作用"><a href="#13、vue中-keep-alive-组件的作用" class="headerlink" title="13、vue中 keep-alive 组件的作用"></a>13、vue中 keep-alive 组件的作用</h4><p><strong>作用</strong>：用于保留组件状态或避免重新渲染（缓存的作用）<br><strong>例子</strong>：当一个目录页面与一个详情页面，用户<strong>经常</strong>：打开目录页面**=&gt;<strong>进入详情页面</strong>=&gt;<strong>返回目录页面</strong>=&gt;**打开详情页面，这样目录页面就是一个使用频率很高的页面，那么就可以对目录组件使用 <code>&lt;keep-alive&gt;&lt;/keep-alive&gt; </code>进行缓存，这样用户每次返回目录时，都能从缓存中快速渲染，而不用重新渲染。</p><h4 id="14、vue中如何编写可复用的组件？"><a href="#14、vue中如何编写可复用的组件？" class="headerlink" title="14、vue中如何编写可复用的组件？"></a>14、vue中如何编写可复用的组件？</h4><p><strong>组件定义</strong>：是一个具有一定功能，且不同组件间功能相对独立的模块。高内聚、低耦合。</p><p>开发可复用性的组件应遵循以下<strong>原则</strong>：</p><p>1）规范化命名：组件的命名应该跟业务无关，而是依据组件的功能命名。<br>2）数据扁平化：定义组件接口时，尽量不要将整个对象作为一个 prop 传进来。每个 prop 应该是一个简单类型的数据。这样做有下列几点好处：<br>    (1) 组件接口清晰。<br>    (2) props 校验方便。<br>    (3) 当服务端返回的对象中的 key 名称与组件接口不一样时，不需要重新构造一个对象。扁平化的          props 能让我们更直观地理解组件的接口。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 反例 --&gt;</span><br><span class="line">&lt;card :item=<span class="string">&quot;&#123; title: item.name, description: item.desc, poster: item.img &#125;&gt;</span></span><br><span class="line"><span class="string">&lt;/card&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 正例 --&gt;</span><br><span class="line">&lt;card:title=<span class="string">&quot;item.name&quot;</span>:description=<span class="string">&quot;item.desc&quot;</span>:poster=<span class="string">&quot;item.img&quot;</span>&gt;</span><br><span class="line">&lt;/card&gt;</span><br></pre></td></tr></table></figure><p>3）可复用组件只实现 UI 相关的功能，即展示、交互、动画，如何获取数据跟它无关，因此不要在组件<br>内部去获取数据。<br>4）可复用组件应尽量减少对外部条件的依赖，所有与 vuex 相关的操作都不应在可复用组件中出现。<br>5）组件在功能独立的前提下应该尽量简单，越简单的组件可复用性越强。<br>6）组件应具有一定的容错性。<br>7）组件应当避免对其父组件的依赖，不要通过 this.parent 来操作父组件的示例。父组件也不要通过<br>this.children 来引用子组件的示例，而是通过子组件的接口与之交互。<br>8）可复用组件除了定义一个清晰的公开接口外，还需要有命名空间。命名空间可以避免与浏览器保留标签和其他组件的冲突。特别是当项目引用外部 UI 组件或组件迁移到其他项目时，命名空间可以避免很多命名冲突的问题。</p><h4 id="15、什么是vue生命周期？"><a href="#15、什么是vue生命周期？" class="headerlink" title="15、什么是vue生命周期？"></a>15、什么是vue生命周期？</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>vue生命周期是指vue实例对象从创建之初到销毁的过程，vue所有功能的实现都是围绕其生命周期进行<br>的，在生命周期的不同阶段调用对应的钩子函数实现组件数据管理和DOM渲染两大重要功能。</p><p><img src="/images/VueBasis-Core/11370083-f279314aef6741db.jpg" alt="img"></p><h5 id="八个阶段"><a href="#八个阶段" class="headerlink" title="八个阶段:"></a>八个阶段:</h5><blockquote><p>1）创建前(beforeCreate)<br>对应的钩子函数为beforeCreate。此阶段为实例初始化之后，此时的数据观察和事件机制都未形<br>成，不能获得DOM节点。</p><p>2）创建后（created）<br>对应的钩子函数为created。在这个阶段vue实例已经创建，仍然不能获取DOM元素。</p><p>3，载入前（beforeMount）<br>对应的钩子函数是beforeMount，在这一阶段，我们虽然依然得不到具体的DOM元素，但vue挂<br>载的根节点已经创建，下面vue对DOM的操作将围绕这个根元素继续进行；beforeMount这个阶<br>段是过渡性的，一般一个项目只能用到一两次。</p><p>4，载入后（mounted）<br>对应的钩子函数是mounted。mounted是平时我们使用最多的函数了，一般我们的异步请求都写<br>在这里。在这个阶段，数据和DOM都已被渲染出来。</p><p>5，更新前（beforeUpdate）<br>对应的钩子函数是beforeUpdate。在这一阶段，vue遵循数据驱动DOM的原则。beforeUpdate<br>函数在数据更新后虽然没立即更新数据，但是DOM中的数据会改变，这是Vue双向数据绑定的作用。</p><p>6，更新后（updated）<br>对应的钩子函数是updated。在这一阶段DOM会和更改过的内容同步。</p><p>7，销毁前（beforeDestroy）<br>对应的钩子函数是beforeDestroy。在上一阶段Vue已经成功的通过数据驱动DOM更新，当我们不<br>再需要vue操纵DOM时，就要销毁Vue,也就是清除vue实例与DOM的关联，调用destroy方法可以<br>销毁当前组件。在销毁前，会触发beforeDestroy钩子函数。</p><p>8，销毁后(destroyed)对应的钩子函数是destroyed。<br>在销毁后，会触发destroyed钩子函数。<br>vue生命周期的思想贯穿在组件开发的始终,通过熟悉其生命周期调用不同的钩子函数，我们可<br>以准确的控制数据流和其对DOM的影响；vue生命周期的思想是Vnode和MVVM的生动体现和继承。</p></blockquote><h4 id="16、vue生命周期钩子函数有哪些？"><a href="#16、vue生命周期钩子函数有哪些？" class="headerlink" title="16、vue生命周期钩子函数有哪些？"></a>16、vue生命周期钩子函数有哪些？</h4><p> 1）vue生命周期是vue实例化或者组件创建到消亡的过程。<br> 2）beforeCreate 创建前的状态，初始化事件和生命周期。<br> 3）创建完毕状态Init (初始化) injections (依赖注入) &amp; reactivity (开始响应)。<br> 4）beforeMount 挂载前状态， 是否有元素el，是否有模板，是否渲染到了函数内，是否作为模板进行了outerHTML渲染到了页 面，向虚拟DOM上挂载的过程，并且还是把我们的‘#app’生成虚拟DOM，生成完毕后并渲染到view层。<br> 5）mounted 挂载结束状态，渲染到真正的DOM。<br> 6）beforeUpdate可以拿到Vue实例化改变前的状态。<br> 7）Updated拿到变动完成的状态。<br> 8）beforeDestroy消亡前的状态。<br> 9）destroyed实例化或组件被摧毁消亡。</p><h4 id="17、vue如何监听键盘事件中的按键？"><a href="#17、vue如何监听键盘事件中的按键？" class="headerlink" title="17、vue如何监听键盘事件中的按键？"></a>17、vue如何监听键盘事件中的按键？</h4><p>在Vue中，已经为常用的按键设置了别名，这样我们就无需再去匹配 keyCode ，<strong>直接使用别名</strong>就能监听按键的事件。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;function&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对应表如下：</p><table><thead><tr><th>别名</th><th>实际键值</th></tr></thead><tbody><tr><td>.delete</td><td>delete（删除）/BackSpace（退格）</td></tr><tr><td>.tab</td><td>Tab</td></tr><tr><td>.enter</td><td>Enter（回车）</td></tr><tr><td>esc</td><td>Esc（退出）</td></tr><tr><td>.space</td><td>Space（空格键）</td></tr><tr><td>.left</td><td>Left（左箭头）</td></tr><tr><td>.up</td><td>Up（上箭头）</td></tr><tr><td>.right</td><td>Right（右箭头）</td></tr><tr><td>.down</td><td>Down（下箭头）</td></tr><tr><td>.ctrl</td><td>Ctrl</td></tr><tr><td>.alt</td><td>Alt</td></tr><tr><td>.shift</td><td>Shift</td></tr><tr><td>.meta</td><td>(window系统下是window键，mac下是command键)</td></tr></tbody></table><p>另外，Vue中还支持<strong>组合写法</strong>：</p><table><thead><tr><th>组合写法</th><th>按键组合</th></tr></thead><tbody><tr><td>@keyup.alt.67=”function”</td><td>Alt + C</td></tr><tr><td>@click.ctrl=”function”</td><td>Ctrl + Click</td></tr></tbody></table><p>但是，如果是在自己封装的组件或者是使用一些<strong>第三方的UI库</strong>时，会发现并不起效果，这时就需要用到 .native 修饰符了，如：(使用Element-UI)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-input</span></span></span><br><span class="line"><span class="tag"><span class="attr">v-model</span>=<span class="string">&quot;inputName&quot;</span><span class="attr">placeholder</span>=<span class="string">&quot;搜索你的文件&quot;</span>@<span class="attr">keyup.enter.native</span>=<span class="string">&quot;searchFile(params)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果遇到 .native 修饰符也无效的情况，可能就需要用到 $listeners 了.</p></blockquote><ul><li><h4 id="18、vue更新数组时触发视图更新的方法"><a href="#18、vue更新数组时触发视图更新的方法" class="headerlink" title="18、vue更新数组时触发视图更新的方法"></a>18、vue更新数组时触发视图更新的方法</h4><h5 id="1）Vue-set-响应式新增与修改数据"><a href="#1）Vue-set-响应式新增与修改数据" class="headerlink" title="1）Vue.set 响应式新增与修改数据"></a>1）<strong>Vue.set</strong> 响应式新增与修改数据</h5><p>可以设置对象或数组的值，通过key或数组索引，可以触发视图更新</p><p>​    Vue.set(target,key,value)</p><ul><li><p>参数：</p><ul><li><p>｛object | Array｝ target</p></li><li><p>{ string | number} key</p></li><li><p>｛any｝ value</p></li></ul></li><li><p>返回值：设置的值</p></li><li><p>用法：设置对象的属性，如果对象是响应式的，确保属性被创建后也是响应式的，同时出发视图更新。这个方法主要用于避开Vue不能检测属性被添加的限制。</p><blockquote><p>对象不能是Vue实例，或者Vue实例的根数据对象。</p></blockquote><p>target：要更改的<strong>数据源</strong>(可以是对象或者数组)<br> key：要更改的<strong>具体数据</strong><br> value ：<strong>重新赋的值</strong></p></li></ul><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组修改</span></span><br><span class="line">Vue.set(array, indexOfItem, newValue)<span class="built_in">this</span>.array.$set(indexOfItem, newValue)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象修改</span></span><br><span class="line">Vue.set(obj, keyOfItem, newValue)<span class="built_in">this</span>.obj.$set(keyOfItem, newValue)</span><br></pre></td></tr></table></figure><h5 id="2）Vue-delete（target，key）"><a href="#2）Vue-delete（target，key）" class="headerlink" title="2）Vue.delete（target，key）"></a>2）Vue.delete（target，key）</h5><ul><li><p>删除对象或数组中元素，通过key或数组索引，可以触发视图更新</p></li><li><p><strong>用法：</strong>删除对象的属性。如果对象是响应式的，确保删除能出发更新视图。这个方法主要用于避开Vue不能检测到属性被删除的限制。（至少会用）</p><blockquote><p>对象不能是Vue实例，或者Vue实例的根数据对象。</p></blockquote></li></ul><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组修改</span></span><br><span class="line">Vue.delete(array, indexOfItem)<span class="built_in">this</span>.array.$delete(indexOfItem)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象修改</span></span><br><span class="line">Vue.delete(obj, keyOfItem)<span class="built_in">this</span>.obj.$delete(keyOfItem)</span><br></pre></td></tr></table></figure><h5 id="3）数组对象直接修改属性，可以触发视图更新"><a href="#3）数组对象直接修改属性，可以触发视图更新" class="headerlink" title="3）数组对象直接修改属性，可以触发视图更新"></a>3）数组对象直接修改属性，可以触发视图更新</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.array[<span class="number">0</span>].show = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">this</span>.array.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    item.show = <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="4）splice方法修改数组，可以触发视图更新"><a href="#4）splice方法修改数组，可以触发视图更新" class="headerlink" title="4）splice方法修改数组，可以触发视图更新"></a>4）splice方法修改数组，可以触发视图更新</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.array.splice(indexOfItem, <span class="number">1</span>, newElement)</span><br></pre></td></tr></table></figure><h5 id="5）数组整体修改，可以触发视图更新"><a href="#5）数组整体修改，可以触发视图更新" class="headerlink" title="5）数组整体修改，可以触发视图更新"></a>5）数组整体修改，可以触发视图更新</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tempArray = <span class="built_in">this</span>.array;</span><br><span class="line">tempArray[<span class="number">0</span>].show = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">this</span>.array = tempArray;</span><br></pre></td></tr></table></figure><h5 id="6）用Object-assign或lodash-assign可以为对象添加响应式属性，可以触发视图更新"><a href="#6）用Object-assign或lodash-assign可以为对象添加响应式属性，可以触发视图更新" class="headerlink" title="6）用Object.assign或lodash.assign可以为对象添加响应式属性，可以触发视图更新"></a>6）用Object.assign或lodash.assign可以为对象添加响应式属性，可以触发视图更新</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Object.assign的单层的覆盖前面的属性，不会递归的合并属性</span></span><br><span class="line"><span class="built_in">this</span>.obj = <span class="built_in">Object</span>.assign(&#123;&#125;,<span class="built_in">this</span>.obj,&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>&#125;)</span><br><span class="line"><span class="comment">//assign与Object.assign一样</span></span><br><span class="line"><span class="built_in">this</span>.obj = _.assign(&#123;&#125;,<span class="built_in">this</span>.obj,&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>&#125;)</span><br><span class="line"><span class="comment">//merge会递归的合并属性</span></span><br><span class="line"><span class="built_in">this</span>.obj = _.merge(&#123;&#125;,<span class="built_in">this</span>.obj,&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure><h5 id="7）-Vue包含一组观察数组变异的方法，使用它们改变数组也会触发视图更新"><a href="#7）-Vue包含一组观察数组变异的方法，使用它们改变数组也会触发视图更新" class="headerlink" title="7） Vue包含一组观察数组变异的方法，使用它们改变数组也会触发视图更新"></a>7） Vue包含一组观察数组变异的方法，使用它们改变数组也会触发视图更新</h5><blockquote><ul><li>push() =&gt;向数组的末尾添加一个或多个元素，并返回新的长度。</li><li>pop() =&gt;删除最后一个元素，把数组长度减 1，并且返回它删除的元素的值。</li><li>shift() =&gt;把数组的第一个元素从其中删除，并返回第一个元素的值。</li><li>unshift() =&gt;向数组的开头添加一个或更多元素，并返回新的长度。</li><li>splice() =&gt;向/从数组中添加/删除项目，然后返回被删除的项目。 该方法会改变原始数组。</li><li>sort() =&gt;对数组的元素进行排序。</li><li>reverse() =&gt;颠倒数组中元素的顺序。</li></ul></blockquote><p>不变异的方法:</p><blockquote><ul><li>filter()</li><li>concat()</li><li>slice()<br>他们返回的是一个新数组，使用这些方法时，<strong>可以用新数组来替换原始数组</strong></li></ul></blockquote><h5 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h5><ul><li><p>Vue 在检测到<strong>数组变化时</strong>，并不是直接重新渲染整个列表，而是<strong>最大化复用DOM元素</strong>。替换的数组中，含有<strong>相同元素的项不会被重新渲染</strong>，因此可以大胆的用新数组来替换旧数组，不用担心性能问题。</p></li><li><p>值得注意的是：<br>以下变动的数组中Vue是不能检测到的，也<strong>不会触发视图更新</strong>。<br> 1.通过索引直接设置项， 比如this.books[3]={…}<br> 2.修改数组长度， 比如 this.books.length = 1;</p><blockquote><p>两个问题都可以用splice来解决：<br>第一个问题 还可以用 set方法 this.$set(this.books,3,{…})</p></blockquote></li></ul><h4 id="19、vue中对象更改检测的注意事项"><a href="#19、vue中对象更改检测的注意事项" class="headerlink" title="19、vue中对象更改检测的注意事项"></a>19、vue中对象更改检测的注意事项</h4><p>还是由于 JavaScript 的限制，Vue 不能检测对象属性的添加或删除：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> qs = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        a: <span class="number">1</span></span><br><span class="line">    &#125;&#125;)</span><br><span class="line"><span class="comment">// `qs.a` 现在是响应式的qs.b = 2</span></span><br><span class="line"><span class="comment">// `qs.b` 不是响应式的</span></span><br></pre></td></tr></table></figure><p>对于已经创建的实例，Vue 不允许动态添加根级别的响应式属性。但是，可以使用 Vue.set(object,<br>propertyName, value) 方法向嵌套对象添加响应式属性。例如，对于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> qs = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        userProfile: &#123;</span><br><span class="line">            name: <span class="string">&#x27;Jungle&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>你可以添加一个新的 age 属性到嵌套的 userProfile 对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.set(qs.userProfile, <span class="string">&#x27;age&#x27;</span>, <span class="number">27</span>)</span><br></pre></td></tr></table></figure><p>你还可以使用 vm.$set 实例方法，它只是全局 Vue.set 的别名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qs.$set(qs.userProfile, <span class="string">&#x27;age&#x27;</span>, <span class="number">27</span>)</span><br></pre></td></tr></table></figure><p>有时你可能需要<strong>为已有对象赋值多个新属性</strong>，比如使用 Object.assign() 或 _.extend()。但是，这样添加到对象上的新属性不会触发更新，在这种情况下，你应该用两个对象（原对象和要混合进去的对象）的属性创建一个新的对象。所以，如果你想添加新的响应式属性，这样做：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">qs.userProfile = <span class="built_in">Object</span>.assign(&#123;&#125;, qs.userProfile, &#123;</span><br><span class="line">    age: <span class="number">27</span>,</span><br><span class="line">    favoriteFood: <span class="string">&#x27;Vue huimian&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>拓展：</p><p><strong>Object.assign()</strong> 方法用于将所有可枚举属性的值从一个或多个源对象分配到目标对象。它将返回目标对象。</p><p>const target = { a: 1, b: 2 };<br>const source = { b: 4, c: 5 };</p><p>const returnedTarget = Object.assign(target, source);</p><p>console.log(target);<br>// expected output: Object { a: 1, b: 4, c: 5 }</p><p>console.log(returnedTarget);<br>// expected output: Object { a: 1, b: 4, c: 5 }</p></blockquote><h4 id="20、解决非工程化项目初始化页面闪动问题"><a href="#20、解决非工程化项目初始化页面闪动问题" class="headerlink" title="20、解决非工程化项目初始化页面闪动问题"></a>20、解决非工程化项目初始化页面闪动问题</h4><p>vue页面在加载的时候闪烁花括号{}，v-cloak指令和css规则如[v-cloak]{display:none}一起用时，这个指令可以隐藏未编译的Mustache(前端模板引擎)标签直到实例准备完毕。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[v-cloak] &#123;</span><br><span class="line">display: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">&lt;!--html代码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in tabs&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;data.text&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="21、v-for产生的列表，实现active的切换"><a href="#21、v-for产生的列表，实现active的切换" class="headerlink" title="21、v-for产生的列表，实现active的切换"></a>21、v-for产生的列表，实现active的切换</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(desc,tableIndex) in descriptions.firstface&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;controller-checkboxs clearfix&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">click</span>=<span class="string">&quot;currentIndex=index,currentTable=tableIndex&quot;</span>    <span class="attr">class</span>=<span class="string">&quot;controller-checkbox-item&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:class</span>=<span class="string">&quot;&#123;active:index===currentIndex&amp;&amp;tableIndex==currentTable&#125;&quot;</span><span class="attr">v-for</span>=<span class="string">&quot;(ctrlValue,index) in desc.args&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="22、v-model语法糖的组件中的使用"><a href="#22、v-model语法糖的组件中的使用" class="headerlink" title="22、v-model语法糖的组件中的使用"></a>22、v-model语法糖的组件中的使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br><span class="line">此时msg值就与input的值进行双向绑定，实际上上面的代码是下面代码的语法糖。</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">v-on:input</span>=<span class="string">&quot;msg= $event.target.value&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>要理解这行代码，首先你要知道 input 元素本身有个 oninput 事件，这是 HTML5 新增加的，类似<br>onchange ，每当输入框内容发生变化，就会触发 oninput ，把最新的value传递给 msg。从而实现了vmodel。</p><h4 id="23、Vue中自定义过滤器"><a href="#23、Vue中自定义过滤器" class="headerlink" title="23、Vue中自定义过滤器"></a>23、Vue中自定义过滤器</h4><p>过滤器是一个通过输入数据，能够及时对数据进行处理并返回一个数据结果的简单函数。Vue有很多很<br>便利的过滤器，过滤器通常会使用管道标志 “ | ”。使用:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.ctime | dataFormat(&#x27;yyyy-mm-dd&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>自定义全局过滤器</strong><br>虽然VueJs给我们提供了很多强有力的过滤器，但有时候还是不够。值得庆幸的，Vue给我们提供了一个干净简洁的方式来定义我们自己的过滤器，之后我们就可以利用管道 “ | ” 来完成过滤。</p><p>定义一个全局的自定义过滤器，需要使用 Vue.filter() 构造器。这个构造器需要两个参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个全局过滤器</span></span><br><span class="line">Vue.filter(<span class="string">&#x27;dataFormat&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">input, pattern = <span class="string">&#x27;&#x27;</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> dt = <span class="keyword">new</span> <span class="built_in">Date</span>(input);</span><br><span class="line"><span class="comment">// 获取年月日</span></span><br><span class="line"><span class="keyword">var</span> y = dt.getFullYear();</span><br><span class="line"><span class="keyword">var</span> m = (dt.getMonth() + <span class="number">1</span>).toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> d = dt.getDate().toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="comment">// 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span></span><br><span class="line"><span class="comment">// 否则，就返回 年-月-日 时：分：秒</span></span><br><span class="line"><span class="keyword">if</span> (pattern.toLowerCase() === <span class="string">&#x27;yyyy-mm-dd&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span>`</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 获取时分秒</span></span><br><span class="line"><span class="keyword">var</span> hh = dt.getHours().toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> mm = dt.getMinutes().toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ss = dt.getSeconds().toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;hh&#125;</span>:<span class="subst">$&#123;mm&#125;</span>:<span class="subst">$&#123;ss&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>拓展</p><p><strong><code>padStart()</code></strong> 方法用另一个字符串填充当前字符串(如果需要的话，会重复多次)，以便产生的字符串达到给定的长度。从当前字符串的左侧开始填充。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;abc&#x27;</span>.padStart(<span class="number">10</span>);          <span class="comment">//&quot;       abc&quot;</span></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span>.padStart(<span class="number">10</span>, <span class="string">&quot;foo&quot;</span>);  <span class="comment">// &quot;foofoofabc&quot;</span></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span>.padStart(<span class="number">6</span>,<span class="string">&quot;123465&quot;</span>); <span class="comment">// &quot;123abc&quot;</span></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span>.padStart(<span class="number">8</span>, <span class="string">&quot;0&quot;</span>);     <span class="comment">// &quot;00000abc&quot;</span></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span>.padStart(<span class="number">1</span>);          <span class="comment">// &quot;abc&quot;</span></span><br></pre></td></tr></table></figure><p><strong>返回值：</strong>在原字符串开头填充指定的填充字符串直到目标长度所形成的新字符串。</p></blockquote><h4 id="24、vue等单页面应用及其优缺点"><a href="#24、vue等单页面应用及其优缺点" class="headerlink" title="24、vue等单页面应用及其优缺点"></a>24、vue等单页面应用及其优缺点</h4><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><p> 1）用户体验好，快，内容的改变不需要重新加载整个页面，对服务器压力较小。<br> 2）前后端分离，比如vue项目<br> 3）完全的前端组件化，前端开发不再以页面为单位，更多地采用组件化的思想，代码结构和组织方<br>式更加规范化，便于修改 和调整；</p><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><p>1）首次加载页面的时候需要加载大量的静态资源，这个加载时间相对比较长。<br> 2）不利于 SEO优化，单页页面，数据在前端渲染，就意味着没有 SEO。<br> 3）页面导航不可用，如果一定要导航需要自行实现前进、后退。（由于是单页面不能用浏览器的前进<br>后退功能，所以需要自 己建立堆栈管理）</p><h4 id="25、什么是vue的计算属性？"><a href="#25、什么是vue的计算属性？" class="headerlink" title="25、什么是vue的计算属性？"></a>25、什么是vue的计算属性？</h4><p>模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻辑会让模板<br>过重且难以维护。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;翻转字符串</span><br><span class="line">&lt;div id&#x3D;&quot;example&quot;&gt;</span><br><span class="line">    &#123;&#123; message.split(&#39;&#39;).reverse().join(&#39;&#39;) &#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>这里的表达式包含3个操作，并不是很清晰，所以遇到复杂逻辑时应该使用Vue特带的计算属性<br>computed 来进行处理。</p><h4 id="26、vue-cli提供的几种脚手架模板"><a href="#26、vue-cli提供的几种脚手架模板" class="headerlink" title="26、vue-cli提供的几种脚手架模板"></a>26、vue-cli提供的几种脚手架模板</h4><p>vue-cli 的脚手架项目模板有browserify 和 webpack , 官网给出了两个模板： webpack-simple 和<br>webpack 两种。两种的区别在于webpack-simple 没有包括Eslint 检查功能等等功能，普通项目基本用<br>webpack-simple 就足够了.<br><strong>搭建官方项目模板步骤：</strong></p><ul><li><p>1、npm install vue-cli (安装vue-cli ) 有的时候有看到其它两种写法: –save-dev 和 –save的写法。这两个有一定的区别，我们都知道package.json 中有一个 “dependencies” 和 “devDependencies” 的。<br>dependencies 是用在开发完上线模式的，就是有些东西你上线以后还需要依赖的，比如juqery , 我们这里的vue 和 babel-runtime（Babel 转码器 可以将ES6 转为ES5 ）， 而devDependencies 则是在开发模式执行的，比如我们如果需要安装一个node-sass 等等。</p><blockquote><ul><li>有的时候看到package.json中安装的模块版本号前面有一个波浪线。</li></ul><p>例如: ~1.2.3 这里表示安装1.2.x以上版本。但是不安装1.3以上。</p><ul><li>插入符号^ 更宽松。 它匹配的是最新次要版本号，也就是第二个数字。</li></ul><p>比如：^ 1.2.3将匹配任何1.x.x版本，包括1.3.0，但将在2.0.0上停止。</p></blockquote></li><li><p>2、vue init webpack-simple yourdemoname 下载一个webpack-simple项目，这里的webpacksimple 是固定的，也就是官网的项目模板。youdemoname 这个是你自己项目的名字。 执行这个步骤<br>以后。就会弹出询问 “项目名称..项目描述“等等问题 直接按照提示操作。这个时候对应的项目目录下就<br>出现刚刚建立的项目了。</p></li><li><p>3、我们还需要把项目的依赖下载下来。使用命令: cd youdemoname 然后执行npm install 就可以了，<br>这个时候你的项目中有多了一个node_modules 目录</p></li><li><p>4、使用”npm - run - dev” 命令来运行项目 “npm-run-bulid” 来执行发布，会自动生成dist文件</p></li></ul><h4 id="27、vue父组件如何向子组件中传递数据？"><a href="#27、vue父组件如何向子组件中传递数据？" class="headerlink" title="27、vue父组件如何向子组件中传递数据？"></a>27、vue父组件如何向子组件中传递数据？</h4><ul><li><p>子组件在props中创建一个属性，用以接收父组件传过来的值(也可以是对象)</p></li><li><p>父组件中注册子组件，并在<code>&lt;template&gt;</code>中添加child标签，标签中添加message属性并赋值</p></li><li><p>在子组件标签中添加子组件props中创建的属性</p></li><li><p>把需要传给子组件的值赋给该属性</p></li></ul><h4 id="28、计算属性的缓存和方法调用的区别"><a href="#28、计算属性的缓存和方法调用的区别" class="headerlink" title="28、计算属性的缓存和方法调用的区别"></a>28、计算属性的缓存和方法调用的区别</h4><ul><li><p>计算属性必须返回结果</p></li><li><p>计算属性是基于它的依赖缓存的。一个计算属性所依赖的数据发生变化时，它才会重新取值。</p></li><li><p>使用计算属性还是methods取决于是否需要<strong>缓存</strong>，当遍历大数组和做大量计算时，应当使用计算属<br>性，除非你不希望得到缓存。</p></li><li><p>计算属性是根据依赖自动执行的，methods需要事件调用</p></li></ul><h4 id="29、vue-cli中自定义指令的使用"><a href="#29、vue-cli中自定义指令的使用" class="headerlink" title="29、vue-cli中自定义指令的使用"></a>29、vue-cli中自定义指令的使用</h4><ul><li>vue中除了内置的指令（v-show,v-model）还允许我们<strong>自定义指令</strong></li><li>想要创建自定义指令，就要注册指令（以输入框获取焦点为例） 注意：autofocus 在移动版 Safari 上不工作</li></ul><h5 id="一、注册全局指令："><a href="#一、注册全局指令：" class="headerlink" title="一、注册全局指令："></a>一、注册全局指令：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册一个全局自定义指令 `v-focus`</span></span><br><span class="line">Vue.directive(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line"><span class="comment">// 当被绑定的元素插入到 DOM 中时……</span></span><br><span class="line">inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el,binding</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 当前指令绑定的dom元素</span></span><br><span class="line"><span class="comment">//console.log(el);</span></span><br><span class="line"><span class="comment">// 指令传入的参数、修饰符、值 v-指令名称:参数.修饰符=值</span></span><br><span class="line"><span class="comment">// console.log(binding)</span></span><br><span class="line"><span class="comment">// 聚焦元素</span></span><br><span class="line">el.focus()</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="二、注册局部指令：-组件中也接受一个-directives-的选项"><a href="#二、注册局部指令：-组件中也接受一个-directives-的选项" class="headerlink" title="二、注册局部指令： 组件中也接受一个 directives 的选项"></a>二、注册局部指令： 组件中也接受一个 directives 的选项</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">directives: &#123;</span><br><span class="line">focus: &#123;</span><br><span class="line"><span class="comment">// 指令的定义</span></span><br><span class="line">inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">el.focus()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用也很简单：直接在元素上面使用v-focus即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-focus</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="三、举一个自定义指令的小例子：拖拽"><a href="#三、举一个自定义指令的小例子：拖拽" class="headerlink" title="三、举一个自定义指令的小例子：拖拽"></a>三、举一个自定义指令的小例子：<strong>拖拽</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">&#x27;drag&#x27;</span>, &#123;</span><br><span class="line"><span class="comment">// 当指令绑定到元素上的时候执行</span></span><br><span class="line"><span class="function"><span class="title">bind</span>(<span class="params">el, binding</span>)</span> &#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;bind&#x27;);</span></span><br><span class="line"><span class="comment">// 当前指令绑定的dom元素</span></span><br><span class="line"><span class="comment">//console.log(el);</span></span><br><span class="line"><span class="comment">// 指令传入的参数、修饰符、值 v-指令名称:参数.修饰符=值</span></span><br><span class="line"><span class="comment">// console.log(binding)</span></span><br><span class="line">el.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> e = e||event;</span><br><span class="line"><span class="keyword">let</span> disX = e.clientX - el.offsetLeft;</span><br><span class="line"><span class="keyword">let</span> disY = e.clientY - el.offsetTop;</span><br><span class="line">                </span><br><span class="line"><span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> e = e||event;</span><br><span class="line"><span class="keyword">let</span> L = e.clientX - disX;</span><br><span class="line"><span class="keyword">let</span> T = e.clientY - disY;</span><br><span class="line">                    <span class="keyword">if</span> (binding.modifiers.limit) &#123;</span><br><span class="line"><span class="keyword">if</span> (L &lt; <span class="number">0</span>) &#123;</span><br><span class="line">L = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">el.style.left = L + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">el.style.top = T + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line">                </span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用也很简单，只用在元素上添加v-drag或者v-drag.limit</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span> <span class="attr">v-drag.limit</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span> <span class="attr">v-drag</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1、对于Vue是一套渐进式框架的理解&quot;&gt;&lt;a href=&quot;#1、对于Vue是一套渐进式框架的理解&quot; class=&quot;headerlink&quot; title=&quot;1、对于Vue是一套渐进式框架的理解&quot;&gt;&lt;/a&gt;1、对于Vue是一套渐进式框架的理解&lt;/h4&gt;&lt;p&gt;渐进式代表的</summary>
      
    
    
    
    <category term="框架学习" scheme="http://example.com/categories/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Vue" scheme="http://example.com/categories/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/Vue/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue自定义指令</title>
    <link href="http://example.com/2021/04/29/Vue-directive/"/>
    <id>http://example.com/2021/04/29/Vue-directive/</id>
    <published>2021-04-29T04:10:54.000Z</published>
    <updated>2021-05-07T07:52:47.148Z</updated>
    
    <content type="html"><![CDATA[<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li>全局api</li><li>Vue.directive指令</li><li>自定义指令的生命周期</li></ul><h3 id="全局api概述"><a href="#全局api概述" class="headerlink" title="全局api概述"></a>全局api概述</h3><ul><li>全局api并不在构造器里面，而是先声明全局变量或者直接在vue中定义一些新功能，VUE内置了一些全局api,说简单点就是在构造器外面用vue提供给我们的api函数来定义新的功能.</li></ul><h3 id="Vue-directive-指令"><a href="#Vue-directive-指令" class="headerlink" title="Vue.directive 指令"></a>Vue.directive 指令</h3><ul><li><p>学习了内部指令，但是我们想要定义一个v-hello的指令，其作用就是让文字变成绿色.</p></li><li><p>在开始之前先写一个小DEMO，页面上有一个数字是10，数字的下面有一个按钮，每次点击加1</p></li><li><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;initial-scale=1.0,maximum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.0/vue.common.dev.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span> 点击开始加1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            message: 10,</span><br><span class="line"><span class="javascript">            color: <span class="string">&quot;green&quot;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            add: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.message++;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>下面让我们用vue.directive来写一个</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;initial-scale=1.0,maximum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.0/vue.common.dev.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-hello</span>=<span class="string">&quot;color3&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span> 点击开始加1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.directive(<span class="string">&quot;hello&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">el, binding, vnode</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        el.style[<span class="string">&quot;color&quot;</span>] = binding.value;</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            message: 10,</span><br><span class="line"><span class="javascript">            color3: <span class="string">&quot;red&quot;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            add: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.message++;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>这里要说明的就是指令写的是v-hello,但是我们用directive的时候前面不用加v-了，直接输入指令即可<br> 可以看到数字也变成绿色了，说明自定义指令也起作用了。</p></li><li><p>el : 指令所绑定的元素，可以用来直接操作DOM</p></li><li><p>binding: 一个对象，包含指令的很多信息</p></li><li><p>vnode: VUE编译生成的虚拟节点</p></li></ul><h3 id="自定义指令的生命周期"><a href="#自定义指令的生命周期" class="headerlink" title="自定义指令的生命周期"></a>自定义指令的生命周期</h3><p>自定义指令有5个生命周期(也叫作钩子函数)分别是bind ,inserted,update,componentUpdate,unbind</p><ul><li><p>要是想解绑这个vue可以使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unbind</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  app.$destroy()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>bind 只调用一次，指令第一次绑定到元素时候调用，用这个钩子可以定义一个绑定时执行一次的初始化动作。</p></li><li><p>inserted:被绑定的元素插入父节点的时候调用(父节点存在即可调用，不必存在document中)</p></li><li><p>update: 被绑定与元素所在模板更新时调用，而且无论绑定值是否有变化，通过比较更新前后的绑定值，忽略不必要的模板更新</p></li><li><p>componentUpdate :被绑定的元素所在模板完成一次更新更新周期的时候调用</p></li><li><p>unbind: 只调用一次，指令月元素解绑的时候调用</p></li><li><p>见下面代码</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;initial-scale=1.0,maximum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.0/vue.common.dev.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-hello</span>=<span class="string">&quot;color3&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span> 点击开始加1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;jiebang()&quot;</span>&gt;</span>解绑<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">jiebang</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        app.$destroy();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    Vue.directive(<span class="string">&quot;hello&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        bind: <span class="function"><span class="keyword">function</span> (<span class="params">el, bingind, vnode</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            el.style[<span class="string">&quot;color&quot;</span>] = bingind.value;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;1-bind&quot;</span>);</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        inserted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;2-insert&quot;</span>);</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        update: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;3-update&quot;</span>);</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        componentUpdated: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;4 - componentUpdated&#x27;</span>);</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        unbind: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;5 - unbind&#x27;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            message: 10,</span><br><span class="line"><span class="javascript">            color3: <span class="string">&quot;red&quot;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            add: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.message++;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>演示图如下：</p><p><a href="https://imgtu.com/i/gF4EKU"><img src="/images/Vue-directive/gF4EKU.gif" alt="gF4EKU.md.gif"></a></p></li></ul><blockquote><p>个人意见：文档的话，说一千道一万，不如来个小Demo来的简洁明了</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;知识点&quot;&gt;&lt;a href=&quot;#知识点&quot; class=&quot;headerlink&quot; title=&quot;知识点&quot;&gt;&lt;/a&gt;知识点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;全局api&lt;/li&gt;
&lt;li&gt;Vue.directive指令&lt;/li&gt;
&lt;li&gt;自定义指令的生命周期&lt;/li&gt;
&lt;/ul</summary>
      
    
    
    
    <category term="框架学习" scheme="http://example.com/categories/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Vue" scheme="http://example.com/categories/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/Vue/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
    <category term="Vue Cli" scheme="http://example.com/tags/Vue-Cli/"/>
    
  </entry>
  
  <entry>
    <title>Git常用上传文件方式</title>
    <link href="http://example.com/2021/04/27/Git-Used/"/>
    <id>http://example.com/2021/04/27/Git-Used/</id>
    <published>2021-04-27T07:31:47.000Z</published>
    <updated>2021-04-27T08:12:35.402Z</updated>
    
    <content type="html"><![CDATA[<h3 id="多种上传方式"><a href="#多种上传方式" class="headerlink" title="多种上传方式"></a>多种上传方式</h3><h4 id="一、使用HTTPS方式上传本地的文件到Github："><a href="#一、使用HTTPS方式上传本地的文件到Github：" class="headerlink" title="一、使用HTTPS方式上传本地的文件到Github："></a>一、使用HTTPS方式上传本地的文件到Github：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化本地仓库</span></span><br><span class="line">git init</span><br><span class="line"><span class="comment"># 创建文件/文档</span></span><br><span class="line">mkdir 文件名  / touch 文档名</span><br><span class="line"><span class="comment"># 克隆远程仓库</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/user/仓库名.git</span><br><span class="line"><span class="comment"># 添加文件到暂存区（.代表全部，或者all）</span></span><br><span class="line">git add . </span><br><span class="line"><span class="comment"># 提交文件到工作区  -m 合并</span></span><br><span class="line">git commit –m <span class="string">&#x27;对文件/提交的说明 &#x27;</span></span><br><span class="line"><span class="comment"># 把文件推送到远程仓库</span></span><br><span class="line">git push -u origin master</span><br><span class="line"><span class="comment"># origin -&gt; 远程仓库的名字，</span></span><br><span class="line"><span class="comment"># origin/master -&gt; 远程仓库的master分支。</span></span><br><span class="line"><span class="comment"># git push origin master  就是将本地的master分支</span></span><br><span class="line"><span class="comment"># -&gt;push到远程仓库的与之有追踪关系的分支（通常名字相同）</span></span><br><span class="line"><span class="comment"># -u 用户进程的最大数量</span></span><br></pre></td></tr></table></figure><h4 id="二、使用SSH方式上传本地的文件到Github："><a href="#二、使用SSH方式上传本地的文件到Github：" class="headerlink" title="二、使用SSH方式上传本地的文件到Github："></a>二、使用SSH方式上传本地的文件到Github：</h4><p><strong>（1）查看/配置密钥</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看是否已经存在本地公钥</span></span><br><span class="line">cat ~/.ssh/id_rsa.pub</span><br><span class="line"><span class="comment"># 没有--&gt; 执行生成本地公钥</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;XXXXX@qq.com&quot;</span></span><br><span class="line"><span class="comment"># 这个指令会要求你提供一个 位置和文件名 去存放键值对和密码，可以一直点击 Enter键去     使用默认值。</span></span><br><span class="line"><span class="comment"># 提示1：最好的情况是一个密码对应一个ssh key，但也不是非得这样去做，就像上面我们跳过   创建密码这个步骤。</span></span><br><span class="line"><span class="comment"># 提示2：设置的密码不能被修改，也不可以被获取。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时你按照上述路径 C:/Users/Admin/.ssh，找到该文件夹</span></span><br><span class="line"><span class="comment"># 使用记事本打开 id_rsa.pub 文件，直接选中所有内容复制即可。</span></span><br><span class="line"><span class="comment"># 也可以根据操作系统的不同，选择不同的指令。</span></span><br><span class="line"><span class="comment"># windows clip &lt; ~/.ssh/id_rsa.pub</span></span><br><span class="line"><span class="comment"># mac pbcopy &lt; ~/.ssh/id_rsa.pub</span></span><br><span class="line"><span class="comment"># 执行命令后，此时公钥已经复制到了粘贴板上。</span></span><br></pre></td></tr></table></figure><p><strong>(2)上传到Github仓库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化本地仓库</span></span><br><span class="line">git init</span><br><span class="line"><span class="comment"># 创建文件/文档</span></span><br><span class="line">mkdir 文件名  / touch 文档名</span><br><span class="line"><span class="comment"># 添加远程仓库</span></span><br><span class="line">git remote add origin git@github.com:defnngj/hello-world.git  </span><br><span class="line"><span class="comment"># 添加文件到暂存区</span></span><br><span class="line">git add 文件</span><br><span class="line"><span class="comment"># 提交文件到工作区</span></span><br><span class="line">git commit –m <span class="string">&#x27;对文件/提交的说明&#x27;</span></span><br><span class="line"><span class="comment"># 把文件推送到远程仓库</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p><strong>(3) 如果你的HTTPS方法需要每次输入密码，那么可以转成SSH传输</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改git的remote url</span></span><br><span class="line"><span class="comment"># 使用命令 git remote -v 查看你当前的 remote url</span></span><br><span class="line">git remote -v</span><br><span class="line">origin https://github.com/someaccount/someproject.git (fetch)</span><br><span class="line">origin https://github.com/someaccount/someproject.git (push)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制此ssh链接，然后使用命令 git remote set-url 来调整你的url。</span></span><br><span class="line">git remote set-url origin git@github.com:someaccount/someproject.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后你可以再用命令 git remote -v 查看一下，url是否已经变成了ssh地址。</span></span><br><span class="line"><span class="comment"># 然后你就可以愉快的使用git fetch, git pull , git push，再也不用输入烦人的密码了</span></span><br></pre></td></tr></table></figure><h3 id="git上传过程中出现的错误和方法"><a href="#git上传过程中出现的错误和方法" class="headerlink" title="git上传过程中出现的错误和方法"></a>git上传过程中出现的错误和方法</h3><h4 id="1-Github是不传输大文件的-gt-nbsp-否则报错error-failedto-push-som-refs-to-…"><a href="#1-Github是不传输大文件的-gt-nbsp-否则报错error-failedto-push-som-refs-to-…" class="headerlink" title="(1)Github是不传输大文件的==&gt;&nbsp; 否则报错error:failedto push som refs to …"></a>(1)Github是不传输大文件的==&gt;&nbsp; 否则报错<code>error:failedto push som refs to …</code></h4><blockquote><p>git push 时，存在大文件会报错，即使删除大文件后，还会报错。主要是因为大文件存在没有被提交的commit记录里面。</p></blockquote><p>(2)[Git撤销&amp;回滚操作(git reset 和 get revert)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先把远程服务器github上面的文件拉下来</span></span><br><span class="line">git pullorigin master </span><br><span class="line">git pushorigin master</span><br><span class="line"><span class="comment"># 如果出现报错 fatal:Couldn&#x27;t find remote ref master</span></span><br><span class="line"><span class="comment"># 或者fatal: &#x27;origin&#x27; doesnot appear to be a git repository</span></span><br><span class="line"><span class="comment"># 以及fatal: Could notread from remote repository.</span></span><br><span class="line"><span class="comment"># 则需要重新输入</span></span><br><span class="line">git remote add origin git@github.com:defnngj/hello-world.git  </span><br></pre></td></tr></table></figure><h3 id="一张图解决Git操作"><a href="#一张图解决Git操作" class="headerlink" title="一张图解决Git操作"></a>一张图解决Git操作</h3><p><img src="/images/Git-Used/20210125190841921.png" alt="在这里插入图片描述"></p><p>如有错误，敬请及时指正~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;多种上传方式&quot;&gt;&lt;a href=&quot;#多种上传方式&quot; class=&quot;headerlink&quot; title=&quot;多种上传方式&quot;&gt;&lt;/a&gt;多种上传方式&lt;/h3&gt;&lt;h4 id=&quot;一、使用HTTPS方式上传本地的文件到Github：&quot;&gt;&lt;a href=&quot;#一、使用HTTPS方式</summary>
      
    
    
    
    <category term="Git" scheme="http://example.com/categories/Git/"/>
    
    
    <category term="Git" scheme="http://example.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>把书念下去，然后走出去！</title>
    <link href="http://example.com/2021/04/24/Perception-02/"/>
    <id>http://example.com/2021/04/24/Perception-02/</id>
    <published>2021-04-24T14:10:47.000Z</published>
    <updated>2021-04-24T14:49:10.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id="把书念下去，然后走出去！"><a href="#把书念下去，然后走出去！" class="headerlink" title="把书念下去，然后走出去！"></a>把书念下去，然后走出去！</h1><h2 id="寥寥数字，却是半生总结。"><a href="#寥寥数字，却是半生总结。" class="headerlink" title="寥寥数字，却是半生总结。"></a>寥寥数字，却是半生总结。</h2><p>&nbsp; &nbsp; &nbsp; “我走了很远的路，吃了很多的苦，才将这份博士学位论文送到你的面前。二十二载求学路，一路风雨泥泞，许多不容易。如梦一场，仿佛昨天一家人才团聚过。”</p><p>&nbsp; &nbsp; &nbsp; 上述文字来自于一篇博士论文的《致谢》部分（如下图所示）。这篇情感真挚的《致谢》近日在豆瓣、知乎、微博等多个网络平台走红，作者在文中回顾自己如何一路走出小山坳、和命运抗争的故事打动了大批网友。</p><p>&nbsp; &nbsp; &nbsp; 《致谢》结尾，他写道：“理想不伟大，只愿年过半百，归来仍是少年，希望还有机会重新认识这个世界，不辜负这一生吃过的苦。最后如果还能做出点让别人生活更美好的事，那这辈子就赚了。”</p><p>&nbsp; &nbsp; &nbsp; 我看过也听过太多读书路上的故事，每次都能让自己在一个“状态”里警醒。</p><p>&nbsp; &nbsp;&nbsp;  曾经面前堆砌着一摞摞的书本，老师在讲台上讲课，我手里拿着笔，眼睛里看着窗外，脑子里想着想不通的未来。``</p><blockquote><p> 现在觉得，那时看不清的前路才是最好的前进方向。</p></blockquote><br/><p>&nbsp; &nbsp; &nbsp; 我爸爸常教导我不要和别人的生活作比，其实我是又陷入了看不到路不知道怎么前进的局面中，就想看别人是怎么生活的，且反复焦虑。这样的阶段每个人都会有，很正常，我们要做的不是烦恼，而是想不通的时候就放下，<strong>把目光聚焦在当下，做自己喜欢的事情，学习新的知识，走在成长的路上</strong>。<br>&nbsp; &nbsp; &nbsp; 我的好朋友在这段时间里身心疲惫，这可能是她迈入了社会的第一个小坡儿（她在我心里一直很优秀，所以之前的乱七八糟的事情我都觉得对她不算坎儿），我俩时常鼓劲儿的加油二字，多少都带着点无奈，真想在你爬坡儿路上给你递杯水。总之，<strong>身体健康</strong>，是我对你最优先的祝福。</p><hr/><p>&nbsp; &nbsp; &nbsp; 看完这篇论文的致谢，我突然就悟了，我从来没有期待自己有多出众，我是一个普通人，<strong>普通人有自己世界里不普通的生活</strong>，我庆幸自己现在舒适的学习和生活环境，起码维护了我脆弱的自尊心，我没有勇气像黄国平博士一样抗着生活的压力求学，我之后的路怎么走，我想，就是凭借“信念”，在有限的时间里，描绘自己的人生吧！</p><p><img src="/images/Perception-02/a.jpg" alt="a"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;把书念下去，然后走出去！&quot;&gt;&lt;a href=&quot;#把书念下去，然后走出去！&quot; class=&quot;headerlink&quot; title=&quot;把书念下去，然后走出去！&quot;&gt;&lt;/a&gt;把书念下去，然后走出去！&lt;/h1&gt;&lt;h2 id=&quot;寥寥数字，却是半生总结。&quot;&gt;&lt;a href=&quot;#寥</summary>
      
    
    
    
    <category term="随笔感悟" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94%E6%84%9F%E6%82%9F/"/>
    
    
    <category term="Perception" scheme="http://example.com/tags/Perception/"/>
    
  </entry>
  
  <entry>
    <title>输入URL到页面加载过程</title>
    <link href="http://example.com/2021/04/17/URL-To-Page/"/>
    <id>http://example.com/2021/04/17/URL-To-Page/</id>
    <published>2021-04-17T10:58:22.000Z</published>
    <updated>2021-04-17T11:42:07.622Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从输入-URL-到页面加载完成，发生了什么？"><a href="#从输入-URL-到页面加载完成，发生了什么？" class="headerlink" title="从输入 URL 到页面加载完成，发生了什么？"></a>从输入 URL 到页面加载完成，发生了什么？</h2><p>这是一个简单的经典的过程：</p><ul><li><p>1️⃣首先我们需要通过 DNS（域名解析系统）将 URL 解析为对应的 IP 地址，</p></li><li><p>2️⃣然后与这个 IP 地址确定的那台服务器建立起 TCP 网络连接，</p></li><li><p>3️⃣随后我们向服务端抛出我们的 HTTP 请求，服务端处理完我们的请求之后，</p></li><li><p>4️⃣把目标数据放在 HTTP 响应里返回给客户端，</p></li><li><p>5️⃣拿到响应数据的浏览器就可以开始走一个渲染的流程。渲染完毕，页面便呈现给了用户，并时刻等待响应用户的操作</p><p>（如下图所示）</p></li></ul><p><img src="/images/URL-To-Page/1.png" alt="img"></p><h3 id="我们将这个过程切分为如下的过程片段："><a href="#我们将这个过程切分为如下的过程片段：" class="headerlink" title="我们将这个过程切分为如下的过程片段："></a>我们将这个过程切分为如下的过程片段：</h3><h4 id="一、基础版"><a href="#一、基础版" class="headerlink" title="一、基础版"></a>一、基础版</h4><ol><li>浏览器根据请求的<code>URL</code>交给<code>DNS</code>域名解析，找到真实<code>IP</code>，向服务器发起请求；</li><li>服务器交给后台处理完成后返回数据，浏览器接收文件（<code>HTML、JS、CSS</code>、图象等）；</li><li>浏览器对加载到的资源（<code>HTML、JS、CSS</code>等）进行语法解析，建立相应的内部数据结构（如<code>HTML</code>的<code>DOM</code>）；</li><li>载入解析到的资源文件，渲染页面，完成。</li></ol><h3 id="二、详细版"><a href="#二、详细版" class="headerlink" title="二、详细版"></a>二、详细版</h3><ol><li><p>在浏览器地址栏<strong>输入URL</strong></p></li><li><p>浏览器查看<strong>缓存</strong>，如果请求资源在缓存中并且<strong>新鲜</strong>，跳转到转码步骤</p><ol><li><p>如果资源未缓存，发起新请求</p></li><li><p>如果已缓存，检验是否足够新鲜，足够新鲜直接提供给客户端，否则与服务器进行验证。</p></li><li><p>检验新鲜通常有两个HTTP头进行控制<code>Expires</code>和<code>Cache-Control</code>：</p><ul><li>HTTP1.0提供Expires，值为一个绝对时间表示缓存新鲜日期</li><li>HTTP1.1增加了Cache-Control: max-age=,值为以秒为单位的最大新鲜时间</li></ul></li></ol></li><li><p>浏览器<strong>解析URL</strong>获取协议，主机，端口，path</p></li><li><p>浏览器<strong>组装一个HTTP（GET）请求报文</strong></p></li><li><p>浏览器<strong>获取主机ip地址</strong>，过程如下：</p><ol><li><p>浏览器缓存</p></li><li><p>本机缓存</p></li><li><p>hosts文件</p></li><li><p>路由器缓存</p></li><li><p>ISP DNS缓存</p></li><li><p>DNS递归查询（可能存在负载均衡导致每次IP不一样）</p></li></ol></li><li><p><strong>打开一个socket与目标IP地址，端口建立TCP链接</strong>，三次握手如下：</p><ol><li>客户端发送一个TCP的<strong>SYN=1，Seq=X</strong>的包到服务器端</li><li>服务器发回<strong>SYN=1， ACK=X+1， Seq=Y</strong>的响应包</li><li>客户端发送<strong>ACK=Y+1， Seq=Z</strong></li></ol></li><li><p>TCP链接建立后<strong>发送HTTP请求</strong></p></li><li><p>服务器接受请求并解析，将请求转发到服务程序，如虚拟主机使用HTTP Host头部判断请求的服务程序</p></li><li><p>服务器检查<strong>HTTP请求头是否包含缓存验证信息</strong>如果验证缓存新鲜，返回<strong>304</strong>等对应状态码</p></li><li><p>处理程序读取完整请求并准备HTTP响应，可能需要查询数据库等操作</p></li><li><p>服务器将<strong>响应报文通过TCP连接发送回浏览器</strong></p></li><li><p>浏览器接收HTTP响应，然后根据情况选择<strong>关闭TCP连接或者保留重用，关闭TCP连接的四次握手如下</strong>：</p><ol><li><p>主动方发送<strong>Fin=1， Ack=Z， Seq= X</strong>报文</p></li><li><p>被动方发送<strong>ACK=X+1， Seq=Z</strong>报文</p></li><li><p>被动方发送<strong>Fin=1， ACK=X， Seq=Y</strong>报文</p></li><li><p>主动方发送<strong>ACK=Y， Seq=X</strong>报文</p></li></ol></li><li><p>浏览器检查响应<strong>状态码</strong>：是否为1XX，3XX， 4XX， 5XX，这些情况处理与2XX不同</p></li><li><p>如果资源可缓存，<strong>进行缓存</strong></p></li><li><p>对响应进行<strong>解码</strong>（例如gzip压缩）</p></li><li><p>根据资源类型决定如何处理（假设资源为HTML文档）</p></li><li><p><strong>解析HTML文档，构件DOM树，下载资源，构造CSSOM树，执行js脚本</strong>，这些操作没有严格的先后顺序，以下分别解释</p></li><li><p><strong>构建DOM树：</strong></p><ol><li><strong>Tokenizing</strong>：根据HTML规范将字符流解析为标记</li><li><strong>Lexing</strong>：词法分析将标记转换为对象并定义属性和规则</li><li><strong>DOM construction</strong>：根据HTML标记关系将对象组成DOM树</li></ol></li><li><p>解析过程中遇到图片、样式表、js文件，<strong>启动下载</strong></p></li><li><p><strong>构建CSSOM树：</strong></p><ol><li><strong>Tokenizing</strong>：字符流转换为标记流</li><li><strong>Node</strong>：根据标记创建节点</li><li><strong>CSSOM</strong>：节点创建CSSOM树</li></ol></li><li><p><strong>根据DOM树和CSSOM树构建渲染树 :</strong></p><ol><li>从DOM树的根节点遍历所有<strong>可见节点</strong>，不可见节点包括：1）<code>script</code>,<code>meta</code>这样本身不可见的标签。2)被css隐藏的节点，如<code>display: none</code></li><li>对每一个可见节点，找到恰当的CSSOM规则并应用</li><li>发布可视节点的内容和计算样式</li></ol></li><li><p><strong>js解析如下：</strong></p><ol><li>浏览器创建Document对象并解析HTML，将解析到的元素和文本节点添加到文档中，此时<strong>document.readystate为loading</strong></li><li>HTML解析器遇到<strong>没有async和defer的script时</strong>，将他们添加到文档中，然后执行行内或外部脚本。这些脚本会同步执行，并且在脚本下载和执行时解析器会暂停。这样就可以用document.write()把文本插入到输入流中。<strong>同步脚本经常简单定义函数和注册事件处理程序，他们可以遍历和操作script和他们之前的文档内容</strong></li><li>当解析器遇到设置了<strong>async</strong>属性的script时，开始下载脚本并继续解析文档。脚本会在它<strong>下载完成后尽快执行</strong>，但是<strong>解析器不会停下来等它下载</strong>。异步脚本**禁止使用document.write()**，它们可以访问自己script和之前的文档元素</li><li>当文档完成解析，document.readState变成interactive</li><li>所有<strong>defer</strong>脚本会<strong>按照在文档出现的顺序执行</strong>，延迟脚本<strong>能访问完整文档树</strong>，禁止使用document.write()</li><li>浏览器<strong>在Document对象上触发DOMContentLoaded事件</strong></li><li>此时文档完全解析完成，浏览器可能还在等待如图片等内容加载，等这些<strong>内容完成载入并且所有异步脚本完成载入和执行</strong>，document.readState变为complete，window触发load事件</li></ol></li><li><p><strong>显示页面</strong>（HTML解析过程中会逐步显示页面）</p></li></ol><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><blockquote><p>在展开性能优化这个话题的时候，此时这个问题就非常的重要，因为后续的性能优化内容都必须以这个问题的答案为骨架展开</p></blockquote><p>而所谓的<strong>性能优化</strong>，其实就是针对这五个过程进行分解，逐个击破，逐个优化。</p><p>我们整个的知识图谱，用思维导图展示如下：</p><p><img src="/images/URL-To-Page/2.png" alt="img"></p><h3 id="比较简洁且常用的优化方式如下："><a href="#比较简洁且常用的优化方式如下：" class="headerlink" title="比较简洁且常用的优化方式如下："></a>比较简洁且常用的优化方式如下：</h3><ul><li><code>content</code>方面<ul><li><strong>减少<code>HTTP</code>请求：合并文件、<code>CSS</code>精灵</strong>、<code>inline Image</code></li><li><strong>减少<code>DNS</code>查询：</strong><code>DNS</code>缓存、将资源分布到恰当数量的主机名</li><li><strong>减少<code>DOM</code>元素数量</strong></li></ul></li><li><code>Server</code>方面<ul><li><strong>使用<code>CDN</code></strong></li><li>配置<code>ETag</code></li><li><strong>对组件使用<code>Gzip</code>压缩</strong></li></ul></li><li><code>Cookie</code>方面<ul><li>减小<code>cookie</code>大小</li></ul></li><li><code>css</code>方面<ul><li><strong>将样式表放到页面顶部</strong></li><li><strong>不使用<code>CSS</code>表达式</strong></li><li><strong>使用<code>&lt;link&gt;</code>不使用<code>@import</code></strong></li></ul></li><li><code>Javascript</code>方面<ul><li><strong>将脚本放到页面底部</strong></li><li><strong>将<code>javascript</code>和<code>css</code>从外部引入</strong></li><li><strong>压缩<code>javascript</code>和<code>css</code></strong></li><li>删除不需要的脚本</li><li><strong>减少<code>DOM</code>访问</strong></li></ul></li><li>图片方面<ul><li>优化图片：根据实际颜色需要选择色深、压缩</li><li><strong>优化<code>css</code>精灵</strong></li><li>不要在<code>HTML</code>中拉伸图片</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;从输入-URL-到页面加载完成，发生了什么？&quot;&gt;&lt;a href=&quot;#从输入-URL-到页面加载完成，发生了什么？&quot; class=&quot;headerlink&quot; title=&quot;从输入 URL 到页面加载完成，发生了什么？&quot;&gt;&lt;/a&gt;从输入 URL 到页面加载完成，发生了什</summary>
      
    
    
    
    <category term="FE-Interview" scheme="http://example.com/categories/FE-Interview/"/>
    
    
    <category term="URL" scheme="http://example.com/tags/URL/"/>
    
  </entry>
  
  <entry>
    <title>宏任务&amp;微任务</title>
    <link href="http://example.com/2021/04/12/FE-Interview01/"/>
    <id>http://example.com/2021/04/12/FE-Interview01/</id>
    <published>2021-04-12T08:12:09.000Z</published>
    <updated>2021-04-12T08:31:01.243Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是宏任务"><a href="#什么是宏任务" class="headerlink" title="什么是宏任务"></a>什么是宏任务</h3><ul><li>我们可以将每次执行栈执行的代码当做是一个宏任务（包括每次从事件队列中获取一个事件回调并放到执行栈中执行）</li><li>每一个宏任务会从头到尾执行完毕，不会执行其他。</li></ul><blockquote><p>我们知道 JS引擎线程和 GUI渲染线程是互斥的关系，浏览器为了能够使 宏任务和 DOM任务有序的进行，会在一个 宏任务执行结果后，在下一个 宏任务执行前， GUI渲染线程开始工作，对页面进行渲染。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 宏任务--&gt;渲染--&gt;宏任务--&gt;宏任务--&gt;渲染．．</span></span><br></pre></td></tr></table></figure><blockquote><p>主代码块，<code>setTimeout</code>，<code>setInterval</code>等，都属于宏任务</p></blockquote><p><strong>第一个例子：</strong></p><p>我们可以将这段代码放到浏览器的控制台执行以下，看一下效果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.style = <span class="string">&#x27;background:black&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.body.style = <span class="string">&#x27;background:red&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.body.style = <span class="string">&#x27;background:blue&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.body.style = <span class="string">&#x27;background:grey&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="/images/FE-Interview01/5.gif" alt="img"></p><blockquote><p>我们会看到的结果是，页面背景会在瞬间变成白色，以上代码属于同一次 宏任务，所以全部执行完才触发 页面渲染，渲染时 GUI线程会将所有UI改动优化合并，所以视觉效果上，只会看到页面变成灰色</p></blockquote><p><strong>第二个例子：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.style = <span class="string">&#x27;background:blue&#x27;</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">document</span>.body.style = <span class="string">&#x27;background:black&#x27;</span>;</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/FE-Interview01/7.gif" alt="img"></p><blockquote><p>我会看到，页面先显示成蓝色背景，然后瞬间变成了黑色背景，这是因为以上代码属于两次 宏任务，第一次 宏任务执行的代码是将背景变成蓝色，然后触发渲染，将页面变成蓝色，再触发第二次宏任务将背景变成黑色</p></blockquote><h3 id="什么是微任务"><a href="#什么是微任务" class="headerlink" title="什么是微任务"></a>什么是微任务</h3><ul><li>我们已经知道 宏任务结束后，会执行渲染，然后执行下一个 宏任务，</li><li>而微任务可以理解成在当前 宏任务执行后立即执行的任务。</li><li>也就是说，<strong>当 宏任务执行完，会在渲染前，将执行期间所产生的所有 微任务都执行完</strong>。</li></ul><blockquote><p><code>Promise</code>，<code>process.nextTick</code>等，属于 微任务。</p></blockquote><p><strong>第一个例子：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.style = <span class="string">&#x27;background:blue&#x27;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">        <span class="built_in">document</span>.body.style = <span class="string">&#x27;background:black&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>执行后看效果：</p><p><img src="/images/FE-Interview01/9.gif" alt="img"></p><ul><li>控制台输出 1 3 2 , 是因为 promise 对象的 then 方法的回调函数是异步执行，所以 2 最后输出</li><li>页面的背景色直接变成黑色，没有经过蓝色的阶段，是因为，我们在宏任务中将背景设置为蓝色，但在进行渲染前执行了微任务，在微任务中将背景变成了黑色，然后才执行的渲染</li></ul><p><strong>第二个例子：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">Promise</span>.resolve(<span class="number">3</span>).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="comment">//1 3 2</span></span><br></pre></td></tr></table></figure><p>执行结果如下：</p><p><img src="/images/FE-Interview01/image-20210412162949126.png" alt="image-20210412162949126"></p><blockquote><p>上面代码共包含两个 <code>setTimeout</code> ，也就是说除主代码块外，共有两个 宏任务， 其中第一个 宏任务执行中，输出 1 ，并且创建了 微任务队列，所以在下一个 宏任务队列执行前，先执行 微任务，在 微任务执行中，输出 3 ，微任务执行后，执行下一次 宏任务，执行中输出 2</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>执行一个 宏任务（栈中没有就从 事件队列中获取）</li><li>执行过程中如果遇到 微任务，就将它添加到 微任务的任务队列中</li><li>宏任务执行完毕后，立即执行当前 微任务队列中的所有 微任务（依次执行）</li><li>当前 宏任务执行完毕，开始检查渲染，然后 GUI线程接管渲染</li><li>渲染完毕后， JS线程继续接管，开始下一个 宏任务（从事件队列中获取）</li></ul><p><img src="/images/FE-Interview01/image-20210412162902064.png" alt="image-20210412162902064"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;什么是宏任务&quot;&gt;&lt;a href=&quot;#什么是宏任务&quot; class=&quot;headerlink&quot; title=&quot;什么是宏任务&quot;&gt;&lt;/a&gt;什么是宏任务&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;我们可以将每次执行栈执行的代码当做是一个宏任务（包括每次从事件队列中获取一个事件回调并放到执行栈</summary>
      
    
    
    
    <category term="FE-Interview" scheme="http://example.com/categories/FE-Interview/"/>
    
    
    <category term="FE-Interview" scheme="http://example.com/tags/FE-Interview/"/>
    
    <category term="宏任务" scheme="http://example.com/tags/%E5%AE%8F%E4%BB%BB%E5%8A%A1/"/>
    
    <category term="微任务" scheme="http://example.com/tags/%E5%BE%AE%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Vue-MVVM浅析</title>
    <link href="http://example.com/2021/04/09/Vue-MVVM/"/>
    <id>http://example.com/2021/04/09/Vue-MVVM/</id>
    <published>2021-04-09T12:49:34.000Z</published>
    <updated>2021-04-29T04:17:47.989Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/Vue-MVVM/89.png" alt="img"></p><h2 id="vue-实现-todo-list"><a href="#vue-实现-todo-list" class="headerlink" title="vue 实现 todo-list"></a>vue 实现 todo-list</h2><p><img src="/images/Vue-MVVM/91.png" alt="img"></p><h2 id="一、对-MVVM-的理解"><a href="#一、对-MVVM-的理解" class="headerlink" title="一、对 MVVM 的理解"></a>一、对 MVVM 的理解</h2><h3 id="1-1-MVC"><a href="#1-1-MVC" class="headerlink" title="1.1 MVC"></a>1.1 MVC</h3><ul><li><code>M - Model</code> 数据</li><li><code>V - View</code> 视图、界面</li><li><code>C - Controller</code> 控制器、逻辑处理</li></ul><p><img src="/images/Vue-MVVM/92.png" alt="img"></p><p><img src="/images/Vue-MVVM/93.png" alt="img"></p><h3 id="1-2-MVVM"><a href="#1-2-MVVM" class="headerlink" title="1.2 MVVM"></a>1.2 MVVM</h3><ul><li><code>Model</code> - 模型、数据</li><li><code>View</code> - 视图、模板（视图和模型是分离的）</li><li><code>ViewModel</code> - 连接 <code>Model</code> 和 <code>View</code></li></ul><p><img src="/images/Vue-MVVM/94.png" alt="img"></p><h3 id="1-3-关于-ViewModel"><a href="#1-3-关于-ViewModel" class="headerlink" title="1.3 关于 ViewModel"></a>1.3 关于 ViewModel</h3><ul><li><code>MVVM</code> 不算是一种创新</li><li>但其中的 <code>ViewModel</code> 确实一种创新</li><li>真正结合前端场景应用的创建</li></ul><p><img src="/images/Vue-MVVM/95.png" alt="img"></p><p><img src="/images/Vue-MVVM/96.png" alt="img"></p><h3 id="1-4-MVVM-框架的三大要素"><a href="#1-4-MVVM-框架的三大要素" class="headerlink" title="1.4 MVVM 框架的三大要素"></a>1.4 MVVM 框架的三大要素</h3><ul><li>响应式：<code>vue</code>如何监听到 <code>data</code> 的每个属性变化？</li><li>模板引擎：<code>vue</code> 的模板如何被解析，指令如何处理？</li><li>渲染：<code>vue</code> 的模板如何被渲染成 <code>html</code> ？以及渲染过程</li></ul><h2 id="二、vue-中如何实现响应式"><a href="#二、vue-中如何实现响应式" class="headerlink" title="二、vue 中如何实现响应式"></a>二、vue 中如何实现响应式</h2><h3 id="2-1-什么是响应式"><a href="#2-1-什么是响应式" class="headerlink" title="2.1 什么是响应式"></a>2.1 什么是响应式</h3><ul><li>修改 data 属性之后，vue 立刻监听到</li><li>data 属性被代理到 vm 上</li></ul><p><img src="/images/Vue-MVVM/97.png" alt="img"></p><h3 id="2-2-Object-defineProperty"><a href="#2-2-Object-defineProperty" class="headerlink" title="2.2 Object.defineProperty"></a>2.2 Object.defineProperty</h3><p><img src="/images/Vue-MVVM/98.png" alt="img"></p><h3 id="2-3-模拟实现"><a href="#2-3-模拟实现" class="headerlink" title="2.3 模拟实现"></a>2.3 模拟实现</h3><p><img src="/images/Vue-MVVM/99.png" alt="img"></p><p><img src="/images/Vue-MVVM/100.png" alt="img"></p><h2 id="三、vue-中如何解析模板"><a href="#三、vue-中如何解析模板" class="headerlink" title="三、vue 中如何解析模板"></a>三、vue 中如何解析模板</h2><h3 id="3-1-模板是什么"><a href="#3-1-模板是什么" class="headerlink" title="3.1 模板是什么"></a>3.1 模板是什么</h3><ul><li>本质：字符串</li><li>有逻辑，如 <code>v-if</code> <code>v-for</code> 等</li><li>与 <code>html</code> 格式很像，但有很大区别</li><li>最终还要转换为 <code>html</code> 来显示</li></ul><blockquote><p> <strong>模板最终必须转换成 JS 代码，因为</strong></p></blockquote><ul><li>有逻辑（<code>v-if</code> <code>v-for</code>），必须用 <code>JS</code>才能实现</li><li>转换为 <code>html</code> 渲染页面，必须用 <code>JS</code> 才能实现</li><li>因此，模板最重要转换成一个 <code>JS</code> 函数（<code>render</code> 函数）</li></ul><p><img src="/images/Vue-MVVM/101.png" alt="img"></p><h3 id="3-2-render-函数"><a href="#3-2-render-函数" class="headerlink" title="3.2 render 函数"></a>3.2 render 函数</h3><ul><li>模板中所有信息都包含在了 <code>render</code> 函数中</li><li><code>this</code> 即<code>vm</code></li><li><code>price</code> 即 <code>this.price</code> 即 <code>vm.price</code>，即 <code>data</code> 中的 <code>price</code></li><li><code>_c</code> 即 <code>this._c</code> 即 <code>vm._c</code></li></ul><p><img src="/images/Vue-MVVM/102.png" alt="img"></p><p><img src="/images/Vue-MVVM/103.png" alt="img"></p><p><img src="/images/Vue-MVVM/104.png" alt="img"></p><h3 id="3-3-render-函数与-vdom"><a href="#3-3-render-函数与-vdom" class="headerlink" title="3.3 render 函数与 vdom"></a>3.3 render 函数与 vdom</h3><ul><li><code>vm._c</code> 其实就相当于 <code>snabbdom</code>中的 <code>h</code> 函数</li><li><code>render</code> 函数执行之后，返回的是 <code>vnode</code></li></ul><p><img src="/images/Vue-MVVM/105.png" alt="img"></p><p><img src="/images/Vue-MVVM/106.png" alt="img"></p><ul><li><code>updateComponent</code>中实现了 <code>vdom</code> 的 <code>patch</code></li><li>页面首次渲染执行 <code>updateComponent</code></li><li><code>data</code> 中每次修改属性，执行<code>updateComponent</code></li></ul><h2 id="四、vue-的整个实现流程"><a href="#四、vue-的整个实现流程" class="headerlink" title="四、vue 的整个实现流程"></a>四、vue 的整个实现流程</h2><ul><li>第一步：解析模板成 render 函数</li><li>第二步：响应式开始监听</li><li>第三步：首次渲染，显示页面，且绑定依赖</li><li>第四步：<code>data</code> 属性变化，触发 <code>rerender</code></li></ul><p><img src="/images/Vue-MVVM/107.png" alt="img"></p><h3 id="4-1-第一步：解析模板成-render-函数"><a href="#4-1-第一步：解析模板成-render-函数" class="headerlink" title="4.1 第一步：解析模板成 render 函数"></a>4.1 第一步：解析模板成 render 函数</h3><p><img src="/images/Vue-MVVM/108.png" alt="img"></p><p><img src="/images/Vue-MVVM/109.png" alt="img"></p><p><img src="/images/Vue-MVVM/110.png" alt="img"></p><p><img src="/images/Vue-MVVM/111.png" alt="img"></p><ul><li>模板中的所有信息都被 <code>render</code>函数包含</li><li>模板中用到的 <code>data</code> 中的属性，都变成了 <code>JS</code> 变量</li><li>模板中的<code>v-model</code> <code>v-for</code> <code>v-on</code> 都变成了 <code>JS</code> 逻辑</li><li><code>render</code> 函数返回 <code>vnode</code></li></ul><h3 id="4-2-第二步：响应式开始监听"><a href="#4-2-第二步：响应式开始监听" class="headerlink" title="4.2 第二步：响应式开始监听"></a>4.2 第二步：响应式开始监听</h3><ul><li><code>Object.defineProperty</code></li><li>将 <code>data</code> 的属性代理到 <code>vm</code>上</li></ul><p><img src="/images/Vue-MVVM/112.png" alt="img"></p><h3 id="4-3-第三步：首次渲染，显示页面，且绑定依赖"><a href="#4-3-第三步：首次渲染，显示页面，且绑定依赖" class="headerlink" title="4.3 第三步：首次渲染，显示页面，且绑定依赖"></a>4.3 第三步：首次渲染，显示页面，且绑定依赖</h3><ul><li>初次渲染，执行 <code>updateComponent</code>，执行 <code>vm._render()</code></li><li>执行 <code>render</code> 函数，会访问到 <code>vm.list vm.title</code></li><li>会被响应式的 <code>get</code> 方法监听到</li><li>执行 <code>updateComponent</code> ，会走到 <code>vdom</code> 的 <code>patch</code> 方法</li><li><code>patch</code> 将 <code>vnode</code>渲染成 <code>DOM</code> ，初次渲染完成</li></ul><p><img src="/images/Vue-MVVM/113.png" alt="img"></p><p><img src="/images/Vue-MVVM/114.png" alt="img"></p><blockquote><p> <strong>为何要监听 get ，直接监听 set 不行吗？</strong></p></blockquote><ul><li><code>data</code> 中有很多属性，有些被用到，有些可能不被用到</li><li>被用到的会走到 <code>get</code> ，不被用到的不会走到 <code>get</code></li><li>未走到 <code>get</code> 中的属性，<code>set</code>的时候我们也无需关心</li><li>避免不必要的重复渲染</li></ul><p><img src="/images/Vue-MVVM/115.png" alt="img"></p><h3 id="4-4-第四步：data-属性变化"><a href="#4-4-第四步：data-属性变化" class="headerlink" title="4.4 第四步：data 属性变化"></a>4.4 第四步：data 属性变化</h3><p><img src="/images/Vue-MVVM/116.png" alt="img"></p><p><img src="/images/Vue-MVVM/117.png" alt="img"></p><ul><li>修改属性，被响应式的 <code>set</code> 监听到</li><li><code>set</code>中执行 <code>updateComponent</code></li><li>updateComponent 重新执行 <code>vm._render()</code></li><li>生成的 <code>vnode</code> 和 <code>prevVnode</code> ，通过 <code>patch</code>进行对比</li><li>渲染到 <code>html</code> 中</li></ul><p><img src="/images/Vue-MVVM/118.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/Vue-MVVM/89.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;vue-实现-todo-list&quot;&gt;&lt;a href=&quot;#vue-实现-todo-list&quot; class=&quot;headerlink&quot; title=&quot;vue 实现 </summary>
      
    
    
    
    <category term="框架学习" scheme="http://example.com/categories/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Vue" scheme="http://example.com/categories/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/Vue/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
    <category term="响应式" scheme="http://example.com/tags/%E5%93%8D%E5%BA%94%E5%BC%8F/"/>
    
    <category term="render" scheme="http://example.com/tags/render/"/>
    
    <category term="Vue实现流程" scheme="http://example.com/tags/Vue%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Es6常用API整理</title>
    <link href="http://example.com/2021/04/08/Es6-Review/"/>
    <id>http://example.com/2021/04/08/Es6-Review/</id>
    <published>2021-04-08T12:08:09.000Z</published>
    <updated>2021-04-09T13:23:20.373Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6常用API整理"><a href="#ES6常用API整理" class="headerlink" title="ES6常用API整理"></a>ES6常用API整理</h1><h3 id="ECMAScript-6简介"><a href="#ECMAScript-6简介" class="headerlink" title="ECMAScript 6简介"></a>ECMAScript 6简介</h3><p>ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</p><h3 id="let和const命名"><a href="#let和const命名" class="headerlink" title="let和const命名"></a>let和const命名</h3><h4 id="let基本用法-块级作用域"><a href="#let基本用法-块级作用域" class="headerlink" title="let基本用法-块级作用域"></a>let基本用法-块级作用域</h4><p>在es6中可以使用let声明变量，用法类似于var</p><blockquote><p>⚠️ let声明的变量，只在<code>let</code>命令所在的代码块内有效</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//a is not defined</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">//20</span></span><br></pre></td></tr></table></figure><h4 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h4><p><code>var</code>命令会发生<code>变量提升</code>现象，即变量可以在声明之前使用，值为<code>undefined</code>。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。</p><p>为了纠正这种现象，let命令改变了语法行为，它所声明的变量一定在声明后使用，否则报错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var的情况</span></span><br><span class="line"><span class="built_in">console</span>.log(c);<span class="comment">//输出undefined</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//let的情况</span></span><br><span class="line"><span class="built_in">console</span>.log(c);<span class="comment">// 报错ReferenceError</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="number">30</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="不允许重复声明"><a href="#不允许重复声明" class="headerlink" title="不允许重复声明"></a>不允许重复声明</h4><p><code>let</code>不允许在相同作用域内，重复声明同一个变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> c = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">30</span>;</span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arg; <span class="comment">// 报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h4><p>了解的一个名词，说的就是<code>let</code>和<code>const</code>命令声明变量的特征。</p><p>在代码块内，使用<code>let</code>命令声明变量之前，该变量都是不可用的。这在语法上，称为<code>暂时性死区</code>(temporal dead zone，简称 TDZ)</p><h4 id="为什么需要块级作用域？"><a href="#为什么需要块级作用域？" class="headerlink" title="为什么需要块级作用域？"></a>为什么需要块级作用域？</h4><h5 id="原因一：内层变量可能会覆盖外层变量"><a href="#原因一：内层变量可能会覆盖外层变量" class="headerlink" title="原因一：内层变量可能会覆盖外层变量"></a>原因一：内层变量可能会覆盖外层变量</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span>===<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="string">&#x27;hello 小马哥&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">foo(a);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="原因二：用来计数的循环遍历泄露为全局变量"><a href="#原因二：用来计数的循环遍历泄露为全局变量" class="headerlink" title="原因二：用来计数的循环遍历泄露为全局变量"></a>原因二：用来计数的循环遍历泄露为全局变量</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    arr[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">5</span>]());</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>变量<code>i</code>只用来控制循环，但是循环结束后，它并没有消失，用于变量提升，泄露成了全局变量。</p><p><strong>解决循环计数问题</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解决方式一：使用闭包</span></span><br><span class="line"><span class="keyword">var</span> arr = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    arr[i] = (<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解决方式二：使用let声明i</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="const基本用法-声明只读的常量"><a href="#const基本用法-声明只读的常量" class="headerlink" title="const基本用法-声明只读的常量"></a>const基本用法-声明只读的常量</h4><p>这意味着，<code>const</code>一旦声明变量，就必须立即初始化，不能留到以后赋值。对于<code>const</code>来说，只声明不赋值，就会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line">a = <span class="number">20</span>;<span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b; <span class="comment">//报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="与let命令相同点"><a href="#与let命令相同点" class="headerlink" title="与let命令相同点"></a>与<code>let</code>命令相同点</h4><ul><li>块级作用域</li><li>暂时性死区</li><li>不可重复声明</li></ul><h4 id="let和const使用建议"><a href="#let和const使用建议" class="headerlink" title="let和const使用建议"></a><code>let</code>和<code>const</code>使用建议</h4><blockquote><p>在默认情况下用const,而只有你在知道变量值需要被修改的情况下使用let</p></blockquote><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>传统的 JavaScript 语言，输出模板通常是这样写的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> oBox = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line"><span class="comment">// 模板字符串</span></span><br><span class="line"><span class="keyword">let</span> id = <span class="number">1</span>,name = <span class="string">&#x27;小马哥&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> htmlTel = <span class="string">&quot;&lt;ul&gt;&lt;li&gt;&lt;p&gt;id:&quot;</span> + id + <span class="string">&quot;&lt;/p&gt;&lt;p&gt;name:&quot;</span> + name + <span class="string">&quot;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&quot;</span>;</span><br><span class="line">oBox.innerHTML = htmlTel;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的这种写法相当繁琐不方便,ES6引入了模板字符串解决这个问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> htmlTel = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;id:<span class="subst">$&#123;id&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;name:<span class="subst">$&#123;name&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;`</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><p>解构赋值是对赋值运算符的一种扩展。它通常针对数组和对象进行操作。</p><blockquote><p>优点：代码书写简洁且易读性高</p></blockquote><h4 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h4><p>在以前，为变量赋值，只能直接指定值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ES6允许我们这样写:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,c] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>如果解构不成功，变量的值就等于<code>undefined</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo] = [];</span><br><span class="line"><span class="keyword">let</span> [bar, foo] = [<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">foo<span class="string">`的值都会等于`</span><span class="literal">undefined</span></span><br></pre></td></tr></table></figure><h4 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h4><p>解构可以用于对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> node = &#123;</span><br><span class="line">    type:<span class="string">&#x27;identifier&#x27;</span>,</span><br><span class="line">    name:<span class="string">&#x27;foo&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;type,name&#125; = node;</span><br><span class="line"><span class="built_in">console</span>.log(type,name)<span class="comment">//identifier foo</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对象的解构赋值时，可以对属性忽略和使用剩余运算符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    a:&#123;</span><br><span class="line">        name:<span class="string">&#x27;张三&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    b:[],</span><br><span class="line">    c:<span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可忽略 忽略b,c属性</span></span><br><span class="line"><span class="keyword">let</span> &#123;a&#125; = obj;</span><br><span class="line"><span class="comment">//剩余运算符 使用此法将其它属性展开到一个对象中存储</span></span><br><span class="line"><span class="keyword">let</span> &#123;a,...res&#125; = obj;</span><br><span class="line"><span class="built_in">console</span>.log(a,res);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>默认值</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;a,b = <span class="number">10</span>&#125; = &#123;<span class="attr">a</span>:<span class="number">20</span>&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="函数参数解构赋值"><a href="#函数参数解构赋值" class="headerlink" title="函数参数解构赋值"></a>函数参数解构赋值</h4><p>直接看例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">[x, y]</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add([<span class="number">1</span>, <span class="number">2</span>]); <span class="comment">// 3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addCart</span>(<span class="params">n,num=<span class="number">0</span></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> n+num;</span><br><span class="line">&#125;</span><br><span class="line">addCart(<span class="number">10</span>);<span class="comment">//10</span></span><br><span class="line">addCart(<span class="number">10</span>,<span class="number">20</span>); <span class="comment">//30</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h4><ul><li><p>交换变量的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> [x,y] = [y,x];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码交换变量<code>x</code>和<code>y</code>的值，这样的写法不仅简洁，而且易读，语义非常清晰。</p></li><li><p>从函数返回多个值</p><p>函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回一个数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> [a, b, c] = example();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    foo: <span class="number">1</span>,</span><br><span class="line">    bar: <span class="number">2</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = example();</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>函数参数的定义</p><p>解构赋值可以方便地将一组参数与变量名对应起来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数是一组有次序的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[x, y, z]</span>) </span>&#123; ... &#125;</span><br><span class="line">f([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数是一组无次序的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</span><br><span class="line">f(&#123;<span class="attr">z</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">x</span>: <span class="number">1</span>&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>提取JSON数据</p><p>解构赋值对提取 JSON 对象中的数据，尤其有用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jsonData = &#123;</span><br><span class="line">  id: <span class="number">42</span>,</span><br><span class="line">  status: <span class="string">&quot;OK&quot;</span>,</span><br><span class="line">  data: [<span class="number">867</span>, <span class="number">5309</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; id, status, <span class="attr">data</span>: number &#125; = jsonData;</span><br><span class="line"><span class="comment">//对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者</span></span><br><span class="line"><span class="built_in">console</span>.log(id, status, number);</span><br><span class="line"><span class="comment">// 42, &quot;OK&quot;, [867, 5309]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>函数参数的默认值</p></li><li><p>输入模块的指定方法</p><p>加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;ajax&#125; = <span class="built_in">require</span>(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ajax()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="函数的扩展"><a href="#函数的扩展" class="headerlink" title="函数的扩展"></a>函数的扩展</h3><h4 id="带参数默认值的函数"><a href="#带参数默认值的函数" class="headerlink" title="带参数默认值的函数"></a>带参数默认值的函数</h4><p>ES6之前，不能直接为函数的参数指定默认值，只能采用变通的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">    y = y || <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x,y);</span><br><span class="line">&#125;</span><br><span class="line">log(<span class="string">&#x27;hello&#x27;</span>);<span class="comment">//hello world</span></span><br><span class="line">log(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;china&#x27;</span>) <span class="comment">//hello china</span></span><br><span class="line">log(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;&#x27;</span>)<span class="comment">//hello world</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ES6 允许为函数的参数设置默认值，即直接写在参数定义的后面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">x, y = <span class="string">&#x27;World&#x27;</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log(<span class="string">&#x27;Hello&#x27;</span>) <span class="comment">// Hello World</span></span><br><span class="line">log(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;China&#x27;</span>) <span class="comment">// Hello China</span></span><br><span class="line">log(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="comment">// Hello</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>ES6 的写法还有两个好处：首先，阅读代码的人，可以立刻意识到哪些参数是可以省略的，不用查看函数体或文档；其次，有利于将来的代码优化，即使未来的版本在对外接口中，彻底拿掉这个参数，也不会导致以前的代码无法运行。</p></blockquote><p><strong>默认的表达式可以是一个函数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getVal</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val + <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add2</span>(<span class="params">a, b = getVal(<span class="number">5</span>)</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add2(<span class="number">10</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>小练习</strong></p><p>请问下面两种写法有什么区别？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">m1</span>(<span class="params">&#123;x = <span class="number">0</span>, y = <span class="number">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x, y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">m2</span>(<span class="params">&#123;x, y&#125; = &#123; x: <span class="number">0</span>, y: <span class="number">0</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x, y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面两种写法都对函数的参数设定了默认值，区别是写法一函数参数的默认值是空对象，但是设置了对象解构赋值的默认值；写法二函数参数的默认值是一个有具体属性的对象，但是没有设置对象解构赋值的默认值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数没有参数的情况</span></span><br><span class="line">m1() <span class="comment">// [0, 0]</span></span><br><span class="line">m2() <span class="comment">// [0, 0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// x 和 y 都有值的情况</span></span><br><span class="line">m1(&#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span>&#125;) <span class="comment">// [3, 8]</span></span><br><span class="line">m2(&#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span>&#125;) <span class="comment">// [3, 8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// x 有值，y 无值的情况</span></span><br><span class="line">m1(&#123;<span class="attr">x</span>: <span class="number">3</span>&#125;) <span class="comment">// [3, 0]</span></span><br><span class="line">m2(&#123;<span class="attr">x</span>: <span class="number">3</span>&#125;) <span class="comment">// [3, undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// x 和 y 都无值的情况</span></span><br><span class="line">m1(&#123;&#125;) <span class="comment">// [0, 0];</span></span><br><span class="line">m2(&#123;&#125;) <span class="comment">// [undefined, undefined]</span></span><br><span class="line"></span><br><span class="line">m1(&#123;<span class="attr">z</span>: <span class="number">3</span>&#125;) <span class="comment">// [0, 0]</span></span><br><span class="line">m2(&#123;<span class="attr">z</span>: <span class="number">3</span>&#125;) <span class="comment">// [undefined, undefined]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h4><p>ES6 引入 rest 参数（形式为<code>...变量名</code>），用于获取函数的多余参数，这样就不需要使用<code>arguments</code>对象了。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...values</span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> val <span class="keyword">of</span> values) &#123;</span><br><span class="line">    sum += val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>) <span class="comment">// 10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码的<code>add</code>函数是一个求和函数，利用 rest 参数，可以向该函数传入任意数目的参数。</p><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数 ***"></a>箭头函数 ***</h4><p>ES6允许使用箭头<code>=&gt;</code>定义函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f = <span class="function"><span class="params">v</span>=&gt;</span>v;</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="keyword">let</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有一个参数</span></span><br><span class="line"><span class="keyword">let</span> add = <span class="function"><span class="params">value</span> =&gt;</span> value;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有两个参数</span></span><br><span class="line"><span class="keyword">let</span> add = <span class="function">(<span class="params">value,value2</span>) =&gt;</span> value + value2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> add = <span class="function">(<span class="params">value1,value2</span>)=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> value1 + value2;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 无参数</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function">() =&gt;</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> doThing = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错。</span></span><br><span class="line"><span class="keyword">let</span> getId = <span class="function"><span class="params">id</span> =&gt;</span> (&#123;<span class="attr">id</span>: id,<span class="attr">name</span>: <span class="string">&#x27;mjj&#x27;</span>&#125;) <span class="comment">//注意</span></span><br><span class="line"><span class="keyword">let</span> obj = getId(<span class="number">1</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="箭头函数的作用"><a href="#箭头函数的作用" class="headerlink" title="箭头函数的作用"></a>箭头函数的作用</h4><ul><li><p>使表达更加简洁</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isEven = <span class="function"><span class="params">n</span> =&gt;</span> n % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> square = <span class="function"><span class="params">n</span> =&gt;</span> n * n;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>简化回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常函数写法</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数写法</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="使用注意点"><a href="#使用注意点" class="headerlink" title="使用注意点"></a>使用注意点</h4><ul><li><p>没有this绑定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> PageHandler = &#123;</span><br><span class="line">    id:<span class="number">123</span>,</span><br><span class="line">    init:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.doSomeThings(event.type);</span><br><span class="line">        &#125;,<span class="literal">false</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    doSomeThings:<span class="function"><span class="keyword">function</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`事件类型:<span class="subst">$&#123;type&#125;</span>,当前id:<span class="subst">$&#123;<span class="built_in">this</span>.id&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">PageHandler.init();</span><br><span class="line"></span><br><span class="line"><span class="comment">//解决this指向问题</span></span><br><span class="line"><span class="keyword">let</span> PageHandler = &#123;</span><br><span class="line">    id: <span class="number">123</span>,</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 使用bind来改变内部函数this的指向</span></span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.doSomeThings(event.type);</span><br><span class="line">        &#125;.bind(<span class="built_in">this</span>), <span class="literal">false</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    doSomeThings: <span class="function"><span class="keyword">function</span> (<span class="params">type</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`事件类型:<span class="subst">$&#123;type&#125;</span>,当前id:<span class="subst">$&#123;<span class="built_in">this</span>.id&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">PageHandler.init();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> PageHandler = &#123;</span><br><span class="line">    id: <span class="number">123</span>,</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 箭头函数没有this的指向，箭头函数内部的this值只能通过查找作用域链来确定</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果箭头函数被一个非箭头函数所包括，那么this的值与该函数的所属对象相等，否则 则是全局的window对象</span></span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">            <span class="built_in">this</span>.doSomeThings(event.type);</span><br><span class="line">        &#125;, <span class="literal">false</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    doSomeThings: <span class="function"><span class="keyword">function</span> (<span class="params">type</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`事件类型:<span class="subst">$&#123;type&#125;</span>,当前id:<span class="subst">$&#123;<span class="built_in">this</span>.id&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">PageHandler.init();</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>箭头函数中没有arguments对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getVal = <span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getVal(<span class="number">1</span>,<span class="number">2</span>)); <span class="comment">//arguments is not defined</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>箭头函数不能使用new关键字来实例化对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Person = <span class="function">()=&gt;</span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person();<span class="comment">// Person is not a constructor</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="对象的扩展"><a href="#对象的扩展" class="headerlink" title="对象的扩展"></a>对象的扩展</h3><h4 id="属性的简洁表示法"><a href="#属性的简洁表示法" class="headerlink" title="属性的简洁表示法"></a>属性的简洁表示法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">19</span>;</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name, <span class="comment">//等同于name:name</span></span><br><span class="line">    age,</span><br><span class="line">    <span class="comment">// 方法也可以简写</span></span><br><span class="line">    <span class="function"><span class="title">sayName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.sayName();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这种写法用于函数的返回值，将会非常方便。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPoint</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> x = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> y = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;x, y&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getPoint()</span><br><span class="line"><span class="comment">// &#123;x:1, y:10&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="对象扩展运算符"><a href="#对象扩展运算符" class="headerlink" title="对象扩展运算符"></a>对象扩展运算符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, ...b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line">b <span class="comment">// [2, 3]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="解构赋值-1"><a href="#解构赋值-1" class="headerlink" title="解构赋值"></a>解构赋值</h5><p>对象的解构赋值用于从一个对象取值，相当于将目标对象自身的所有可遍历的（enumerable）、但尚未被读取的属性，分配到指定的对象上面。所有的键和它们的值，都会拷贝到新对象上面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; x, y, ...z &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;;</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 2</span></span><br><span class="line">z <span class="comment">// &#123; a: 3, b: 4 &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>解构赋值必须是最后一个参数，否则会报错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; ...x, y, z &#125; = obj; <span class="comment">// 句法错误</span></span><br><span class="line"><span class="keyword">let</span> &#123; x, ...y, ...z &#125; = obj; <span class="comment">// 句法错误</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h4 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h4><p>对象的扩展运算符（<code>...</code>）用于取出参数对象的所有可遍历属性，拷贝到当前对象之中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> z = &#123; <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> n = &#123; ...z &#125;;</span><br><span class="line">n <span class="comment">// &#123; a: 3, b: 4 &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>扩展运算符可以用于合并两个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ab = &#123; ...a, ...b &#125;;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> ab = <span class="built_in">Object</span>.assign(&#123;&#125;, a, b);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Promise-对象"><a href="#Promise-对象" class="headerlink" title="Promise 对象"></a>Promise 对象</h3><p>异步编程模块在前端开发中，显得越来越重要。从最开始的XHR到封装后的Ajax都在试图解决异步编程过程中的问题。随着ES6新标准的到来，处理异步数据流又有了新的解决方案。在传统的ajax请求中，当异步请求之间的数据存在依赖关系的时候，就可能产生不优雅的多层回调，俗称”回调地域“(callback hell)，这却让人望而生畏，Promise的出现让我们告别回调地域，写出更优雅的异步代码。</p><p>回调地狱带来的负面作用有以下几点：</p><ul><li>代码臃肿。</li><li>可读性差。</li><li>耦合度过高，可维护性差。</li><li>代码复用性差。</li><li>容易滋生 bug。</li><li>只能在回调里处理异常。</li></ul><blockquote><p>在实践过程中，却发现Promise并不完美，Async/Await是近年来JavaScript添加的最革命性的的特性之一，<strong>Async/Await提供了一种使得异步代码看起来像同步代码的替代方法</strong>。接下来我们介绍这两种处理异步编程的方案。</p></blockquote><h4 id="什么是Promise"><a href="#什么是Promise" class="headerlink" title="什么是Promise"></a>什么是Promise</h4><blockquote><p>Promise 是异步编程的一种解决方案：</p><p>从语法上讲，Promise是一个对象，通过它可以获取异步操作的消息；</p><p>从本意上讲，它是承诺，承诺它过一段时间会给你一个结果。</p><p>promise有三种<strong>状态</strong>：**pending(等待态)，fulfilled(成功态)，rejected(失败态)**；</p><p>状态一旦改变，就不会再变。</p><p>创造promise实例后，它会立即执行。</p></blockquote><p>看段习以为常的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise是一个构造函数，自己身上有all,reject,resolve,race方法，原型上有then、catch等方法</span></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="comment">// 做一些异步操作</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="comment">/* let res = &#123;</span></span><br><span class="line"><span class="comment">ok:1,</span></span><br><span class="line"><span class="comment">data:&#123;</span></span><br><span class="line"><span class="comment">name:&quot;张三&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"><span class="keyword">let</span> res = &#123;</span><br><span class="line">ok:<span class="number">0</span>,</span><br><span class="line">error:<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;有错&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(res.ok === <span class="number">1</span>)&#123;</span><br><span class="line">resolve(res.data);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">reject(res.error.message)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Promise的状态和值"><a href="#Promise的状态和值" class="headerlink" title="Promise的状态和值"></a>Promise的状态和值</h4><p><code>Promise</code>对象存在以下三种状态</p><ul><li>Pending(进行中)</li><li>Fulfilled(已成功)</li><li>Rejected(已失败)</li></ul><blockquote><p>状态只能由 <code>Pending</code> 变为 <code>Fulfilled</code> 或由 <code>Pending</code> 变为 <code>Rejected</code> ，且状态改变之后不会在发生变化，会一直保持这个状态。</p></blockquote><p><code>Promise</code>的值是指状态改变时传递给回调函数的值</p><p>上面例子中的参数为resolve和reject，他们都是函数，用他们可以改变Promise的状态和传入的Promise的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resolve<span class="string">` 和 `</span>reject</span><br></pre></td></tr></table></figure><ul><li><code>resolve</code> : 将Promise对象的状态从 <code>Pending(进行中)</code> 变为 <code>Fulfilled(已成功)</code></li><li><code>reject</code> : 将Promise对象的状态从 <code>Pending(进行中)</code> 变为 <code>Rejected(已失败)</code></li><li><code>resolve</code> 和 <code>reject</code> 都可以传入任意类型的值作为实参，表示 <code>Promise</code> 对象成功<code>（Fulfilled）</code>和失败<code>（Rejected）</code>的值</li></ul><h4 id="then方法"><a href="#then方法" class="headerlink" title="then方法"></a>then方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">p.then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;,<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>promise的then方法返回一个promise对象，所以可以继续链式调用</p><p>上述代码我们可以继续改造，因为上述代码不能传参</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">        &#125;, ms);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">timeout(<span class="number">1000</span>).then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="then方法的规则"><a href="#then方法的规则" class="headerlink" title="then方法的规则"></a>then方法的规则</h4><ul><li><code>then</code>方法下一次的输入需要上一次的输出</li><li>如果一个promise执行完后 返回的还是一个promise，会把这个promise 的执行结果，传递给下一次<code>then</code>中</li><li>如果<code>then</code>中返回的不是Promise对象而是一个普通值，则会将这个结果作为下次then的成功的结果</li><li>如果当前<code>then</code>中失败了 会走下一个<code>then</code>的失败</li><li>如果返回的是undefined 不管当前是成功还是失败 都会走下一次的成功</li><li>catch是错误没有处理的情况下才会走</li><li><code>then</code>中不写方法则值会穿透，传入下一个<code>then</code>中</li></ul><h4 id="Promise封装XHR对象"><a href="#Promise封装XHR对象" class="headerlink" title="Promise封装XHR对象"></a>Promise封装XHR对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getJSON = <span class="function"><span class="keyword">function</span> (<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        xhr.open(<span class="string">&#x27;GET&#x27;</span>, url);</span><br><span class="line">        xhr.onreadystatechange = handler;</span><br><span class="line">        xhr.responseType = <span class="string">&#x27;json&#x27;</span>;</span><br><span class="line">        xhr.setRequestHeader(<span class="string">&#x27;Accept&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>);</span><br><span class="line">        xhr.send();</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.readyState);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.readyState !== <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">                resolve(<span class="built_in">this</span>.response);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="built_in">this</span>.statusText));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">getJSON(<span class="string">&#x27;https://free-api.heweather.net/s6/weather/now?location=beijing&amp;key=4693ff5ea653469f8bb0c29638035976&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line"></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//then方法的链式调用</span></span><br><span class="line">getJSON(<span class="string">&#x27;https://free-api.heweather.net/s6/weather/now?location=beijing&amp;key=4693ff5ea653469f8bb0c29638035976&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> res.HeWeather6;</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">HeWeather6</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(HeWeather6);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="catch方法"><a href="#catch方法" class="headerlink" title="catch方法"></a>catch方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;&#125;)<span class="string">`方法等价于`</span>then(<span class="literal">null</span>,<span class="function"><span class="params">err</span>=&gt;</span>&#123;&#125;)</span><br><span class="line">getJSON(<span class="string">&#x27;https://free-api.heweather.net/s6/weather/now?location=beijing&amp;key=4693ff5ea653469f8bb0c29638035976&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">json</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(json);</span><br><span class="line">&#125;).then(<span class="literal">null</span>,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);   </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">getJSON(<span class="string">&#x27;https://free-api.heweather.net/s6/weather/now?location=beijing&amp;key=4693ff5ea653469f8bb0c29638035976&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">json</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(json);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);   </span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="resove"><a href="#resove" class="headerlink" title="resove()"></a>resove()</h4><p><code>resolve()</code>方法将现有对象转换成Promise对象，该实例的状态为fulfilled</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="comment">//等价于 new Promise(resolve=&gt;resolve(&#x27;foo&#x27;));</span></span><br><span class="line">p.then(<span class="function">(<span class="params">val</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="reject"><a href="#reject" class="headerlink" title="reject()"></a>reject()</h4><p><code>reject()</code>方法返回一个新的Promise实例，该实例的状态为rejected</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p2 = <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;出错了&#x27;</span>));</span><br><span class="line"><span class="comment">//等价于 let p2 = new Promise((resolve,reject)=&gt;reject(new Error(&#x27;出错了)));</span></span><br><span class="line">p2.catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="all-方法"><a href="#all-方法" class="headerlink" title="all()方法"></a>all()方法</h4><p>all()方法提供了并行执行异步操作的能力，并且再所有异步操作执行完后才执行回调</p><p>试想一个页面聊天系统，我们需要从两个不同的URL分别获得用户的的个人信息和好友列表，这两个任务是可以并行执行的，用Promise.all实现如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> meInfoPro = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve, reject</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, <span class="number">500</span>, <span class="string">&#x27;P1&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> youInfoPro = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve, reject</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, <span class="number">600</span>, <span class="string">&#x27;P2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 同时执行p1和p2，并在它们都完成后执行then:</span></span><br><span class="line"><span class="built_in">Promise</span>.all([meInfoPro, youInfoPro]).then( <span class="function">(<span class="params">results</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(results); <span class="comment">// 获得一个Array: [&#x27;P1&#x27;, &#x27;P2&#x27;]</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="race-方法"><a href="#race-方法" class="headerlink" title="race()方法"></a>race()方法</h4><p>有些时候，多个异步任务是为了容错。比如，同时向两个URL读取用户的个人信息，只需要获得先返回的结果即可。这种情况下，用Promise.race()实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> meInfoPro1 = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve, reject</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, <span class="number">500</span>, <span class="string">&#x27;P1&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> meInfoPro2 = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve, reject</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, <span class="number">600</span>, <span class="string">&#x27;P2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Promise</span>.race([meInfoPro1, meInfoPro2]).then(<span class="function">(<span class="params">result</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result); <span class="comment">// P1</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>Promise.all接受一个promise对象的数组，待全部完成之后，统一执行success</strong>;</p><p><strong>Promise.race接受一个包含多个promise对象的数组，只要有一个完成，就执行success</strong></p></blockquote><p>举个更具体的例子，加深对race()方法的理解</p><p>当我们请求某个图片资源，会导致时间过长，给用户反馈</p><p>用race给某个异步请求设置超时时间，并且在超时后执行相应的操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestImg</span>(<span class="params">imgSrc</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">        img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            resolve(img);</span><br><span class="line">        &#125;</span><br><span class="line">        img.src = imgSrc;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//延时函数，用于给请求计时</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            reject(<span class="string">&#x27;图片请求超时&#x27;</span>);</span><br><span class="line">        &#125;, <span class="number">5000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Promise</span>.race([requestImg(<span class="string">&#x27;images/2.png&#x27;</span>), timeout()]).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;); </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="async-函数"><a href="#async-函数" class="headerlink" title="async 函数"></a>async 函数</h3><p>异步操作是JavaScript编程的麻烦事，很多人认为async函数是异步编程的解决方案</p><h4 id="Async-await介绍"><a href="#Async-await介绍" class="headerlink" title="Async/await介绍"></a>Async/await介绍</h4><ul><li>async/await是写异步代码的新方式，优于回调函数和Promise。</li><li>async/await是基于Promise实现的，它不能用于普通的回调函数。</li><li>async/await与Promise一样，是非阻塞的。</li><li>async/await使得异步代码看起来像同步代码，再也没有回调函数。但是改变不了JS单线程、异步的本质。(<strong>异步代码同步化</strong>)</li></ul><h4 id="Async-await的使用规则"><a href="#Async-await的使用规则" class="headerlink" title="Async/await的使用规则"></a>Async/await的使用规则</h4><ul><li><p><strong>凡是在前面添加了async的函数在执行后都会自动返回一个Promise对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = test()</span><br><span class="line"><span class="built_in">console</span>.log(result)  <span class="comment">//即便代码里test函数什么都没返回，我们依然打出了Promise对象</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>await必须在async函数里使用，不能单独使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">test</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>await后面需要跟Promise对象，不然就没有意义，而且await后面的Promise对象不必写then，因为await的作用之一就是获取后面Promise对象成功状态传递出来的参数。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">test</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> fn() <span class="comment">//因为fn会返回一个Promise对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(result)    <span class="comment">//这里会打出Promise成功后传递过来的&#x27;success&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="Async-Await的用法"><a href="#Async-Await的用法" class="headerlink" title="Async/Await的用法"></a>Async/Await的用法</h4><ul><li>使用await，函数必须用async标识</li><li>await后面跟的是一个Promise实例</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> img = <span class="built_in">document</span>.createElement(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">        img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            resolve(img)</span><br><span class="line">        &#125;</span><br><span class="line">        img.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            reject(<span class="string">&#x27;图片加载失败&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        img.src = src</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> promise</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> src1 = <span class="string">&#x27;https://hcdn1.luffycity.com/static/frontend/index/banner@2x_1574647618.8112254.png&#x27;</span></span><br><span class="line"><span class="keyword">const</span> src2 = <span class="string">&#x27;https://hcdn2.luffycity.com/media/frontend/index/%E7%94%BB%E6%9D%BF.png&#x27;</span></span><br><span class="line"><span class="keyword">const</span> load = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result1 = <span class="keyword">await</span> loadImg(src1)</span><br><span class="line">    <span class="built_in">console</span>.log(result1)</span><br><span class="line">    <span class="keyword">const</span> result2 = <span class="keyword">await</span> loadImg(src2)</span><br><span class="line">    <span class="built_in">console</span>.log(result2)</span><br><span class="line">&#125;</span><br><span class="line">load()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>当函数执行的时候，一旦遇到 await 就会先返回，等到触发的异步操作完成，再接着执行函数体内后面的语句。</strong></p><h4 id="async-await的错误处理"><a href="#async-await的错误处理" class="headerlink" title="async/await的错误处理"></a>async/await的错误处理</h4><p>关于错误处理，如规则三所说，await可以直接获取到后面Promise成功状态传递的参数，但是却捕捉不到失败状态。在这里，我们通过给包裹await的async函数添加then/catch方法来解决，因为根据规则一，async函数本身就会返回一个Promise对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> load = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> result1 = <span class="keyword">await</span> loadImg(src1)</span><br><span class="line">        <span class="built_in">console</span>.log(result1)</span><br><span class="line">        <span class="keyword">const</span> result2 = <span class="keyword">await</span> loadImg(src2)</span><br><span class="line">        <span class="built_in">console</span>.log(result2)</span><br><span class="line">    &#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">load()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="为什么Async-Await更好？"><a href="#为什么Async-Await更好？" class="headerlink" title="为什么Async/Await更好？"></a>为什么Async/Await更好？</h4><p>Async/Await较Promise有诸多好处，以下介绍其中三种优势：</p><ul><li><p><strong>简洁</strong></p><p>使用Async/Await明显节约了不少代码。我们不需要写.then，不需要写匿名函数处理Promise的resolve值，也不需要定义多余的data变量，还避免了嵌套代码。</p></li><li><p><strong>中间值</strong></p></li></ul><p>在前端编程中，我们偶尔会遇到这样一个场景：我们需要发送多个请求，而<strong>后面请求的发送总是需要依赖上一个请求返回的数据</strong>。对于这个问题，我们既可以用的Promise的链式调用来解决，也可以用async/await来解决，然而后者会更简洁些</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> makeRequest = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> promise1()</span><br><span class="line">    .then(<span class="function"><span class="params">value1</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> promise2(value1)</span><br><span class="line">        .then(<span class="function"><span class="params">value2</span> =&gt;</span> &#123;        </span><br><span class="line">          <span class="keyword">return</span> promise3(value1, value2)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用async/await的话，代码会变得异常简单和直观</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> makeRequest = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> value1 = <span class="keyword">await</span> promise1()</span><br><span class="line">  <span class="keyword">const</span> value2 = <span class="keyword">await</span> promise2(value1)</span><br><span class="line">  <span class="keyword">return</span> promise3(value1, value2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>提高可读性</strong></li></ul><p>下面示例中，需要获取数据，然后根据返回数据决定是直接返回，还是继续获取更多的数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> makeRequest = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> getJSON()</span><br><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (data.needsAnotherRequest) &#123;</span><br><span class="line">        <span class="keyword">return</span> makeAnotherRequest(data)</span><br><span class="line">          .then(<span class="function"><span class="params">moreData</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(moreData)</span><br><span class="line">            <span class="keyword">return</span> moreData</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码嵌套（6层）可读性较差，它们传达的意思只是需要将最终结果传递到最外层的Promise。使用async/await编写可以大大地提高可读性:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> makeRequest = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> getJSON()</span><br><span class="line">  <span class="keyword">if</span> (data.needsAnotherRequest) &#123;</span><br><span class="line">    <span class="keyword">const</span> moreData = <span class="keyword">await</span> makeAnotherRequest(data);</span><br><span class="line">    <span class="built_in">console</span>.log(moreData)</span><br><span class="line">    <span class="keyword">return</span> moreData</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    <span class="keyword">return</span> data    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Class的基本用法"><a href="#Class的基本用法" class="headerlink" title="Class的基本用法"></a>Class的基本用法</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>JavaScript语言中，生成实例对象的传统方法是通过构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayName  = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.sayName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">&#x27;小马哥&#x27;</span>,<span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面这种写法跟传统的面向对象语言（比如 C++ 和 Java）差异很大，很容易让新学习这门语言的程序员感到困惑</p><p>ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过<code>class</code>关键字，可以定义类。</p><p>基本上，ES6 的<code>class</code>可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的<code>class</code>写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。上面的代码用 ES6 的<code>class</code>改写，就是下面这样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// constructor方法 是类的默认方法,通过new命令生成对象实例时,自动调用该方法,一个类必须有constructor方法,如果没有定义,会被默认添加</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//等同于Person.prototype = function sayName()&#123;&#125;</span></span><br><span class="line">    <span class="function"><span class="title">sayName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Person===Person.prototype.constructor)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>类的方法内部如果含有<code>this</code>，它默认指向类的实例</p></blockquote><h3 id="Module-模块化"><a href="#Module-模块化" class="headerlink" title="Module 模块化"></a>Module 模块化</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>历史上，JavaScript 一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。其他语言都有这项功能，比如 Ruby 的<code>require</code>、Python 的<code>import</code>，甚至就连 CSS 都有<code>@import</code>，但是 JavaScript 任何这方面的支持都没有，这对开发大型的、复杂的项目形成了巨大障碍。</p><p>在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。</p><p>ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。比如，CommonJS 模块就是对象，输入时必须查找对象属性。</p><h4 id="export命令"><a href="#export命令" class="headerlink" title="export命令"></a>export命令</h4><p>模块功能主要由两个命令构成：<code>export</code>和<code>import</code>。<code>export</code>命令用于规定模块的对外接口，<code>import</code>命令用于输入其他模块提供的功能。</p><p>一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用<code>export</code>关键字输出该变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//module/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&#x27;zhangsan &#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> color = <span class="string">&#x27;red &#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(fristName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以这样</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;zhangsan &#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">const</span> color = <span class="string">&#x27;red &#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(fristName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;name,age,color,sayName&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="import命令"><a href="#import命令" class="headerlink" title="import命令"></a>import命令</h4><p>使用<code>export</code>命令定义了模块的对外接口以后，其他 JS 文件就可以通过<code>import</code>命令加载这个模块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;name,age,color,sayName,fn&#125; <span class="keyword">from</span> <span class="string">&#x27;./modules/index.js&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果想为输入的变量重新取一个名字，<code>import</code>命令要使用<code>as</code>关键字，将输入的变量重命名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> obj <span class="keyword">from</span> <span class="string">&#x27;./modules/index.js&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="export-default-命令"><a href="#export-default-命令" class="headerlink" title="export default 命令"></a>export default 命令</h4><p>使用<code>export default</code>命令为模块指定默认输出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//export-default.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者写成</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> foo;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在其它模块加载该模块时，<code>import</code>命令可以为该匿名函数指定任意名字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//import-default.js</span></span><br><span class="line"><span class="keyword">import</span> customName <span class="keyword">from</span> <span class="string">&#x27;./export-default.js&#x27;</span></span><br><span class="line">customNmae();<span class="comment">//foo</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果想在一条import语句中，同事输入默认方法和其他接口，可以写成下面这样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> customName,&#123;add&#125; <span class="keyword">from</span> <span class="string">&#x27;export-default.js&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对应上面<code>export</code>语句如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//export-default.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;add&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>export default</code>也可以用来输出类。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyClass.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> Person <span class="keyword">from</span> <span class="string">&#x27;MyClass&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> o = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ES6常用API整理&quot;&gt;&lt;a href=&quot;#ES6常用API整理&quot; class=&quot;headerlink&quot; title=&quot;ES6常用API整理&quot;&gt;&lt;/a&gt;ES6常用API整理&lt;/h1&gt;&lt;h3 id=&quot;ECMAScript-6简介&quot;&gt;&lt;a href=&quot;#ECMAScr</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://example.com/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="Es6" scheme="http://example.com/tags/Es6/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript知识整理</title>
    <link href="http://example.com/2021/04/05/JavaScript-Review/"/>
    <id>http://example.com/2021/04/05/JavaScript-Review/</id>
    <published>2021-04-05T12:06:21.000Z</published>
    <updated>2021-04-09T13:18:35.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0、前端知识体系"><a href="#0、前端知识体系" class="headerlink" title="0、前端知识体系"></a>0、前端知识体系</h1><p>想要成为真正的“互联网Java全栈工程师”还有很长的一段路要走，其中前端是绕不开的一门必修课。本阶段课程的主要目的就是带领Java后台程序员认识前端、了解前端、掌握前端，为实现成为“互联网Java全栈工程师”再向前迈进一步。</p><h2 id="0-1、前端三要素"><a href="#0-1、前端三要素" class="headerlink" title="0.1、前端三要素"></a>0.1、前端三要素</h2><ul><li>HTML（结构）：超文本标记语言（Hyper Text Markup Language），决定网页的结构和内容</li><li>CSS（表现）：层叠样式表（Cascading Style Sheets），设定网页的表现样式。</li><li>JavaScript（行为）：是一种弱类型脚本语言，其源码不需经过编译，而是由浏览器解释运行，用于控制网页的行为</li></ul><blockquote><h2 id="0-2、结构层（HTML）"><a href="#0-2、结构层（HTML）" class="headerlink" title="0.2、结构层（HTML）"></a>0.2、结构层（HTML）</h2></blockquote><p>太简单，略</p><blockquote><h2 id="0-3、表现层（CSS）"><a href="#0-3、表现层（CSS）" class="headerlink" title="0.3、表现层（CSS）"></a>0.3、表现层（CSS）</h2></blockquote><p>CSS层叠样式表是一门标记语言，并不是编程语言，因此不可以自定义变量，不可以引用等，换句话说就是不具备任何语法支持，它主要缺陷如下：</p><ul><li>语法不够强大，比如无法嵌套书写，导致模块化开发中需要书写很多重复的选择器；</li><li>没有变量和合理的样式复用机制，使得逻辑上相关的属性值必须以字面量的形式重复输出，导致难以维护；<br>这就导致了我们在工作中无端增加了许多工作量。为了解决这个问题，前端开发人员会使用一种称之为【CSS预处理器】的工具,提供CSS缺失的样式层复用机制、减少冗余代码，提高样式代码的可维护性。大大的提高了前端在样式上的开发效率。</li></ul><blockquote><p>什么是CSS预处理器</p></blockquote><p>CSS预处理器定义了一种新的语言，其基本思想是，用一种专门的编程语言，为CSS增加了一些编程的特性，将CSS作为目标生成文件，然后开发者就只需要使用这种语言进行CSS的编码工作。转化成通俗易懂的话来说就是“<strong>用一种专门的编程语言，进行Web页面样式设计，再通过编译器转化为正常的CSS文件，以供项目使用”</strong>。</p><p>常用的CSS预处理器有哪些</p><ul><li>SASS：基于Ruby ，通过服务端处理，功能强大。解析效率高。需要学习Ruby语言，上手难度高于LESS。</li><li>LESS：基于NodeJS，通过客户端处理，使用简单。功能比SASS简单，解析效率也低于SASS，但在实际开发中足够了，所以如果我们后台人员如果需要的话，建议使用LESS。</li></ul><h2 id="0-4、行为层（JavaScript）"><a href="#0-4、行为层（JavaScript）" class="headerlink" title="0.4、行为层（JavaScript）"></a>0.4、行为层（JavaScript）</h2><p>JavaScript一门弱类型脚本语言，其源代码在发往客户端运行之前不需要经过编译，而是将文本格式的字符代码发送给浏览器，由浏览器解释运行。</p><h2 id="JavaScript框架"><a href="#JavaScript框架" class="headerlink" title="JavaScript框架"></a>JavaScript框架</h2><ul><li>JQuery：大家熟知的JavaScript库，优点就是简化了DOM操作，缺点就是DOM操作太频繁，影响前端性能；在前端眼里使用它仅仅是为了兼容IE6，7，8；</li><li>Angular：Google收购的前端框架，由一群Java程序员开发，其特点是将后台的MVC模式搬到了前端并增加了<strong>模块化开发</strong>的理念，与微软合作，采用了TypeScript语法开发；对后台程序员友好，对前端程序员不太友好；最大的缺点是版本迭代不合理（如1代–&gt;2 代，除了名字，基本就是两个东西；截止发表博客时已推出了Angular6）</li><li>React：Facebook 出品，一款高性能的JS前端框架；特点是提出了新概念 【虚拟DOM】用于减少真实 DOM 操作，在内存中模拟 DOM操作，有效的提升了前端渲染效率；缺点是使用复杂，因为需要额外学习一门【JSX】语言；</li><li>Vue：一款渐进式 JavaScript 框架，所谓渐进式就是逐步实现新特性的意思，如实现模块化开发、路由、状态管理等新特性。其特点是综合了 Angular（模块化）和React(虚拟 DOM) 的优点；</li><li>Axios：前端通信框架；因为 Vue 的边界很明确，就是为了处理 DOM，所以并不具备通信能力，此时就需要额外使用一个通信框架与服务器交互；当然也可以直接选择使用jQuery 提供的AJAX 通信功能；</li></ul><h2 id="UI框架"><a href="#UI框架" class="headerlink" title="UI框架"></a>UI框架</h2><ul><li>Ant-Design：阿里巴巴出品，基于React的UI框架</li><li>ElementUI、iview、ice：饿了么出品，基于Vue的UI框架</li><li>BootStrap：Teitter推出的一个用于前端开发的开源工具包</li><li>AmazeUI：又叫“妹子UI”，一款HTML5跨屏前端框架</li></ul><h2 id="JavaScript构建工具"><a href="#JavaScript构建工具" class="headerlink" title="JavaScript构建工具"></a>JavaScript构建工具</h2><ul><li>Babel：JS编译工具，主要用于浏览器不支持的ES新特性，比如用于编译TypeScript</li><li>WebPack：模块打包器，主要作用就是打包、压缩、合并及按序加载</li></ul><blockquote><p>注：以上知识点已将WebApp开发所需技能全部梳理完毕</p></blockquote><h2 id="0-5、三端同一"><a href="#0-5、三端同一" class="headerlink" title="0.5、三端同一"></a>0.5、三端同一</h2><h3 id="混合开发（Hybrid-App）"><a href="#混合开发（Hybrid-App）" class="headerlink" title="混合开发（Hybrid App）"></a>混合开发（Hybrid App）</h3><p>主要目的是实现一套代码三端统一（PC、Android：.apk、iOS：.ipa）并能够调用到设备底层硬件（如：传感器、GPS、摄像头等），打包方式主要有以下两种：</p><ul><li>云打包：HBuild -&gt; HBuildX，DCloud 出品；API Cloud</li><li>本地打包： Cordova（前身是 PhoneGap）</li></ul><h3 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h3><p>详见微信官网，这里就是介绍一个方便微信小程序UI开发的框架：WeUI</p><h1 id="1、什么是Javascript"><a href="#1、什么是Javascript" class="headerlink" title="1、什么是Javascript"></a>1、什么是Javascript</h1><h1 id="1-1、概述"><a href="#1-1、概述" class="headerlink" title="1.1、概述"></a>1.1、概述</h1><p>javaScript是一门世界上最流行的脚本语言<br>Java，JavaScript<br>10天<br>一个合格的后端人员，必须精通JavaScript</p><h1 id="1-2、历史"><a href="#1-2、历史" class="headerlink" title="1.2、历史"></a>1.2、历史</h1><p>见百度</p><p>ECMAScript它可以理解为JavaScript的一个标准<br>最新版本已经到es6版本~<br>但是大部分浏览器还只停留在支持es5代码上！<br>开发环境–线上环境，版本不一致</p><h1 id="2、快速入门"><a href="#2、快速入门" class="headerlink" title="2、快速入门"></a>2、快速入门</h1><h2 id="2-1、引入JavaScript"><a href="#2-1、引入JavaScript" class="headerlink" title="2.1、引入JavaScript"></a>2.1、引入JavaScript</h2><p>1、内部标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="javascript"><span class="comment">//....</span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure><p>2、外部引入<br>hj.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">&quot;hello,world&quot;</span>);</span><br></pre></td></tr></table></figure><p>test.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--外部引入</span></span><br><span class="line"><span class="comment">       注意：script必须成对出现</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/hj.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--不用显示定义type，也默认就是javaScript--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--script标签内，写Javascript代码--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;script&gt;</span></span><br><span class="line"><span class="comment">        alert(&quot;hello,world&quot;);</span></span><br><span class="line"><span class="comment">    &lt;/script&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--外部引入</span></span><br><span class="line"><span class="comment">        注意：script必须成对出现</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/hj.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--不用显示定义type，也默认就是javaScript--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--这里也可以存放--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2、基本语法入门"><a href="#2-2、基本语法入门" class="headerlink" title="2.2、基本语法入门"></a>2.2、基本语法入门</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--JavaScript严格区分大小写--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 1. 定义变量   变量类型 变量名 = 变量值</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> score = <span class="number">1</span> ;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//alert(num)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2. 条件控制</span></span></span><br><span class="line"></span><br><span class="line">        if (score &gt; 60 &amp;&amp; score &lt; 70)&#123;</span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;60~70&quot;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &gt; <span class="number">70</span> &amp;&amp; score &lt; <span class="number">80</span>)&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;70~80&quot;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;other&quot;</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器必备调试须知：<br><img src="/images/JavaScript-Review/20200508101436683.png" alt="在这里插入图片描述"></p><h2 id="2-3、数据类型"><a href="#2-3、数据类型" class="headerlink" title="2.3、数据类型"></a>2.3、数据类型</h2><p>数值，文本，图形，音频，视频</p><p>变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a </span><br><span class="line"><span class="keyword">var</span> $<span class="number">1</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> s_j</span><br><span class="line"><span class="keyword">var</span> 王者荣耀=<span class="string">&quot;倔强青铜&quot;</span></span><br><span class="line"><span class="comment">//不能以数字开头</span></span><br></pre></td></tr></table></figure><p>number<br>js不区分小数和整数，Number</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span><span class="comment">//整数123</span></span><br><span class="line"><span class="number">123.1</span><span class="comment">//浮点数123.1</span></span><br><span class="line"><span class="number">1.123e3</span><span class="comment">//科学计数法</span></span><br><span class="line">-<span class="number">99</span><span class="comment">//负数</span></span><br><span class="line"><span class="literal">NaN</span><span class="comment">//not a number</span></span><br><span class="line"><span class="literal">Infinity</span> <span class="comment">// 表示无限大</span></span><br></pre></td></tr></table></figure><p>字符串<br>‘abc’ “abc”</p><p>布尔值<br>true，false</p><p>逻辑运算</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp; 两个都为真，结果为真</span><br><span class="line"></span><br><span class="line">|| 一个为真，结果为真</span><br><span class="line"></span><br><span class="line">! 真即假，假即真</span><br></pre></td></tr></table></figure><p>比较运算符 ！！！重要！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">=</span><br><span class="line"><span class="number">1</span>，<span class="string">&quot;1&quot;</span></span><br><span class="line">== 等于（类型不一样，值一样，也会判断为<span class="literal">true</span>）</span><br><span class="line">=== 绝对等于（类型一样，值一样，结果为<span class="literal">true</span>）</span><br></pre></td></tr></table></figure><p>这是一个JS的缺陷，坚持不要使用 == 比较<br>须知：</p><ul><li>NaN === NaN，这个与所有的数值都不相等，包括自己</li><li>只能通过isNaN（NaN）来判断这个数是否是NaN</li></ul><p>浮点数问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log((<span class="number">1</span>/<span class="number">3</span>) === (<span class="number">1</span>-<span class="number">2</span>/<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>尽量避免使用浮点数进行运算，存在精度问题！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.abs(<span class="number">1</span>/<span class="number">3</span>-(<span class="number">1</span>-<span class="number">2</span>/<span class="number">3</span>))&lt;<span class="number">0.00000001</span></span><br></pre></td></tr></table></figure><p>null 和 undefined</p><ul><li>null 空</li><li>undefined 未定义</li></ul><p>数组<br>Java的数组必须是相同类型的对象~，JS中不需要这样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//保证代码的可读性，尽量使用[]</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">&#x27;hello&#x27;</span>,<span class="literal">null</span>,<span class="literal">true</span>];</span><br><span class="line"><span class="comment">//第二种定义方法</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">&#x27;hello&#x27;</span>);</span><br></pre></td></tr></table></figure><p>取数字下标：如果越界了，就会 报undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure><p>对象<br>对象是大括号，数组是中括号</p><blockquote><p>每个属性之间使用逗号隔开，最后一个属性不需要逗号</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Person person = new Person(1,2,3,4,5);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">name:<span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">age:<span class="number">3</span>,</span><br><span class="line">tags:[<span class="string">&#x27;js&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;web&#x27;</span>,<span class="string">&#x27;...&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取对象值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">person.name</span><br><span class="line">&gt; <span class="string">&quot;Tom&quot;</span></span><br><span class="line">person.age</span><br><span class="line">&gt; <span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="2-4、严格检查格式"><a href="#2-4、严格检查格式" class="headerlink" title="2.4、严格检查格式"></a>2.4、严格检查格式</h2><p><img src="/images/JavaScript-Review/20200508105351996.png" alt="在这里插入图片描述"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    前提：IDEA需要设置支持ES6语法</span></span><br><span class="line"><span class="comment">        &#x27;use strict&#x27;;严格检查模式，预防JavaScript的随意性导致产生的一些问题</span></span><br><span class="line"><span class="comment">        必须写在JavaScript的第一行！</span></span><br><span class="line"><span class="comment">        局部变量建议都使用let去定义~</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="meta">        &#x27;use strict&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//全局变量</span></span></span><br><span class="line"><span class="javascript">         <span class="keyword">let</span> i=<span class="number">1</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//ES6 let</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3、数据类型"><a href="#3、数据类型" class="headerlink" title="3、数据类型"></a>3、数据类型</h1><h2 id="3-1、字符串"><a href="#3-1、字符串" class="headerlink" title="3.1、字符串"></a>3.1、字符串</h2><p>1、正常字符串我们使用 单引号，或者双引号包裹<br>2、注意转义字符 \</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\<span class="string">&#x27;</span></span><br><span class="line"><span class="string">\n</span></span><br><span class="line"><span class="string">\t</span></span><br><span class="line"><span class="string">\u4e2d    \u##### Unicode字符</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">\x41Ascall字符</span></span><br></pre></td></tr></table></figure><p>3、多行字符串编写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tab 上面 esc下面</span></span><br><span class="line">        <span class="keyword">var</span> msg =</span><br><span class="line">            <span class="string">`hello</span></span><br><span class="line"><span class="string">            world</span></span><br><span class="line"><span class="string">            你好呀</span></span><br><span class="line"><span class="string">            nihao</span></span><br><span class="line"><span class="string">            `</span></span><br></pre></td></tr></table></figure><p>4、模板字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tab 上面 esc下面</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;Tom&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> msg = <span class="string">`你好，<span class="subst">$&#123;name&#125;</span>`</span></span><br></pre></td></tr></table></figure><p>5、字符串长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.length</span><br></pre></td></tr></table></figure><p>6、字符串的可变性，不可变<br><img src="/images/JavaScript-Review/20200508110738649.png" alt="在这里插入图片描述"><br>7、大小写转换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意，这里是方法，不是属性了</span></span><br><span class="line">student.toUpperCase();</span><br><span class="line">student.toLowerCase();</span><br></pre></td></tr></table></figure><p>8、student.indexof(‘t’)<br>9、substring，从0开始</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[)</span><br><span class="line">student.substring(<span class="number">1</span>)<span class="comment">//从第一个字符串截取到最后一个字符串</span></span><br><span class="line">student.substring(<span class="number">1</span>,<span class="number">3</span>)<span class="comment">//[1,3)</span></span><br></pre></td></tr></table></figure><h2 id="3-2、数组"><a href="#3-2、数组" class="headerlink" title="3.2、数组"></a>3.2、数组</h2><p>Array可以包含任意的数据类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];<span class="comment">//通过下标取值和赋值</span></span><br></pre></td></tr></table></figure><p>1、长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.length</span><br></pre></td></tr></table></figure><p>注意：假如给arr.lennth赋值，数组大小就会发生变化~，如果赋值过小，元素就会丢失</p><p>2、indexOf，通过元素获得下标索引</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr.indexOf(<span class="number">2</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>字符串的”1”和数字 1 是不同的</p><p><strong>3、slice（）</strong>截取Array的一部分，返回的一个新数组，类似于String中substring<br><strong>4、push()，pop()尾部</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">push：压入到尾部</span><br><span class="line">pop：弹出尾部的一个元素</span><br></pre></td></tr></table></figure><p><strong>5、unshift(),shift() 头部</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unshift：压入到头部</span><br><span class="line">shift：弹出头部的一个元素</span><br></pre></td></tr></table></figure><p>6、排序sort()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">3</span>)[<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;A&quot;</span>]</span><br><span class="line">arr.sort()</span><br><span class="line">(<span class="number">3</span>)[<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>]</span><br></pre></td></tr></table></figure><p>7、元素反转reverse()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">3</span>)[<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>]</span><br><span class="line">arr.reverse()</span><br><span class="line">(<span class="number">3</span>)[<span class="string">&quot;C&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;A&quot;</span>]</span><br></pre></td></tr></table></figure><p><strong>8、concat()</strong><br><img src="/images/JavaScript-Review/20200508153119816.png" alt="在这里插入图片描述"><br>注意：concat()并没有修改数组，只是会返回一个新的数组</p><p>9、连接符join<br>打印拼接数组，使用特定的字符串连接<br><img src="/images/JavaScript-Review/20200508153243846.png" alt="在这里插入图片描述"><br>10、多维数组<br><img src="/images/JavaScript-Review/20200508153447514.png" alt="在这里插入图片描述"></p><p>数组：存储数据（如何存，如何取，方法都可以自己实现！）</p><h2 id="3-3、对象"><a href="#3-3、对象" class="headerlink" title="3.3、对象"></a>3.3、对象</h2><p>若干个键值对</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 对象名 = &#123;</span><br><span class="line">属性名：属性值，</span><br><span class="line">属性名：属性值，</span><br><span class="line">属性名：属性值</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义了一个person对象，它有四个属性</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">name:<span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">age:<span class="number">3</span>,</span><br><span class="line">email:<span class="string">&quot;123456798@QQ.com&quot;</span>,</span><br><span class="line">score:<span class="number">66</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Js中对象，{…}表示一个对象，建制对描述属性xxx：xxx，多个属性之间用逗号隔开，最后一个属性不加逗号！<br>JavaScript中的所有的键都是字符串，值是任意对象！<br>1、对象赋值<br><img src="/images/JavaScript-Review/20200508155833832.png" alt="在这里插入图片描述"><br>2、使用一个不存在的对象属性，不会报错！undefined<br><img src="/images/JavaScript-Review/20200508155917394.png" alt="在这里插入图片描述"><br>3、动态的删减属性，通过delete删除对象的属性<br><img src="/images/JavaScript-Review/20200508160429505.png" alt="在这里插入图片描述"><br>4、动态的添加，直接给新的属性添加值即可<br><img src="/images/JavaScript-Review/20200508160409465.png" alt="在这里插入图片描述"><br>5、判断属性值是否在这个对象中！xxx in xxx<br><img src="/images/JavaScript-Review/20200508160704412.png" alt="在这里插入图片描述"><br>6、判断一个属性是否是这个对象自身拥有的 hasOwnProperty()<br><img src="/images/JavaScript-Review/20200508160950801.png" alt="在这里插入图片描述"></p><h2 id="3-4、流程控制"><a href="#3-4、流程控制" class="headerlink" title="3.4、流程控制"></a>3.4、流程控制</h2><p>if判断<br><img src="/images/JavaScript-Review/20200508161158507.png" alt="在这里插入图片描述"></p><p>while循环，避免程序死循环<br><img src="/images/JavaScript-Review/20200508161549241.png" alt="在这里插入图片描述"><br>for循环<br><img src="/images/JavaScript-Review/20200508161625832.png" alt="在这里插入图片描述"><br>forEach循环</p><blockquote><p>ES5.1特性</p></blockquote><p><img src="/images/JavaScript-Review/20200508162100917.png" alt="在这里插入图片描述"><br>for …in——-下标<br><img src="/images/JavaScript-Review/20200508162209421.png" alt="在这里插入图片描述"></p><h2 id="3-5、Map和Set"><a href="#3-5、Map和Set" class="headerlink" title="3.5、Map和Set"></a>3.5、Map和Set</h2><blockquote><p>ES6的新特性~</p></blockquote><p>Map<br><img src="/images/JavaScript-Review/20200508163109596.png" alt="在这里插入图片描述"><br>Set：无序不重复的集合(有重复的话，就会自动去掉！)<br><img src="/images/JavaScript-Review/20200508163211654.png" alt="在这里插入图片描述"></p><h2 id="3-6、iterator"><a href="#3-6、iterator" class="headerlink" title="3.6、iterator"></a>3.6、iterator</h2><blockquote><p>es6新特性</p></blockquote><p>作业：使用iterator来遍历迭代我们Map，Set！</p><p>遍历数组</p><p><img src="/images/JavaScript-Review/2020050816410825.png" alt="在这里插入图片描述"><br>遍历Map<br><img src="/images/JavaScript-Review/20200508164125573.png" alt="在这里插入图片描述"><br>遍历set<br><img src="/images/JavaScript-Review/20200508164144469.png" alt="在这里插入图片描述"></p><h1 id="4、函数"><a href="#4、函数" class="headerlink" title="4、函数"></a>4、函数</h1><h2 id="4-1、定义函数"><a href="#4-1、定义函数" class="headerlink" title="4.1、定义函数"></a>4.1、定义函数</h2><blockquote><p>定义方式一</p></blockquote><p>绝对值函数<br><img src="/images/JavaScript-Review/2020050818170197.png" alt="在这里插入图片描述"><br>一旦执行到return代表函数结束，返回结果！<br>如果没有执行return，函数执行完也会返回结果，结果就是undefined</p><blockquote><p>定义方式二</p></blockquote><p><img src="/images/JavaScript-Review/20200508182120582.png" alt="在这里插入图片描述"><br>function(x){…}这是一个匿名函数。但是可以吧结果赋值给abs，通过abs就可以调用函数！<br>方式一和方式二等价！</p><blockquote><p>调用函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abs(<span class="number">10</span>)<span class="comment">//10</span></span><br><span class="line">abs(-<span class="number">10</span>) <span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>参数问题：javaScript可以传任意个参数，也可以不传递参数~<br>参数进来是否存在问题？<br>假设不存在参数，如何规避？<br><img src="/images/JavaScript-Review/20200508182908571.png" alt="在这里插入图片描述"></p><blockquote><p>arguments</p></blockquote><p>arguments是一个JS免费赠送的关键字；<br>代表，传递进来的所有参数，是一个数组！<br><img src="/images/JavaScript-Review/20200508183337762.png" alt="在这里插入图片描述"><br>问题：arguments包含所有的参数，我们有时候想使用多余的参数来进行附加操作。需要排除已有参数~</p><blockquote><p>rest</p></blockquote><p>以前：<br><img src="/images/JavaScript-Review/20200508183752806.png" alt="在这里插入图片描述"></p><p>ES6引入的新特性，获取除了已经定义的参数之外的所有参数~…<br><img src="/images/JavaScript-Review/20200508183918899.png" alt="在这里插入图片描述"><br>rest参数只能写在最后面，必须用…标识。</p><h2 id="4-2、变量的作用域"><a href="#4-2、变量的作用域" class="headerlink" title="4.2、变量的作用域"></a>4.2、变量的作用域</h2><p>在javascript中，var定义变量实际是有作用域的。<br>假设在函数体中声明，则在函数体外不可以使用<del>（非要想实现的话，可以研究一下==闭包==）<br><img src="/images/JavaScript-Review/202005081843310.png" alt=" "><br>如果两个函数使用了相同的变量名，只要在函数内部就不冲突<br><img src="/images/JavaScript-Review/20200508213017794.png" alt="在这里插入图片描述"><br>内部函数可以访问外部函数的成员，反之则不行<br><img src="/images/JavaScript-Review/2020050821304022.png" alt="在这里插入图片描述"><br>假设，内部函数变量和外部函数变量，重名！<br><img src="/images/JavaScript-Review/20200508214742767.png" alt="在这里插入图片描述"><br>假设在JavaScript中，函数查找变量从自身函数开始</del>， 由“内”向“外”查找，假设外部存在这个同名的函数变量，则内部函数会屏蔽外部函数的变量。</p><blockquote><p>提升变量的作用域</p></blockquote><p><img src="/images/JavaScript-Review/20200508215241301.png" alt="在这里插入图片描述"><br>结果：x undefined<br>说明：js执行引擎，自动提升了y的声明，但是不会提升变量y的赋值；<br><img src="/images/JavaScript-Review/20200508215909640.png" alt="在这里插入图片描述"><br>这个是在javascript建立之初就存在的特性。 养成规范：所有 的变量定义都放在函数的头部，不要乱放，便于代码维护；<br><img src="/images/JavaScript-Review/2020050822470141.png" alt="在这里插入图片描述"></p><blockquote><p>全局变量</p></blockquote><p><img src="/images/JavaScript-Review/20200508224905458.png" alt="在这里插入图片描述"></p><p>全局对象window<br><img src="/images/JavaScript-Review/20200508225326543.png" alt="在这里插入图片描述"></p><p>alert() 这个函数本身也是一个window的变量；<br><img src="/images/JavaScript-Review/20200508225810801.png" alt="在这里插入图片描述"><br>javascript实际上只有一个全局作用域，任何变量（函数也可以视为变量），假设没有在函数作用范围内找到，就会向外查找，如果在全局作用域都没有找到，就会报错 RefrenceError</p><blockquote><p>规范</p></blockquote><p>由于我们的所有变量都会绑定到window上，。如果不同的js文件，使用了相同的全局变量，就会产生冲突—&gt;如何减少这样的冲突？<br><img src="/images/JavaScript-Review/20200508230620266.png" alt="在这里插入图片描述"><br>把自己的代码全部放入自己定义的唯一空间名字中，降低全局命名冲突问题~<br>jQuery中就是使用的该方法：jQuery.name，简便写法：**$()**</p><blockquote><p>局部作用域</p></blockquote><p><img src="/images/JavaScript-Review/20200508231056855.png" alt="在这里插入图片描述"><br>ES6的let关键字，解决了局部作用域冲突的问题！<br><img src="/images/JavaScript-Review/20200508231207856.png" alt="在这里插入图片描述"><br>建议大家都用let去定义局部作用域的变量；</p><h2 id="4-3、常量"><a href="#4-3、常量" class="headerlink" title="4.3、常量"></a>4.3、常量</h2><p>在ES6之前，怎么定义常量：只有用全部大写字母命名的变量就是常量；建议不要修改这样的值。<br><img src="/images/JavaScript-Review/20200508231525623.png" alt="在这里插入图片描述"><br>在ES6引入了常量关键字 const<br><img src="/images/JavaScript-Review/20200508232049107.png" alt="在这里插入图片描述"></p><h2 id="4-4、方法"><a href="#4-4、方法" class="headerlink" title="4.4、方法"></a>4.4、方法</h2><blockquote><p>定义方法</p></blockquote><p>方法就是把函数放在对象的里面，对象只有两个东西：属性和方法<br><img src="/images/JavaScript-Review/20200508232559873.png" alt="在这里插入图片描述"><br>this.代表什么？拆开上面的代码看看<br><img src="/images/JavaScript-Review/20200508232827102.png" alt="在这里插入图片描述"><br>this是无法指向的，是默认指向调用它的那个对象的；</p><blockquote><p>apply</p></blockquote><p>在js中可以控制this指向<br><img src="/images/JavaScript-Review/image-20201208205004127.png" alt="image-20201208205004127"></p><h1 id="5、内部对象"><a href="#5、内部对象" class="headerlink" title="5、内部对象"></a>5、内部对象</h1><blockquote><p>标准对象</p></blockquote><p><img src="/images/JavaScript-Review/20200508233500524.png" alt="在这里插入图片描述"></p><h2 id="5-1、Date"><a href="#5-1、Date" class="headerlink" title="5.1、Date"></a>5.1、Date</h2><p><strong>基本使用</strong><br><img src="/images/JavaScript-Review/2020050823390552.png" alt="在这里插入图片描述"><br>转换<br><img src="/images/JavaScript-Review/20200508233954136.png" alt="在这里插入图片描述"></p><h2 id="5-2、JSON"><a href="#5-2、JSON" class="headerlink" title="5.2、JSON"></a>5.2、JSON</h2><blockquote><p>JSON是什么</p></blockquote><p><img src="/images/JavaScript-Review/20200508234238700.png" alt="在这里插入图片描述"><br>在javascript中，一切皆为对象，任何js支持的类型都可以用JSON表示<br>格式</p><ul><li>对象都用{}</li><li>数组都用[]</li><li>所有的键值对 都是用key:value</li></ul><p>JSON字符串和js对象转化<br><img src="/images/JavaScript-Review/20200508234804502.png" alt="在这里插入图片描述"><br>很多人搞不清楚，JS对象和JSON的区别</p><p><img src="/images/JavaScript-Review/20200508235017515.png" alt="在这里插入图片描述"></p><h2 id="5-3、AJAX"><a href="#5-3、AJAX" class="headerlink" title="5.3、AJAX"></a>5.3、AJAX</h2><ul><li>原生的js写法 xhr异步请求</li><li>jQuery封装好的方法$(#name).ajax(“”)</li><li>axios请求</li></ul><h1 id="6、面向对象编程"><a href="#6、面向对象编程" class="headerlink" title="6、面向对象编程"></a>6、面向对象编程</h1><blockquote><p>原型对象<br>javascript、java、c#——面向对象；但是javascript有些区别！</p></blockquote><ul><li>类：模板</li><li>对象：具体实例</li></ul><p>在javascript中，需要大家转换一下思维方式！<br>原型：<br><img src="/images/JavaScript-Review/20200509210303742.png" alt="在这里插入图片描述"><br><img src="/images/JavaScript-Review/20200509210627825.png" alt="在这里插入图片描述"></p><blockquote><p>class集继承</p></blockquote><p>class关键字，是在ES6引入的<br>1、定义一个类、属性、方法<br><img src="/images/JavaScript-Review/20200509210756344.png" alt="在这里插入图片描述"><br>2、继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">//ES6之后========================</span></span><br><span class="line"><span class="comment">//定义一个学生的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">hello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoStudent</span> <span class="keyword">extends</span> <span class="title">Student</span></span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">name,grade</span>)</span>&#123;</span><br><span class="line"><span class="built_in">super</span>(name);</span><br><span class="line"><span class="built_in">this</span>.grade = grade;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">myGrade</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">&#x27;我是一名小学生&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Student(<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> xiaohong = <span class="keyword">new</span> XiaoStudent(<span class="string">&quot;xiaohong&quot;</span>,<span class="number">1</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>本质：查看对象原型<br><img src="/images/JavaScript-Review/20200509211811667.png" alt="在这里插入图片描述"></p><blockquote><p>原型链</p></blockquote><p><em>proto</em>:<br><img src="/images/JavaScript-Review/20200509212115371.png" alt="在这里插入图片描述"></p><h1 id="7、操作BOM对象（重点）"><a href="#7、操作BOM对象（重点）" class="headerlink" title="7、操作BOM对象（重点）"></a>7、操作BOM对象（重点）</h1><blockquote><p>浏览器介绍</p></blockquote><p>javascript和浏览器关系？<br>BOM：浏览器对象模型</p><ul><li>IE6~11</li><li>Chrome</li><li>Safari</li><li>FireFox（Linux默认）</li><li>Opera</li></ul><p>三方</p><ul><li>QQ浏览器</li><li>360浏览器</li></ul><blockquote><p>window</p></blockquote><p>window代表浏览器窗口<br><img src="/images/JavaScript-Review/20200509224733766.png" alt="在这里插入图片描述"></p><blockquote><p>Navigator（不建议使用）</p></blockquote><p>Navigator封装了浏览器的信息<br><img src="/images/JavaScript-Review/20200509225010877.png" alt="在这里插入图片描述"><br>大多数时候，我们不会使用navigator对象，因为会被认为修改!<br>不建议使用这些属性来判断和编写代码</p><blockquote><p>screen</p></blockquote><p>代表屏幕尺寸</p><p><img src="/images/JavaScript-Review/20200509225316614.png" alt="在这里插入图片描述"></p><blockquote><p>location(重要)</p></blockquote><p>location代表当前页面的URL信息<br><img src="/images/JavaScript-Review/20200509225614305.png" alt="在这里插入图片描述"></p><blockquote><p>document（内容DOM）</p></blockquote><p>document代表当前的页面，HTML DOM文档树<br><img src="/images/JavaScript-Review/20200509225911170.png" alt="在这里插入图片描述"><br>获取具体的文档树节点<br><img src="/images/JavaScript-Review/20200509225947396.png" alt="在这里插入图片描述"><br>获取cookie<br><img src="/images/JavaScript-Review/20200509230037645.png" alt="在这里插入图片描述"><br>劫持cookie原理<br><a href="http://www.taobao.com/">www.taobao.com</a><br><img src="/images/JavaScript-Review/2020050923025532.png" alt="在这里插入图片描述"><br>服务器端可以设置cookie为httpOnly</p><blockquote><p>history（不建议使用 ）</p></blockquote><p>history代表浏览器的历史记录<br><img src="/images/JavaScript-Review/20200509230639949.png" alt="在这里插入图片描述"></p><h1 id="8、操作DOM对象（重点）"><a href="#8、操作DOM对象（重点）" class="headerlink" title="8、操作DOM对象（重点）"></a>8、操作DOM对象（重点）</h1><p>DOM：文档对象模型</p><blockquote><p>核心</p></blockquote><p>浏览器网页就是一个Dom树形结构！</p><ul><li>更新：更新Dom节点</li><li>遍历Dom节点：得到Dom节点</li><li>删除：删除一个Dom节点</li><li>添加：添加一个新的节点</li></ul><p>要操作一个Dom节点，就必须要先获得这个Dom节点</p><blockquote><p>获得Dom节点</p></blockquote><p><img src="/images/JavaScript-Review/20200509231806822.png" alt="在这里插入图片描述"><br>这是原生代码，之后我们尽量都使用jQuery();</p><blockquote><p>更新节点</p></blockquote><p><img src="/images/JavaScript-Review/20200509232232560.png" alt="在这里插入图片描述"><br>操作文本<br><img src="/images/JavaScript-Review/20200509232256674.png" alt="在这里插入图片描述"><br>操作css<br><img src="/images/JavaScript-Review/20200509232439513.png" alt="在这里插入图片描述"></p><blockquote><p>删除节点</p></blockquote><p>删除节点的步骤：先获取父节点，再通过父节点删除自己<br><img src="/images/JavaScript-Review/20200509232903448.png" alt="在这里插入图片描述"><br>注意：删除多个节点的时候，children是在时刻变化的，删除节点的时候一定要注意。</p><blockquote><p>插入节点</p></blockquote><p>我们获得了某个Dom节点，假设这个dom节点是空的，我们通过innerHTML就可以增加一个元素了，但是这个Dom节点已经存在元素了，我们就不能这么干了！会产生覆盖</p><p>追加<br><img src="/images/JavaScript-Review/20200509233556254.png"></p><p>效果：<br><img src="/images/JavaScript-Review/2020050923363290.png" alt="在这里插入图片描述"></p><blockquote><p>创建一个新的标签</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> js = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;js&#x27;</span>);<span class="comment">//已经存在的节点</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;list&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//通过JS创建一个新的节点</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> newP = <span class="built_in">document</span>.creatElement(<span class="string">&#x27;p&#x27;</span>);<span class="comment">//创建一个p标签</span></span></span><br><span class="line"><span class="javascript">    newP.id = <span class="string">&#x27;newP&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    newP.innerText = <span class="string">&#x27;Hello,Kuangshen&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//创建一个标签节点</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> myScript = <span class="built_in">document</span>.creatElement(<span class="string">&#x27;script&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    myScript.setAttribute(<span class="string">&#x27;type&#x27;</span>,<span class="string">&#x27;text/javascript&#x27;</span>);</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="comment">//可以创建一个style标签</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> myStyle = <span class="built_in">document</span>.creatElement(<span class="string">&#x27;style&#x27;</span>);<span class="comment">//创建了一个空style标签</span></span></span><br><span class="line"><span class="javascript">    myStyle.setAttribute(<span class="string">&#x27;type&#x27;</span>,<span class="string">&#x27;text/css&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    myStyle.innerHTML = <span class="string">&#x27;body&#123;background-color:chartreuse;&#125;&#x27;</span>;<span class="comment">//设置标签内容</span></span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementByTagName(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>].appendChild(myStyle);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>insertBefore</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ee = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;ee&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> js = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;js&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;list&#x27;</span>);</span><br><span class="line"><span class="comment">//要包含的节点.insertBefore(newNode,targetNode)</span></span><br><span class="line">list.insertBefore(js,ee);</span><br></pre></td></tr></table></figure><h1 id="9、操作表单"><a href="#9、操作表单" class="headerlink" title="9、操作表单"></a>9、操作表单</h1><blockquote><p>表单是什么？form—–DOM树</p></blockquote><ul><li>文本框—-text</li><li>下拉框—-select</li><li>单选框—-radio</li><li>多选框—-checkbox</li><li>隐藏域—-hidden</li><li>密码框—-password</li><li>…</li></ul><p>表单的目的提交信息</p><blockquote><p>获得要提交的信息</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span> = <span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span> = <span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--多选框的值就是定义好的value--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;radio&quot;</span> <span class="attr">name</span> = <span class="string">&quot;sex&quot;</span> <span class="attr">value</span> = <span class="string">&quot;man&quot;</span> <span class="attr">id</span> = <span class="string">&quot;boy&quot;</span>/&gt;</span>男</span><br><span class="line">           <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;radio&quot;</span> <span class="attr">name</span> = <span class="string">&quot;sex&quot;</span> <span class="attr">value</span> = <span class="string">&quot;woman&quot;</span> <span class="attr">id</span> = <span class="string">&quot;girl&quot;</span>/&gt;</span>女</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> input_text = <span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> boy_radio = <span class="built_in">document</span>.getElementById(<span class="string">&quot;boy&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> girl_radio = <span class="built_in">document</span>.getElementById(<span class="string">&quot;girl&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//得到输入框的值</span></span></span><br><span class="line">        input_text.value </span><br><span class="line"><span class="javascript">        <span class="comment">//修改输入框的值</span></span></span><br><span class="line"><span class="javascript">        input_text.value  = <span class="string">&quot;value&quot;</span>;</span></span><br><span class="line">        </span><br><span class="line"><span class="javascript">        <span class="comment">//对于单选框，多选框等等固定的值，boy_radio.value只能取到当前的值</span></span></span><br><span class="line"><span class="javascript">        boy_radio.checked;<span class="comment">//查看返回的结果，是否为true，如果为true，则被选中。</span></span></span><br><span class="line"><span class="javascript">        girl_radio.checked = <span class="literal">true</span>;<span class="comment">//赋值</span></span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>提交表单。md5加密密码，表单优化</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span> = <span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span> = <span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--MD5加密工具类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&quot;https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--表单绑定提交事件</span></span><br><span class="line"><span class="comment">οnsubmit= 绑定一个提交检测的函数，true，false</span></span><br><span class="line"><span class="comment">将这个结果返回给表单，使用onsubmit接收</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span> = <span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">method</span> = <span class="string">&quot;post&quot;</span> <span class="attr">onsubmit</span> = <span class="string">&quot;return aaa()&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span> = <span class="string">&quot;username&quot;</span> <span class="attr">name</span> = <span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--没有name的输入框，就不会进行提交--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span> = <span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;hidden&quot;</span> <span class="attr">id</span> = <span class="string">&quot;md5-password&quot;</span> <span class="attr">name</span> = <span class="string">&quot;password&quot;</span>&gt;</span> </span><br><span class="line">            </span><br><span class="line">            <span class="comment">&lt;!--绑定事件 onclick 被点击--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span> = <span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">                alert(1);</span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> username = <span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> pwd = <span class="built_in">document</span>.getElementById(<span class="string">&quot;password&quot;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> md5pwd = <span class="built_in">document</span>.getElementById(<span class="string">&quot;md5-password&quot;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="comment">//pwd.value = md5(pwd,value);</span></span></span><br><span class="line">                md5pwd.value = mad5(pwd.value);</span><br><span class="line"><span class="javascript">                <span class="comment">//可以校验判断表单内容，true就是通过提交，false就是阻止提交</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="10、jQuery"><a href="#10、jQuery" class="headerlink" title="10、jQuery"></a>10、jQuery</h1><p>javaScript和jQuery的关系？</p><p>jQuery库，里面存在大量的JavaScript函数</p><blockquote><p>获取jQuery</p></blockquote><p><img src="/images/JavaScript-Review/2020051021540896.png" alt="在这里插入图片描述"></p><p><strong>公式：$(selector).action()</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span> = <span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span> = <span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/jquery-3.4.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span> = <span class="string">&quot;test-jquery&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//选择器就是css选择器</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&#x27;#test-jquery&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&#x27;hello,jQuery!&#x27;</span>);</span></span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>选择器</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原生js，选择器少，麻烦不好记</span></span><br><span class="line"><span class="comment">//标签</span></span><br><span class="line"><span class="built_in">document</span>.getElementByTagName();</span><br><span class="line"><span class="comment">//id</span></span><br><span class="line"><span class="built_in">document</span>.getElementById();</span><br><span class="line"><span class="comment">//class</span></span><br><span class="line"><span class="built_in">document</span>.getElementByClassName();</span><br><span class="line"></span><br><span class="line"><span class="comment">//jQuery css中的选择器它全部都能用！</span></span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).click();<span class="comment">//标签选择器</span></span><br><span class="line">$(<span class="string">&#x27;#id1&#x27;</span>).click();<span class="comment">//id选择器</span></span><br><span class="line">$(<span class="string">&#x27;.class1&#x27;</span>).click;<span class="comment">//class选择器</span></span><br></pre></td></tr></table></figure><p>文档工具站：<a href="http://jquery.cuishifeng.cn/">http://jquery.cuishifeng.cn/</a></p><blockquote><p>事件</p></blockquote><p>鼠标事件、键盘事件，其他事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">mousedown()(jQuery)----按下</span><br><span class="line">mouseenter()(jQuery)</span><br><span class="line">mouseleave()(jQuery)</span><br><span class="line">mousemove()(jQuery)----移动</span><br><span class="line">mouseout()(jQuery)</span><br><span class="line">mouseover()(jQuery)</span><br><span class="line">mouseup()(jQuery)</span><br><span class="line"><span class="number">1234567</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang = <span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset = <span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">        &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">        &lt;script src=<span class="string">&quot;lib/jquery-3.4.1.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">            #divMove&#123;</span><br><span class="line">                width:500px;</span><br><span class="line">                height:500px;</span><br><span class="line">                border:1px solid red;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;!--要求：获取鼠标当前的一个坐标--&gt;</span><br><span class="line">        mouse：&lt;span id = <span class="string">&quot;mouseMove&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">        &lt;div id = <span class="string">&quot;divMove&quot;</span>&gt;</span><br><span class="line">            在这里移动鼠标试试</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">        <span class="comment">//当网页元素加载完毕之后，响应事件</span></span><br><span class="line">            <span class="comment">//$(document).ready(function()&#123;&#125;)</span></span><br><span class="line">            $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                $(<span class="string">&#x27;#divMove&#x27;</span>).mousemove(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">                    $(<span class="string">&#x27;#mouseMove&#x27;</span>).text(<span class="string">&#x27;x:&#x27;</span>+e.pageX+<span class="string">&quot;y:&quot;</span>+e.pageY)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>操作DOM</p></blockquote><p>节点文本操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#test-ul li[name=python]&#x27;</span>).text();<span class="comment">//获得值</span></span><br><span class="line">$(<span class="string">&#x27;#test-ul li[name=python]&#x27;</span>).text(<span class="string">&#x27;设置值&#x27;</span>);<span class="comment">//设置值</span></span><br><span class="line">$(<span class="string">&#x27;#test-ul&#x27;</span>).html();<span class="comment">//获得值</span></span><br><span class="line">$(<span class="string">&#x27;#test-ul&#x27;</span>).html(<span class="string">&#x27;&lt;strong&gt;123&lt;/strong&gt;&#x27;</span>);<span class="comment">//设置值</span></span><br></pre></td></tr></table></figure><p>CSS的操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#test-ul li[name=python]&#x27;</span>).css(&#123;<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><p>元素的显示和隐藏，：本质display:none</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#test-ul li[name=python]&#x27;</span>).show();</span><br><span class="line">$(<span class="string">&#x27;#test-ul li[name=python]&#x27;</span>).hide();</span><br><span class="line">$(<span class="string">&#x27;#test-ul li[name=python]&#x27;</span>).toggle();<span class="comment">//切换</span></span><br></pre></td></tr></table></figure><p>娱乐测试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).width()</span><br><span class="line">$(<span class="built_in">window</span>).height()</span><br></pre></td></tr></table></figure><p>未来ajax()；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#form&#x27;</span>).ajax()</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;<span class="attr">url</span>:<span class="string">&quot;test.html&quot;</span>,<span class="attr">context</span>:<span class="built_in">document</span>.body,<span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="built_in">this</span>).addClass(<span class="string">&quot;done&quot;</span>);</span><br><span class="line">&#125;&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>小技巧</p></blockquote><p>1、如何巩固JS（看jQuery源码，看游戏源码！）</p><p>2、巩固HTML、CSS（扒网站，全部down下来，然后对应修改看效果~） </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0、前端知识体系&quot;&gt;&lt;a href=&quot;#0、前端知识体系&quot; class=&quot;headerlink&quot; title=&quot;0、前端知识体系&quot;&gt;&lt;/a&gt;0、前端知识体系&lt;/h1&gt;&lt;p&gt;想要成为真正的“互联网Java全栈工程师”还有很长的一段路要走，其中前端是绕不开的一门必修课</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://example.com/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Git复习</title>
    <link href="http://example.com/2021/04/01/Git-Review/"/>
    <id>http://example.com/2021/04/01/Git-Review/</id>
    <published>2021-04-01T09:04:17.000Z</published>
    <updated>2021-04-09T13:18:52.541Z</updated>
    
    <content type="html"><![CDATA[<p>Git的本质：<strong>版本控制！</strong> <strong>版本控制！</strong> <strong>版本控制！</strong></p><p>什么是版本控制<br>版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p><ul><li><p>实现跨区域多人协同开发</p></li><li><p>追踪和记载一个或者多个文件的历史记录</p></li><li><p>组织和保护你的源代码和文档</p></li><li><p>统计工作量</p></li><li><p>并行开发、提高开发效率</p></li><li><p>跟踪记录整个软件的开发过程</p></li><li><p>减轻开发人员的负担，节省时间，同时降低人为错误</p></li></ul><p>简单说就是用于管理多人协同开发项目的技术。</p><p>没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题。</p><p>无论是工作还是学习，或者是自己做笔记，都经历过这样一个阶段！我们就迫切需要一个版本控制工具！<br>多人开发就必须要使用版本控制！</p><h2 id="常见的版本控制工具"><a href="#常见的版本控制工具" class="headerlink" title="常见的版本控制工具"></a>常见的版本控制工具</h2><p>我们学习的东西，一定是当下最流行的！</p><p>主流的版本控制器有如下这些：</p><p>Git</p><p>SVN（Subversion）</p><p>CVS（Concurrent Versions System）</p><p>VSS（Micorosoft Visual SourceSafe）</p><p>TFS（Team Foundation Server）</p><p>Visual Studio Online</p><p>版本控制产品非常的多（Perforce、Rational ClearCase、RCS（GNU Revision Control System）、Serena Dimention、SVK、BitKeeper、Monotone、Bazaar、Mercurial、SourceGear Vault），现在影响力最大且使用最广泛的是Git与SVN</p><p>版本控制分类<br>1、本地版本控制</p><p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如RCS。</p><p><img src="/images/GitReview/image-20210407170540287.png" alt="image-20210407170540287"></p><p><strong>2、集中版本控制  SVN</strong></p><p>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改</p><p><img src="/images/GitReview/image-20210407170631853.png" alt="image-20210407170631853"></p><p>所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：SVN、CVS、VSS</p><p>3、分布式版本控制 Git</p><p>每个人都拥有全部的代码！安全隐患！</p><p>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时push到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。</p><p>不会因为服务器损坏或者网络问题，造成不能工作的情况！<br><img src="/images/GitReview/image-20210407170701912.png" alt="image-20210407170701912"></p><h2 id="Git与SVN的主要区别"><a href="#Git与SVN的主要区别" class="headerlink" title="Git与SVN的主要区别"></a>Git与SVN的主要区别</h2><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。</p><p>Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网了，因为版本都在自己电脑上。协同的方法是这样的：比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。Git可以直接看到更新了哪些代码和文件！</p><p>Git是目前世界上最先进的分布式版本控制系统。</p><p>聊聊Git的历史</p><p>同生活中的许多伟大事物一样，Git 诞生于一个极富纷争大举创新的年代。</p><p>Linux 内核开源项目有着为数众广的参与者。绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上(1991－2002年间)。到 2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码。</p><p>Linux社区中存在很多的大佬！破解研究 BitKeeper ！</p><p>到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper 的权力。这就迫使 Linux 开源社区(特别是 Linux 的缔造者 Linus Torvalds)基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。（2周左右！） 也就是后来的 Git！</p><p>Git是目前世界上最先进的分布式版本控制系统。</p><p>Git是免费、开源的，最初Git是为辅助 Linux 内核开发的，来替代 BitKeeper！<br><img src="/images/GitReview/image-20210407170736518.png" alt="image-20210407170736518"></p><p>Linux和Git之父李纳斯·托沃兹（Linus Benedic Torvalds）1969、芬兰</p><p>Git环境配置</p><p>软件下载<br>打开 [git官网] <a href="https://git-scm.com/%EF%BC%8C%E4%B8%8B%E8%BD%BDgit%E5%AF%B9%E5%BA%94%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%88%E6%9C%AC%E3%80%82">https://git-scm.com/，下载git对应操作系统的版本。</a></p><p>所有东西下载慢的话就可以去找镜像！</p><p>官网下载太慢，我们可以使用淘宝镜像下载：<a href="http://npm.taobao.org/mirrors/git-for-windows/">http://npm.taobao.org/mirrors/git-for-windows/</a><br><img src="/images/GitReview/image-20210407170824516.png" alt="image-20210407170824516"></p><p>下载对应的版本即可安装！</p><p>安装：无脑下一步即可！安装完毕就可以使用了！</p><h2 id="启动Git"><a href="#启动Git" class="headerlink" title="启动Git"></a>启动Git</h2><p>安装成功后在开始菜单中会有Git项，菜单下有3个程序：任意文件夹下右键也可以看到对应的程序！</p><p><img src="/images/GitReview/image-20210407170850496.png" alt="image-20210407170850496"></p><p>Git Bash：Unix与Linux风格的命令行，使用最多，推荐最多</p><p>Git CMD：Windows风格的命令行</p><p>Git GUI：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令</p><p>常用的Linux命令<br>平时一定要多使用这些基础的命令！</p><p>1）cd : 改变目录。</p><p>2）cd . . 回退到上一个目录，直接cd进入默认目录</p><p>3）pwd : 显示当前所在的目录路径。</p><p>4）ls(ll):  都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细。</p><p>5）touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。</p><p>6）rm:  删除一个文件, rm index.js 就会把index.js文件删除。</p><p>7）mkdir:  新建一个目录,就是新建一个文件夹。</p><p>8）rm -r :  删除一个文件夹, rm -r src 删除src目录</p><blockquote><p> rm -rf /  切勿在Linux中尝试！删除电脑中全部文件！</p></blockquote><p>9）mv 移动文件, mv index.html src index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下。</p><p>10）reset 重新初始化终端/清屏。</p><p>11）clear 清屏。</p><p>12）history 查看命令历史。</p><p>13）help 帮助。</p><p>14）exit 退出。</p><p>15）#表示注释</p><p>Git配置<br>所有的配置文件，其实都保存在本地！</p><p>查看配置 git config -l<br><img src="/images/GitReview/image-20210407171056284.png" alt="image-20210407171056284"></p><p>查看不同级别的配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看系统config</span></span><br><span class="line">git config --system --list</span><br><span class="line">　　</span><br><span class="line"><span class="comment">#查看当前用户（global）配置</span></span><br><span class="line">git config --global  --list</span><br></pre></td></tr></table></figure><p>Git相关的配置文件：</p><p>1）Git\etc\gitconfig  ：Git 安装目录下的 gitconfig     –system 系统级</p><p>2）C:\Users\Administrator\ .gitconfig    只适用于当前登录用户的配置  –global 全局</p><h2 id="设置用户名与邮箱（用户标识，必要）"><a href="#设置用户名与邮箱（用户标识，必要）" class="headerlink" title="设置用户名与邮箱（用户标识，必要）"></a>设置用户名与邮箱（用户标识，必要）</h2><p>当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;kuangshen&quot;</span>  <span class="comment">#名称</span></span><br><span class="line">git config --global user.email 24736743@qq.com   <span class="comment">#邮箱</span></span><br></pre></td></tr></table></figure><p>然后通过下面命令查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git confit --global --list</span><br></pre></td></tr></table></figure><p>只需要做一次这个设置，如果你传递了–global 选项，因为Git将总是会使用该信息来处理你在系统中所做的一切操作。如果你希望在一个特定的项目中使用不同的名称或e-mail地址，你可以在该项目中运行该命令而不要–global选项。总之–global为全局配置，不加为某个项目的特定配置。</p><p><img src="/images/GitReview/image-20210407171252054.png" alt="image-20210407171252054"></p><h2 id="Git基本理论：三个区域（重要）"><a href="#Git基本理论：三个区域（重要）" class="headerlink" title="Git基本理论：三个区域（重要）"></a>Git基本理论：三个区域（重要）</h2><p>Git本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage/Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：<br><img src="/images/GitReview/image-20210407171525957.png" alt="image-20210407171525957"></p><p>Workspace：工作区，就是你平时存放项目代码的地方</p><ul><li><p>Index / Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</p></li><li><p>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</p></li><li><p>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</p></li><li><p>本地的三个区域确切的说应该是git仓库中HEAD指向的版本：<br><img src="/images/GitReview/image-20210407171613941.png" alt="image-20210407171613941"></p></li></ul><ul><li><p>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。</p></li><li><p>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。</p></li><li><p>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。</p></li><li><p>Index/Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</p></li><li><p>Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。</p></li><li><p>Stash：隐藏，是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。</p></li></ul><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>git的工作流程一般是这样的：</p><p>１、在工作目录中添加、修改文件；</p><p>２、将需要进行版本管理的文件放入暂存区域；</p><p>３、将暂存区域的文件提交到git仓库。</p><p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)<br><img src="/images/GitReview/image-20210407171732420.png" alt="image-20210407171732420"></p><p>Git项目搭建</p><h2 id="创建工作目录与常用指令"><a href="#创建工作目录与常用指令" class="headerlink" title="创建工作目录与常用指令"></a>创建工作目录与常用指令</h2><p>工作目录（WorkSpace)一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</p><p>日常使用只要记住下图6个命令：</p><p><img src="/images/GitReview/image-20210407171939377.png" alt="image-20210407171939377"></p><h2 id="本地仓库搭建"><a href="#本地仓库搭建" class="headerlink" title="本地仓库搭建"></a>本地仓库搭建</h2><p>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库。</p><p>1、创建全新的仓库，需要用GIT管理的项目的根目录执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure><p>2、执行后可以看到，仅仅在项目目录多出了一个.git目录，关于版本等的所有信息都在这个目录里面。</p><h2 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h2><p>1、另一种方式是克隆远程目录，由于是将远程服务器上的仓库完全镜像一份至本地！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆一个项目和它的整个代码历史(版本信息)</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]  <span class="comment"># https://github.com/qsbit/ShoppingCart</span></span><br></pre></td></tr></table></figure><p>2、去 gitee 或者 github 上克隆一个测试！</p><p>Git文件操作</p><h3 id="文件的四种状态"><a href="#文件的四种状态" class="headerlink" title="文件的四种状态"></a>文件的四种状态</h3><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p><ul><li><p>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</p></li><li><p>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</p></li><li><p>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !</p></li><li><p>Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</p></li></ul><h3 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h3><p>上面说文件有4种状态，通过如下命令可以查看到文件的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看指定文件状态</span></span><br><span class="line">git status [filename]</span><br><span class="line"> </span><br><span class="line"><span class="comment">#查看所有文件状态</span></span><br><span class="line">git status</span><br><span class="line"> </span><br><span class="line"><span class="comment"># git add .                  添加所有文件到暂存区</span></span><br><span class="line"><span class="comment"># git commit -m &quot;消息内容&quot;    提交暂存区中的内容到本地仓库 -m 提交信息</span></span><br></pre></td></tr></table></figure><p>忽略文件<br>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p><p>在主目录下建立”.gitignore”文件，此文件有如下规则：</p><p>1、忽略文件中的空行或以井号（#）开始的行将会被忽略。</p><p>2、可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</p><p>3、如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</p><p>4、如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</p><p>5、如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为注释</span></span><br><span class="line">*.txt        <span class="comment">#忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span></span><br><span class="line">!lib.txt     <span class="comment">#但lib.txt除外</span></span><br><span class="line">/temp        <span class="comment">#仅忽略项目根目录下的TODO文件,不包括其它目录temp</span></span><br><span class="line">build/       <span class="comment">#忽略build/目录下的所有文件</span></span><br><span class="line">doc/*.txt    <span class="comment">#会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span></span><br></pre></td></tr></table></figure><p>使用码云</p><p> <strong>github 是有墙的，比较慢，在国内的话，我们一般使用 gitee ，公司中有时候会搭建自己的gitlab服务器</strong></p><h2 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h2><p>分支在GIT中相对较难，分支就是科幻电影里面的平行宇宙，如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，我们就需要处理一些问题了！<img src="/images/GitReview/image-20210407172415792.png" alt="image-20210407172415792"></p><p><img src="/images/GitReview/image-20210407172427611.png" alt="image-20210407172427611"></p><p>git分支中常用指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">git branch</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">git branch [branch-name]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">git checkout -b [branch]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><h2 id="新建Git并上传步骤"><a href="#新建Git并上传步骤" class="headerlink" title="新建Git并上传步骤"></a>新建Git并上传步骤</h2><p>首先在github上创建一个新的仓库，然后git clone到本地</p><p><img src="/images/GitReview/image-20210407173037793.png" alt="image-20210407173037793"></p><p>在本地合适位置修改完代码后，右键并选择Git bash here：</p><p>依次进行如下操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">&#x27;update&#x27;</span></span><br><span class="line"></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p><img src="/images/GitReview/image-20210407173432545.png" alt="image-20210407173432545"></p><p>之后输入并登录你的Github账号即可（可以配置一下公钥，就不需要每次登陆了）：</p><p><img src="/images/GitReview/image-20210407173515678.png" alt="image-20210407173515678"></p><p>最后，显示如下图所示，则为成功上传！打开github即可查看了。</p><p><img src="/images/GitReview/image-20210407173739195.png" alt="image-20210407173739195"></p><p><img src="/images/GitReview/image-20210407173801227.png" alt="image-20210407173801227"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Git的本质：&lt;strong&gt;版本控制！&lt;/strong&gt; &lt;strong&gt;版本控制！&lt;/strong&gt; &lt;strong&gt;版本控制！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;什么是版本控制&lt;br&gt;版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目</summary>
      
    
    
    
    <category term="Git" scheme="http://example.com/categories/Git/"/>
    
    
    <category term="Git" scheme="http://example.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>那就做个孩子吧</title>
    <link href="http://example.com/2021/03/27/Perception-01/"/>
    <id>http://example.com/2021/03/27/Perception-01/</id>
    <published>2021-03-27T03:08:44.000Z</published>
    <updated>2021-04-09T13:17:41.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="你怕长大吗？"><a href="#你怕长大吗？" class="headerlink" title="你怕长大吗？"></a>你怕长大吗？</h1><p>&nbsp;&nbsp; 可是小时候你是不是有常常幻想自己长大呢，做自己喜欢的事儿，不被管束；不用呆在父母身边……可是当你长大了你却又怀念小时候。<strong>但你总要历经长大。</strong></p><blockquote><p><strong>长大了，你就必须懂得什么是责任，</strong><br><strong>长大了，你就必须扛起父母肩上的担子。</strong><br><strong>因为这世界太多不在乎或在乎。</strong></p></blockquote><ul><li><p>小时候，希望自己快点长大，长大了，却发现遗失了童年;单身时，开始羡慕恋人的甜蜜，恋爱时，怀念单身时的自由。很多事物，没有得到时总觉得美好，得到之后才开始明白：我们得到的同时也是在失去。</p></li><li><p>越长大，时间越好像手中抓的紧紧的细沙，流逝的越快。为何总是如此疲惫，一个朝气蓬勃的少年难道还未曾绽放就要衰落了？</p></li></ul><p>&nbsp;&nbsp; 记得高中最后时期的你，满腔热血考大学，凌晨十二点一点睡觉第二天照样天不亮起床背书做题，不知疲惫，乐此不疲，因为算对一道数学大题而兴奋不已，因为画对一幅受力图做出物理大题激动不已，渐渐地，我都忘了那是什么样的感觉，用兴奋激动怕是也不能形容。</p><p>&nbsp;&nbsp; 因为跑完十公里整个人都是虚脱、疲惫、无欲无求的时候，又觉得世界明朗了，即使天空是阴雨绵绵，即使有太多的不顺心不如意在心中堆积，在那种情形下心里也是晴空万里。</p><p>&nbsp;&nbsp; 这即将过去的三年大学期间，和室友在宿舍或者和班级同学在教学楼打打闹闹、侃天侃地，放学后也是一起游荡在回宿舍或者去餐厅的路上，各自分享着彼此的小秘密或是什么搞笑的事又或是突发奇想的雄心壮志，又会相互称兄道弟，自封长辈；和女朋友相挽着胳膊在师大校园压马路、分享美食、畅想未来 ，在林荫道上骑着单车带着她，想象着微风拂过她那垂在耳朵旁几丝发梢的感觉….偶尔互相惹对方生气，或者相互发泄解气，她闹小脾气，我偶尔也会安慰到自己急眼，又反过来被安慰。我真不想长大！</p><p>&nbsp;&nbsp; 小时候真好，羡慕小孩子。可以相信世界上真有魔法，真的可以瞬间转移，真的有快乐星球，越长大怎么越让我变得现实，只相信金钱，相信利益，有时还想相信魔法，但马上回过神，怕自己是不是有神经病，20岁刚冒尖的人了，还这么幼稚？什么是长大?怎么就长大了?谁施了魔法？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;    <strong>我真不想长大，因为那没什么好处。</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;    <strong>我真的好想长大，因为我还是个孩子！</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;你怕长大吗？&quot;&gt;&lt;a href=&quot;#你怕长大吗？&quot; class=&quot;headerlink&quot; title=&quot;你怕长大吗？&quot;&gt;&lt;/a&gt;你怕长大吗？&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp; 可是小时候你是不是有常常幻想自己长大呢，做自己喜欢的事儿，不被管束；不用呆在父母身</summary>
      
    
    
    
    <category term="随笔感悟" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94%E6%84%9F%E6%82%9F/"/>
    
    
    <category term="Perception" scheme="http://example.com/tags/Perception/"/>
    
  </entry>
  
  <entry>
    <title>前端鉴权的方式</title>
    <link href="http://example.com/2021/03/23/FE-Authentication/"/>
    <id>http://example.com/2021/03/23/FE-Authentication/</id>
    <published>2021-03-23T08:13:07.000Z</published>
    <updated>2021-03-23T08:17:50.733Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端鉴权"><a href="#前端鉴权" class="headerlink" title="前端鉴权"></a>前端鉴权</h2><hr/><p>保持用户的登录状态，在前端开发中也是一门不小的学问，涉及到的知识覆盖前后端。</p><p>目前前端用来处理用户鉴权信息的方式，大题看来有两种。</p><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a><strong>cookie</strong></h3><p> 说到 cookie 大家都会想起饼干，在前端的领域里 cookie 用于存储变量。在前端请求网络资源或是后端接口时，请求头 Headers 里都会带上当前域下的 cookie 信息，服务端通过检测请求头内的 cookie 判断当前用户的登录状态是否过期，或是 cookie 是否错误，来判断当前用户是否能成功返回响应。</p><p>把 cookie 信息种到当前域名这个过程不会复杂，无论是 Java、PHP、Node 等服务端语言去编写接口，都有相应的种 cookie 的 API。这个过程大概是，前端请求登录接口，后端验证用户名和密码是否正确。在正确的情况下服务端 Set-Cookie ，参数大致是域名、有效时间、secure (是否 HTTPS ) 等，种下 cookie 之后，浏览器就会在指定域下添加相应的 cookie 信息。</p><h3 id="token"><a href="#token" class="headerlink" title="token"></a><strong>token</strong></h3><p>有些同学会有这样的疑问，如果没有浏览器环境，那就没有种 cookie 的环境，用户状态如何维护？</p><p>这里就引出 Token 的概念，可以这样理解它：Token 是服务器生成的一串随机字符串或者一个 json 串，用于客户端进行资源请求的令牌。</p><p>当我们调用登录接口之后，服务端返回给前端一个 Token ，之后存储 Token 到本地环境，每次前端请求接口的时候，都需要在请求头里带上 Token 信息，并且 Token 可以在服务端设置过期时间。Token 过期之后，前端在请求失败回调 406（前后端协商好错误码）之后重新跳转到登录界面进行鉴权。</p><blockquote><p>若是考虑到之后会制作小程序和原生 APP ，建议使用 Token 的形式进行用户信息鉴权，方便以后代码进行二次开发。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前端鉴权&quot;&gt;&lt;a href=&quot;#前端鉴权&quot; class=&quot;headerlink&quot; title=&quot;前端鉴权&quot;&gt;&lt;/a&gt;前端鉴权&lt;/h2&gt;&lt;hr/&gt;

&lt;p&gt;保持用户的登录状态，在前端开发中也是一门不小的学问，涉及到的知识覆盖前后端。&lt;/p&gt;
&lt;p&gt;目前前端用来处理用</summary>
      
    
    
    
    <category term="资源分享" scheme="http://example.com/categories/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="鉴权" scheme="http://example.com/tags/%E9%89%B4%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>优秀资源链接分享</title>
    <link href="http://example.com/2021/03/22/shareLinks/"/>
    <id>http://example.com/2021/03/22/shareLinks/</id>
    <published>2021-03-22T12:46:45.000Z</published>
    <updated>2021-03-22T15:17:29.354Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实用链接"><a href="#实用链接" class="headerlink" title="实用链接"></a>实用链接</h2><ol><li>全国图书馆参考咨询联盟：<a href="http://www.ucdrs.superlib.net/">http://www.ucdrs.superlib.net/</a></li><li>科学文库：<a href="http://book.sciencereading.cn/shop/main/Login/shopFrame.do">http://book.sciencereading.cn/shop/main/Login/shopFrame.do</a></li><li>photopea： <a href="https://www.photopea.com/">https://www.photopea.com/</a></li><li>秘塔写作猫：<a href="https://xiezuocat.com/#/">https://xiezuocat.com/#/</a></li><li>Grammarly： <a href="https://app.grammarly.com/">https://app.grammarly.com/</a></li><li>PDF转换：<a href="http://www.hipdf.cn/brs">www.hipdf.cn/brs</a></li><li>桌面端万兴PDF专家：<a href="https://pdf.wondershare.cn/landing_aini.html?utm_source=bilirs">https://pdf.wondershare.cn/landing_aini.html?utm_source=bilirs</a></li><li>photopea： <a href="https://www.photopea.com/">https://www.photopea.com/</a></li><li>能不能好好说话：<a href="https://lab.magiconch.com/nbnhhsh/">https://lab.magiconch.com/nbnhhsh/</a></li><li>视频网站会员号：<a href="https://www.fenxiangdashi.com/">https://www.fenxiangdashi.com/</a></li><li>临时邮箱：<a href="https://temp-mail.org/zh/">https://temp-mail.org/zh/</a></li><li>临时验证码：<a href="https://www.materialtools.com/?page=1">https://www.materialtools.com/?page=1</a></li></ol><h2 id="照片"><a href="#照片" class="headerlink" title="照片"></a>照片</h2><ol><li>pixabay：<a href="https://pixabay.com/zh/">https://pixabay.com/zh/</a></li><li>Unsplash：<a href="https://unsplash.com/">https://unsplash.com/</a></li><li>Pexels：<a href="https://www.pexels.com/zh-cn/">https://www.pexels.com/zh-cn/</a></li><li>Foodiesfeed ：<a href="https://www.foodiesfeed.com/">https://www.foodiesfeed.com</a></li><li>CC零图片网：<a href="https://cc0.cn/">https://cc0.cn/</a></li><li>Logo神器：<a href="https://www.logosc.cn/so/">https://www.logosc.cn/so/</a></li><li>免费可商用的图片素材库（使用方便）：<a href="https://wunderstock.com/">https://wunderstock.com/</a></li><li>和wunderstock一样简洁（访问速度变快）<a href="https://unsplash.com/">https://unsplash.com/</a></li><li>平面抽象的背景底纹素材（覆盖无要求）<a href="https://www.hituyu.com/">https://www.hituyu.com/</a></li><li>矢量图、免扣PNG、PSD等多种格式（国内图库速度快！不可商用）<a href="https://www.lanrentuku.com/">https://www.lanrentuku.com/</a></li><li>同上提供优质图片素材且大部分素材可以免费下载可商用（某些表明素材来源）<a href="https://www.freepik.com/">https://www.freepik.com/</a></li><li>coolors分为调色盘和探索两功能（记得填坑）完成大部分设计配色步骤<a href="https://coolors.co/">https://coolors.co/</a></li><li>比coolors更强大，支持中文，选择不同色彩搭配算法，智能识别<a href="https://color.adobe.com/zh/create">https://color.adobe.com/zh/create</a></li><li>字体资源网站（使用字体必须下载客户端，与Adobe、Office梦幻联动）<a href="https://www.hellofont.cn/">https://www.hellofont.cn/</a></li><li>dafont，更多西文免费字体，质量高，全部免费（但是没说全部商用）<a href="https://www.dafont.com/">https://www.dafont.com/</a></li></ol><h2 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h2><ol><li>iconfont：<a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></li><li>iconstore：<a href="https://iconstore.co/">https://iconstore.co/</a></li><li>unDraw：<a href="https://undraw.co/illustrations">https://undraw.co/illustrations</a></li><li>ICONFINDER：<a href="https://www.iconfinder.com/">https://www.iconfinder.com/</a></li><li>ICONS8：<a href="https://icons8.com/">https://icons8.com/</a></li></ol><h2 id="矢量图-免抠PNG-PSD模板"><a href="#矢量图-免抠PNG-PSD模板" class="headerlink" title="矢量图/免抠PNG/PSD模板"></a>矢量图/免抠PNG/PSD模板</h2><ol><li>freepik：<a href="https://www.freepik.com/">https://www.freepik.com/</a></li><li>free-PSD-templates：<a href="https://free-psd-templates.com/">https://free-psd-templates.com/</a></li><li>365psd：<a href="https://365psd.com/">https://365psd.com/</a></li><li>pngimage：<a href="http://pngimg.com/">http://pngimg.com/</a></li><li>CLEANPNG：<a href="https://www.cleanpng.com/">https://www.cleanpng.com/</a></li></ol><h2 id="壁纸"><a href="#壁纸" class="headerlink" title="壁纸"></a>壁纸</h2><ol><li>wallhaven：<a href="https://wallhaven.cc/">https://wallhaven.cc/</a></li><li>Wallpaper Abyss：<a href="https://wall.alphacoders.com/">https://wall.alphacoders.com/</a></li><li>极简壁纸：<a href="https://bz.zzzmh.cn/%E2%80%8B">https://bz.zzzmh.cn/​</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实用链接&quot;&gt;&lt;a href=&quot;#实用链接&quot; class=&quot;headerlink&quot; title=&quot;实用链接&quot;&gt;&lt;/a&gt;实用链接&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;全国图书馆参考咨询联盟：&lt;a href=&quot;http://www.ucdrs.superlib.net/&quot;&gt;htt</summary>
      
    
    
    
    <category term="资源分享" scheme="http://example.com/categories/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="Share" scheme="http://example.com/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>Less--CSS预处理工具</title>
    <link href="http://example.com/2021/03/20/Css-Review-Less/"/>
    <id>http://example.com/2021/03/20/Css-Review-Less/</id>
    <published>2021-03-20T10:16:34.000Z</published>
    <updated>2021-04-08T12:27:42.300Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初识-Less"><a href="#初识-Less" class="headerlink" title="初识 Less"></a>初识 Less</h2><h4 id="Less-是什么"><a href="#Less-是什么" class="headerlink" title="Less 是什么"></a>Less 是什么</h4><p>Less 是一门 CSS 预处理语言，它扩展了 CSS 语言，增加了变量、Mixin、函数等特性，使 CSS 更易维护和扩展。 Less 可以运行在 Node 或浏览器端。最基础的例子如下所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@base: #fff;</span><br><span class="line"><span class="selector-class">.wh</span>(<span class="keyword">@width</span>, @<span class="attribute">height</span>) &#123;</span><br><span class="line"><span class="attribute">width</span>: @width;</span><br><span class="line">  <span class="attribute">height</span>: @height;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: @base;</span><br><span class="line">  .wh(&#x27;30px&#x27;, &#x27;30px&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译输出后的结果：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="string">&#x27;30px&#x27;</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="string">&#x27;30px&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="浏览器中使用-Less"><a href="#浏览器中使用-Less" class="headerlink" title="浏览器中使用 Less"></a>浏览器中使用 Less</h4><p>我们如何在网页中使用 Less 呢？有两种形式，第一种是通过 npm 下载 Less 包，通过 webpack 打包编译后可以编译成最终的 CSS。第二种是直接通过 Less 脚本在 HTML 页面中使用。 本章为了方便学习 Less 的语法知识，选择第二种形式。首先我们创建一个 Less 文件夹，在文件夹内新建一个 index.html 文件,和style.less文件：</p><p><img src="/images/CssReview-Less/image-20210316091543094.png" alt="image-20210316091543094"></p><blockquote><p>随后我们需要去找 Less 的静态资源，在此推荐大家一个好用的静态资源网站，里面有很多前端相关的静态资源— <a href="https://www.bootcdn.cn/">BootCDN</a>。 最后我们练手的 index.html 代码如下：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet/less&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./styles.less&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是less<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/less.js/3.11.1/less.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>styles.less 代码如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器中的效果如下：</p><p><img src="/images/CssReview-Less/image-20210316094929730.png" alt="image-20210316094929730"></p><h2 id="Less-的使用"><a href="#Less-的使用" class="headerlink" title="Less 的使用"></a>Less 的使用</h2><h4 id="Less-中的注释"><a href="#Less-中的注释" class="headerlink" title="Less 中的注释"></a>Less 中的注释</h4><ul><li>以 <code>//</code> 开头的注释，注释单行，且不会被编译到 CSS 文件中。</li><li>以 <code>/**/</code> 包裹的注释，注释多行，同样也不会被编译到 CSS 文件中。</li></ul><h4 id="Less-中的变量"><a href="#Less-中的变量" class="headerlink" title="Less 中的变量"></a>Less 中的变量</h4><p>Less 中使用 <code>@</code> 符号申明变量，比如 <code>@color: red</code>。比方说我现在写一个电商项目，我需要设置项目中主色、辅助色等，代码如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet/less&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./styles.less&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span>我是less<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span>我是less<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;three&quot;</span>&gt;</span>我是less<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/less.js/3.11.1/less.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// styles.less</span></span><br><span class="line"><span class="variable">@primary:</span> red;</span><br><span class="line"><span class="variable">@deepColor:</span> green;</span><br><span class="line"><span class="variable">@lightColor:</span> blue;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="selector-class">.one</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@primary</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.two</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@deepColor</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.three</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@lightColor</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/CssReview-Less/image-20210316095017227.png" alt="image-20210316095017227"></p><blockquote><p>有一点要注意的是，如果在后面声明了同名变量，变量值会被后面的覆盖，比如上述代码：</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// styles.less</span></span><br><span class="line"><span class="variable">@primary:</span> red;</span><br><span class="line"><span class="variable">@deepColor:</span> green;</span><br><span class="line"><span class="variable">@lightColor:</span> blue;</span><br><span class="line"><span class="variable">@primary:</span> pink</span><br><span class="line"></span><br><span class="line">.box &#123;</span><br><span class="line">  <span class="selector-class">.one</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@primary</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  .two &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@deepColor</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  .three &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@lightColor</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么第一个p标签.one下的“我是Jungle”就会为pink，即：同权重选择器前后覆盖。</p><blockquote><p>程序员要培养自己的举一反三能力，颜色可以写成变量，文字的大小同样也可以，并且 less 文件能通过 <code>@import</code> 关键词引入其他的 less 文件</p></blockquote><h4 id="Less-中的嵌套"><a href="#Less-中的嵌套" class="headerlink" title="Less 中的嵌套"></a>Less 中的嵌套</h4><p>市面上所有 CSS 的预编译器的嵌套规则大同小异，基本嵌套如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="selector-class">.b</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后的代码如下所示：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.a</span> <span class="selector-class">.b</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同级场景 <code>&amp;</code> 的使用如下所示：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上述代码 <code>&amp;</code> 表示当前节点的 CSS 样式，一般用于处理 CSS 样式的状态 hover、focus、active、link、visited等。</p></blockquote><h4 id="Less-中的混合（Mixin）"><a href="#Less-中的混合（Mixin）" class="headerlink" title="Less 中的混合（Mixin）"></a>Less 中的混合（Mixin）</h4><p>Less 的混合有三种情况：</p><ul><li>不带参数；</li><li>带参数，没有默认值；</li><li>带参数，且有设置默认值；</li></ul><p>调用的时候也存在区别：</p><ul><li>不带参数：调用时可以不加括号，直接使用；</li><li>带参数：调用时要加括号，括号里必须要传值，不然编译会报错；</li><li>带参数且有默认值：调用时要加括号，参数可传可不穿；</li></ul><p>下面就用上面的 Demo 页面进行实验，首先是第一种情况，不带参数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// index.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet/less&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./styles.less&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Less<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span>我是less<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/less.js/3.11.1/less.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.red</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="selector-class">.one</span> &#123;</span><br><span class="line">    <span class="selector-class">.center</span>;</span><br><span class="line">    <span class="selector-class">.red</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/CssReview-Less/image-20210316095056604.png" alt="image-20210316095056604"></p><p>下面是带参数，且没有默认值的情况：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.color</span>(<span class="variable">@c</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@c</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="selector-class">.one</span> &#123;</span><br><span class="line">    <span class="selector-class">.center</span>;</span><br><span class="line">    <span class="selector-class">.color</span>(green);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/CssReview-Less/image-20210316095112935.png" alt="image-20210316095112935"></p><p>最后是带默认值的情况：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.color</span>(<span class="variable">@c</span>: red) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@c</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="selector-class">.one</span> &#123;</span><br><span class="line">    <span class="selector-class">.center</span>;</span><br><span class="line">    <span class="selector-class">.color</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/CssReview-Less/image-20210316095130380.png" alt="image-20210316095130380"></p><p>在开发页面时，时常会有需要画三角形的情况，上下左右四个方位的三角形，若是一直复制重复的代码去修改，显得不是那么优雅，这时候我们可以用到匹配模式。 匹配模式下无论同名的哪一个混合被匹配到，都会先执行通用匹配模式的代码， <code>@_</code> 表示通用的匹配模式，具体代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet/less&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./styles.less&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Less<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/less.js/3.11.1/less.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.triangle</span>(<span class="variable">@_</span>, <span class="variable">@width</span>, <span class="variable">@color</span>) &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span>(Bottom, <span class="variable">@width</span>, <span class="variable">@color</span>) &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="variable">@color</span> transparent transparent transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span>(Left, <span class="variable">@width</span>, <span class="variable">@color</span>) &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: transparent <span class="variable">@color</span> transparent transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span>(Top, <span class="variable">@width</span>, <span class="variable">@color</span>) &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: transparent transparent <span class="variable">@color</span> transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span>(Right, <span class="variable">@width</span>, <span class="variable">@color</span>) &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: transparent transparent transparent <span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="selector-class">.triangle</span>(Left, <span class="number">100px</span>, red);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述 Less 代码设置了基础的 <code>.triangle</code> 样式，再分别设置上下左右四个方位的匹配模式，并且可以通过 <code>@width</code> 参数来控制三角形大小，浏览器的展示如下所示：</p><p><img src="/images/CssReview-Less/image-20210316093712171.png" alt="image-20210316093712171"></p><blockquote><p>你可以把配置写进共用的样式库中，在需要用到的地方通过 <code>@import</code> 关键字引入。</p></blockquote><p>arguments 变量：使用 <code>@arguments</code> 表示 mixin 的所有参数，代码示例如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border</span>(<span class="variable">@width</span>, <span class="variable">@mode</span>, <span class="variable">@color</span>) &#123;</span><br><span class="line"><span class="attribute">border</span>: <span class="variable">@arguments</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.one</span> &#123;</span><br><span class="line"><span class="selector-class">.border</span>(<span class="number">1px</span>, solid, red)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Less-中的运算"><a href="#Less-中的运算" class="headerlink" title="Less 中的运算"></a>Less 中的运算</h4><p>算数运算符 +、-、*、/ 可以对任何数字、颜色或者变量进行运算，在 Less 中在加减之前会进行单位的换算。计算的结果以最左侧才作数的单位类型为准。如果单位无效或者失去意义，则单位会被忽略。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">width</span>: <span class="number">20px</span> + <span class="number">20</span>; <span class="comment">// 输出结果为 40px</span></span><br><span class="line"><span class="attribute">color</span>: <span class="number">#444</span> * <span class="number">2</span>; <span class="comment">// 输出结果为 #888888 </span></span><br></pre></td></tr></table></figure><p><strong>calc() 特例</strong></p><p>为了与 CSS 保持兼容， <code>calc()</code> 方法并不会对数学表达式进行计算，但是在嵌套函数中会计算变量的数学公式的值。代码如下所示：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@a:</span> <span class="number">100vh</span>/<span class="number">2</span></span><br><span class="line"><span class="attribute">height</span>: calc(<span class="number">50%</span> + (<span class="variable">@a</span> - <span class="number">40px</span>)); <span class="comment">// 输出结果为： calc(50% - (50vh - 40px))</span></span><br></pre></td></tr></table></figure><h4 id="Less-中的转译"><a href="#Less-中的转译" class="headerlink" title="Less 中的转译"></a>Less 中的转译</h4><p>转译，简单的理解就是我们原先是什么样的，最终输出的还是什么样。关键字是 <code>~&quot;&quot;</code>，示例代码如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="string">~&quot;green&quot;</span>; <span class="comment">// 编译后的输出结果还是 color: green;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在 Less 3.5+ 版本中，许多以前需要“引号转义”的情况就不再需要了。</p></blockquote><h4 id="Less-中的作用域"><a href="#Less-中的作用域" class="headerlink" title="Less 中的作用域"></a>Less 中的作用域</h4><p>Less 中的作用域和 CSS 的作用域非常相似，首先 Less 会查询当前作用域内的变量和混合（mixins），如果找不到的话会继续向上一级查询，直到找到为止。示例代码如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@var:</span> blur;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="variable">@var:</span> red;</span><br><span class="line">  <span class="selector-class">.one</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@var</span>; <span class="comment">// 编译后输出的结果为：color: red;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Less-中的导入"><a href="#Less-中的导入" class="headerlink" title="Less 中的导入"></a>Less 中的导入</h4><p>现代前端开发，万物皆是模块。Less 也不例外，我们一个 Less 文件就可以当作一个模块来处理，一个 Less 文件中可以引入另外一个 Less 文件，并且可以使用里面的变量信息，我们来看实例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet/less&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./styles.less&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Less<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是P<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/less.js/3.11.1/less.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// styles.less</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./styles1.less&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">@color1:</span> red;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@color2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// styles1.less</span></span><br><span class="line"><span class="variable">@color2:</span> blue;</span><br></pre></td></tr></table></figure><p><img src="/images/CssReview-Less/image-20210316095213862.png" alt="image-20210316095213862"></p><blockquote><p><strong>声明变量的时候，颜色主题可以单独创建一个 Less 文件。字体大小，文字粗细，阴影的大小，透明度等等也可以单独抽离一个 Less 文件，通过引入的方式全部引入到 index.less 中，在组件中使用的时候，可以只引入 index.less 文件，便可使用在 index.less 中引入的 Less 文件的变量。</strong></p></blockquote><h2 id="Less-使用实例"><a href="#Less-使用实例" class="headerlink" title="Less 使用实例"></a>Less 使用实例</h2><h4 id="文字超出省略"><a href="#文字超出省略" class="headerlink" title="文字超出省略"></a>文字超出省略</h4><p>这是前端开发中出现频率比较高的情况，我们来提取混合（Mixin），实例代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet/less&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./styles.less&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Less<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>我是less我是less我是less我是less我是less我是less我是less<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/less.js/3.11.1/less.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ellipsisSingle</span> &#123;</span><br><span class="line">  -webkit-box-orient: vertical;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="selector-class">.ellipsisSingle</span>;</span><br><span class="line">    <span class="attribute">background</span>: darkgoldenrod;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/CssReview-Less/image-20210316095255000.png" alt="image-20210316095255000"></p><p>若是需要多行省略的情况呢？下面就用到了带参数的混合（Mixin）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet/less&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./styles.less&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Less<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>我是less我是less我是less我是less我是less我是less我是less<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/less.js/3.11.1/less.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>styles.less:</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ellipsisMultiple</span>(<span class="variable">@num</span>: <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  -webkit-box-orient: vertical;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  -webkit-line-clamp: @num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="selector-class">.ellipsisMultiple</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="attribute">background</span>: darkgoldenrod;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/CssReview-Less/image-20210316095344056.png" alt="image-20210316095344056"></p><h4 id="文字垂直居中"><a href="#文字垂直居中" class="headerlink" title="文字垂直居中"></a>文字垂直居中</h4><p>很多时候你在写 CSS 样式的时候，会连续写两个连在一起的属性，比如 <code>height: 20px; line-height: 20px</code>，目的是为了让标签内的文字垂直居中，写多了就会觉得代码不是那么干净。又到了 Less 出手的时候了，把它封装起来，代码如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.line-text-h</span> (<span class="variable">@h</span>: <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">@h</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="variable">@h</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="selector-class">.line-text-h</span>(<span class="number">100px</span>);</span><br><span class="line">    <span class="attribute">background</span>: darkgoldenrod;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/CssReview-Less/image-20210316094503475.png" alt="image-20210316094503475"></p><h4 id="定位上下左右居中"><a href="#定位上下左右居中" class="headerlink" title="定位上下左右居中"></a>定位上下左右居中</h4><p>项目开发中有些场景比如设置空页面的图标上下左右居中，这时我们可以封装一个 Less 混合（Mixin）：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: translate(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="selector-class">.center</span>;</span><br><span class="line">    <span class="attribute">background</span>: darkgoldenrod;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/CssReview-Less/image-20210316094555869.png" alt="image-20210316094555869"></p><h4 id="三角形绘制"><a href="#三角形绘制" class="headerlink" title="三角形绘制"></a>三角形绘制</h4><p>三角形的绘制在开发中也是很常见，特别是上下左右四个方向的三角形，每次编写的时候代码都非常冗余，会有不少重复代码，在此我们可以使用 Less 传入参数的形式，控制三角形的样式和方向：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet/less&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./styles.less&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Less<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/less.js/3.11.1/less.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.triangle</span>(<span class="variable">@_</span>, <span class="variable">@width</span>, <span class="variable">@color</span>) &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span>(Bottom, <span class="variable">@width</span>, <span class="variable">@color</span>) &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="variable">@color</span> transparent transparent transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span>(Left, <span class="variable">@width</span>, <span class="variable">@color</span>) &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: transparent <span class="variable">@color</span> transparent transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span>(Top, <span class="variable">@width</span>, <span class="variable">@color</span>) &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: transparent transparent <span class="variable">@color</span> transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span>(Right, <span class="variable">@width</span>, <span class="variable">@color</span>) &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: transparent transparent transparent <span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="selector-class">.triangle</span>(Top, <span class="number">100px</span>, blue);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/CssReview-Less/image-20210316094722022.png" alt="image-20210316094722022"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>市面上 CSS 预编译器大同小异，语法大抵相同，不同的可能是一些变量符号，学好 Less，切换 Sass 或是 Stylus 都是比较轻松的。</p><p>规划好 Less 文件，在实际开发项目中能事半功倍，可以把更多的精力放在业务逻辑上，而不会因为改一个样式问题导致“牵一发动全身”。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;初识-Less&quot;&gt;&lt;a href=&quot;#初识-Less&quot; class=&quot;headerlink&quot; title=&quot;初识 Less&quot;&gt;&lt;/a&gt;初识 Less&lt;/h2&gt;&lt;h4 id=&quot;Less-是什么&quot;&gt;&lt;a href=&quot;#Less-是什么&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="Css" scheme="http://example.com/categories/Css/"/>
    
    
    <category term="Css" scheme="http://example.com/tags/Css/"/>
    
    <category term="Less" scheme="http://example.com/tags/Less/"/>
    
  </entry>
  
  <entry>
    <title>Css复习笔记</title>
    <link href="http://example.com/2021/03/18/Css-Review/"/>
    <id>http://example.com/2021/03/18/Css-Review/</id>
    <published>2021-03-18T05:10:20.000Z</published>
    <updated>2021-03-22T15:23:26.241Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS3学习"><a href="#CSS3学习" class="headerlink" title="CSS3学习"></a>CSS3学习</h1><p>1.css是什么</p><p>2.CSS怎么用（快速入门）</p><p><strong>3.CSS选择器（重点 + 难点）</strong></p><p>4.美化页面（文字、阴影、超链接、列表、渐变…）</p><p>5.盒子模型</p><p>6.浮动</p><p>7.定位</p><p>8.网页动画（特效）-&gt;菜鸟教程-&gt;w3cschool</p><h2 id="1-什么是CSS"><a href="#1-什么是CSS" class="headerlink" title="1.什么是CSS"></a>1.什么是CSS</h2><h3 id="1-1、什么是CSS"><a href="#1-1、什么是CSS" class="headerlink" title="1.1、什么是CSS"></a>1.1、什么是CSS</h3><p>Cascading Style Sheet 层叠样式表<br>CSS：表现（美化网页）<br>字体，颜色，边距，高度，宽度，背景图片，网页定位，网页浮动</p><h3 id="1-2、发展史"><a href="#1-2、发展史" class="headerlink" title="1.2、发展史"></a>1.2、发展史</h3><p>CSS1.0<br>CSS2.0：DIV（块）+CSS，HTML与CSS结构分离的思想，网页变得简单，SEO<br>CSS2.1：浮动，定位<br>CSS3.0：圆角、阴影、动画…浏览器兼容性~</p><h2 id="2、快速入门"><a href="#2、快速入门" class="headerlink" title="2、快速入门"></a>2、快速入门</h2><h3 id="2-1-1、练习格式："><a href="#2-1-1、练习格式：" class="headerlink" title="2.1.1、练习格式："></a>2.1.1、练习格式：</h3><p><img src="/images/CssReview/2020103009545986.png" alt="在这里插入图片描述"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--规范，&lt;style&gt;可以编写CSS的代码，每一个声明最好以“;”结尾</span></span><br><span class="line"><span class="comment">        语法：</span></span><br><span class="line"><span class="comment">            选择器&#123;</span></span><br><span class="line"><span class="comment">                    声明1;</span></span><br><span class="line"><span class="comment">                    声明2;</span></span><br><span class="line"><span class="comment">                    声明3;</span></span><br><span class="line"><span class="comment">                &#125;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: crimson;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>CSS测试<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">1234567891011121314151617181920212223</span><br></pre></td></tr></table></figure><p>建议使用这种规范（<strong>单独写一个css文件，用link标签引入css文件效果</strong>）：<br><img src="/images/CssReview/20201030095557612.png" alt="在这里插入图片描述"></p><h3 id="2-1-2、CSS的优势："><a href="#2-1-2、CSS的优势：" class="headerlink" title="2.1.2、CSS的优势："></a>2.1.2、CSS的优势：</h3><p>1、内容和表现分离；<br>2、网页结构表现统一，可以实现复用<br>3、样式十分的丰富<br>4、建议使用独立于html的css文件<br>5、利用SEO，容易被搜索引擎收录！</p><h3 id="2-1-3、CSS的3种常用导入方式"><a href="#2-1-3、CSS的3种常用导入方式" class="headerlink" title="2.1.3、CSS的3种常用导入方式"></a>2.1.3、CSS的3种常用导入方式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="xml"><span class="comment">&lt;!--内部样式--&gt;</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: green;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--外部样式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--因为html是自上而下执行的，所以最后执行的是最终展示的效果!--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--优先级：就近（覆盖！）原则, 行内样式 -&gt; 内部样式 -&gt; 外部样式</span></span><br><span class="line"><span class="comment">&lt;!--行内样式：在标签元素中，编写一个style属性，编写样式即可--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>这是标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>拓展：外部样式两种方法</p><ul><li>链接式<br>html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--外部样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>导入式<br>@import是CSS2.1特有的！（弊端：可能展示网页的时候，先是一个骨架，然后加载完之后再变得好）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="keyword">@import</span> url(<span class="string">&quot;css/style.css&quot;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2选择器"><a href="#2-2选择器" class="headerlink" title="2.2选择器"></a>2.2选择器</h3><blockquote><p>作用：选择页面上的某一个或者某一类元素</p></blockquote><h4 id="2-2-1、基本选择器"><a href="#2-2-1、基本选择器" class="headerlink" title="2.2.1、基本选择器"></a>2.2.1、基本选择器</h4><h5 id="1、标签选择器"><a href="#1、标签选择器" class="headerlink" title="1、标签选择器"></a>1、标签选择器</h5><p> <strong>选择一类标签</strong></p><p> 格式： <strong>标签 { }</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: orange;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">h3</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: orange;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">80px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标签选择器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我爱学习<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>学习JAVA<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2、类选择器class"><a href="#2、类选择器class" class="headerlink" title="2、类选择器class"></a>2、类选择器class</h5><p> <strong>选择所有class一致的标签，跨标签</strong></p><p> 格式： <strong>.类名{}</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        /*类选择器的格式 .class的名称&#123;&#125;</span><br><span class="line">            好处：可以多个标签归类，是同一个class，可以复用*/</span><br><span class="line">        .demo1&#123;</span><br><span class="line"><span class="css">            <span class="attribute">color</span>: blue;</span></span><br><span class="line">        &#125;</span><br><span class="line">        .demo2&#123;</span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line">        &#125;</span><br><span class="line">        .demo3&#123;</span><br><span class="line"><span class="css">            <span class="attribute">color</span>: aqua;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span> = <span class="string">&quot;demo1&quot;</span>&gt;</span>类选择器：demo1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;demo2&quot;</span>&gt;</span>类选择器：demo2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;demo3&quot;</span>&gt;</span>类选择器：demo3<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;demo3&quot;</span>&gt;</span>p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3、id-选择器"><a href="#3、id-选择器" class="headerlink" title="3、id 选择器"></a>3、id 选择器</h5><p> <strong>全局唯一</strong></p><p> 格式： <strong>#id名{}</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        /*id选择器：id必须保证全局唯一</span><br><span class="line">            #id名称&#123;&#125;</span><br><span class="line">            不遵循就近原则，优先级是固定的</span><br><span class="line">            id选择器 &gt; class类选择器  &gt;  标签选择器</span><br><span class="line">        */</span><br><span class="line">        #demo1&#123;</span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line">        &#125;</span><br><span class="line">        .demo2&#123;</span><br><span class="line"><span class="css">            <span class="attribute">color</span>: green;</span></span><br><span class="line">        &#125;</span><br><span class="line">        #demo2&#123;</span><br><span class="line"><span class="css">            <span class="attribute">color</span>: orange;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: blue;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;demo1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo2&quot;</span>&gt;</span>id选择器：demo1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;demo2&quot;</span> <span class="attr">id</span> = <span class="string">&quot;demo2&quot;</span>&gt;</span>id选择器：demo2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;demo2&quot;</span>&gt;</span>id选择器：demo3<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> &gt;</span>id选择器：demo4<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>id选择器：demo5<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>优先级：id &gt; class &gt; 标签</strong></p><h4 id="2-2-2、高级选择器"><a href="#2-2-2、高级选择器" class="headerlink" title="2.2.2、高级选择器"></a>2.2.2、高级选择器</h4><h5 id="1-层次选择器"><a href="#1-层次选择器" class="headerlink" title="1. 层次选择器"></a>1. 层次选择器</h5><ul><li>后代选择器：在某个元素的后面</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*后代选择器*/</span></span><br><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-tag">body</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line"><span class="attribute">background</span>:red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>子选择器，一代</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*子选择器*/</span></span><br><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-tag">body</span>&gt;<span class="selector-tag">p</span>&#123;</span><br><span class="line"><span class="attribute">background</span>:orange;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>相邻的兄弟选择器 同辈（弟弟选择器–&gt;所选的下一个！）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*相邻兄弟选择器：只选择一个，相邻（向下）*/</span></span><br><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-class">.active</span>+<span class="selector-tag">p</span>&#123;</span><br><span class="line"><span class="attribute">background</span>: red</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;p class=&quot;active&quot;&gt;p1&lt;p&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span>&gt;p2&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>通用选择器（哥哥弟弟选择器–&gt;所选和所选的下一个！）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="comment">/*通用兄弟选择器，当前选中元素的向下的所有兄弟元素*/</span></span><br><span class="line"><span class="selector-class">.active</span>~<span class="selector-tag">p</span>&#123;</span><br><span class="line"><span class="attribute">background</span>:red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;p class=&quot;active&quot;&gt;p1&lt;p&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span>&gt;p2&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure><h5 id="2-结构伪类选择器"><a href="#2-结构伪类选择器" class="headerlink" title="2.结构伪类选择器"></a>2.结构伪类选择器</h5><p>伪类</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child&#123;<span class="comment">/*ul的第一个子元素*/</span></span><br><span class="line">            <span class="attribute">background</span>: aqua;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span>&#123;<span class="comment">/*ul的最后一个子元素*/</span></span><br><span class="line">            <span class="attribute">background</span>: blue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*选中p1：定位到父元素，选择当前的第一个元素</span></span><br><span class="line"><span class="comment">            选择当前p元素 的父级元素，选中父级元素的第一个，并且是当前元素才生效！*/</span></span><br><span class="line">        <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="attribute">background</span>: orange;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>)&#123;<span class="comment">/*选中父元素下的，第2个p元素*/</span></span><br><span class="line">            <span class="attribute">background</span>: red;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">            <span class="attribute">color</span>: green;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;a href=&quot;&quot;&gt;123&lt;/a&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;p1&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;p2&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;p3&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">h3</span>&gt;<span class="selector-tag">h3</span>&lt;/<span class="selector-tag">h3</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">ul</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">li</span>&gt;<span class="number">1</span>li1&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">li</span>&gt;<span class="number">1</span>li2&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">li</span>&gt;<span class="number">1</span>li3&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">ul</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">ul</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">li</span>&gt;<span class="number">2</span>li1&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">li</span>&gt;<span class="number">2</span>li2&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">li</span>&gt;<span class="number">2</span>li3&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">ul</span>&gt;</span><br><span class="line">    &lt;a href=&quot;www.baidu.com&quot;&gt;百度&lt;/a&gt; </span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure><h5 id="3-属性选择器（常用）"><a href="#3-属性选择器（常用）" class="headerlink" title="3.属性选择器（常用）"></a>3.属性选择器（常用）</h5><p>id + class结合</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.demo</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: aquamarine;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: gray;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/*line-height:50px;*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">font</span>: bold <span class="number">20px</span>/<span class="number">50px</span> Arial;</span></span><br><span class="line">        &#125;</span><br><span class="line">        /*属性名，属性名=属性值（正则）</span><br><span class="line">         = 表示绝对等于</span><br><span class="line">         *= 表示包含</span><br><span class="line">         ^= 表示以...开头</span><br><span class="line">         $= 表示以...结尾</span><br><span class="line">         存在id属性的元素</span><br><span class="line"><span class="css">            <span class="selector-tag">a</span><span class="selector-attr">[]</span>&#123;&#125;</span></span><br><span class="line">         */</span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-attr">[id]</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: yellow;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-attr">[id=first]</span>&#123;<span class="comment">/*id=first的元素*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: green;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-attr">[class*=<span class="string">&quot;links&quot;</span>]</span>&#123;<span class="comment">/*class 中有links的元素*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: bisque;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-attr">[href^=http]</span>&#123;<span class="comment">/*选中href中以http开头的元素*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: aquamarine;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-attr">[href$=pdf]</span>&#123;<span class="comment">/*选中href中以pdf结尾的元素*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: aquamarine;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http:www.baidu.com&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item first&quot;</span> <span class="attr">id</span>=<span class="string">&quot;first&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item active&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank &quot;</span> <span class="attr">title</span>=<span class="string">&quot;test&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;images/123.html&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;images/1.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;images/1.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;abc&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/a.pdf&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/abc.pdf&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;abc.doc&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span>&gt;</span>9<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;abcd.doc&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item last&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：<br><img src="/images/CssReview/20201030095642883.png" alt="在这里插入图片描述"></p><h2 id="3、美化网页元素"><a href="#3、美化网页元素" class="headerlink" title="3、美化网页元素"></a>3、美化网页元素</h2><h3 id="3-1、为什么要美化网页"><a href="#3-1、为什么要美化网页" class="headerlink" title="3.1、为什么要美化网页"></a>3.1、为什么要美化网页</h3><ol><li>有效的传递页面信息</li><li>美化网页，页面漂亮才能吸引客户</li><li>凸显页面的主题</li><li>提高用户的体验</li></ol><p><strong>span标签</strong>：重点要突出的字，使用span标签套起来</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        #title1&#123;</span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">学习语言<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;title1&quot;</span>&gt;</span>JAVA<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2、字体样式"><a href="#3-2、字体样式" class="headerlink" title="3.2、字体样式"></a>3.2、字体样式</h3><ul><li>font-family：字体</li><li>font-size：字体大小</li><li>font-weight：字体粗细</li><li>color：字体颜色</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-family</span>:<span class="string">&quot;Arial Black&quot;</span>,楷体;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        .p1&#123;</span><br><span class="line"><span class="css">            <span class="attribute">font-weight</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: gray;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>正文11111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>正文2222222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>i love study java<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>常用写法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-weight</span>:bolder;<span class="comment">/*也可以填px，但不能超过900,相当于bloder*/</span></span><br><span class="line"><span class="comment">/*常用写法：*/</span></span><br><span class="line"><span class="attribute">font</span>:oblique bloder <span class="number">12px</span> <span class="string">&quot;楷体&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-3、文本样式"><a href="#3-3、文本样式" class="headerlink" title="3.3、文本样式"></a>3.3、文本样式</h3><ol><li>颜色–&gt;color:agb / rgba()</li><li>文本对齐方式–&gt;text-align：center</li><li>首行缩进–&gt;text-indent：2em</li><li>行高–&gt;line-height：300px；</li><li>下划线–&gt;text-decoration</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-decoration</span>:underline/*下划线*/</span><br><span class="line">text-decoration:line-through/*中划线*/</span><br><span class="line">text-decoration:overline/*上划线*/</span><br><span class="line">text-decoration:none/*超链接去下划线*/</span><br></pre></td></tr></table></figure><ol><li>图片、文字水平对齐</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span>,<span class="selector-tag">span</span>&#123;vetical-align:middle&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4、超链接伪类"><a href="#3-4、超链接伪类" class="headerlink" title="3.4、超链接伪类"></a>3.4、超链接伪类</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-tag">a</span>&#123;<span class="comment">/*超链接有默认的颜色*/</span></span><br><span class="line"><span class="attribute">text-decoration</span>:none;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="comment">/*鼠标悬浮的状态*/</span></span><br><span class="line"><span class="attribute">color</span>:orange;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;<span class="comment">/*鼠标按住未释放的状态*/</span></span><br><span class="line"><span class="attribute">color</span>:green</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;<span class="comment">/*点击之后的状态*/</span></span><br><span class="line"><span class="attribute">color</span>:red</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;</span><br><span class="line">            <span class="attribute">background</span>: bisque;</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="3-5文本阴影："><a href="#3-5文本阴影：" class="headerlink" title="3.5文本阴影："></a>3.5文本阴影：</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*第一个参数：表示水平偏移</span></span><br><span class="line"><span class="comment">第二个参数：表示垂直偏移</span></span><br><span class="line"><span class="comment">第三个参数：表示模糊半径</span></span><br><span class="line"><span class="comment">第四个参数：表示颜色</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="attribute">text-shadow</span>:<span class="number">5px</span> <span class="number">5px</span> <span class="number">5px</span> 颜色</span><br></pre></td></tr></table></figure><h3 id="3-6、列表ul-li"><a href="#3-6、列表ul-li" class="headerlink" title="3.6、列表ul li"></a>3.6、列表ul li</h3><p>主页index.html代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>全部商品分类<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>图书<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>音像<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>数字商品<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>家用电器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>手机<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>数码<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>电脑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>办公<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>家居<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>家装<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>厨具<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>服饰鞋帽<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>个性化妆<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>礼品箱包<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>钟表<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>珠宝<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>食品饮料<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>保健食品<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>彩票<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>旅行<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>充值<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>票务<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#nav</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: antiquewhite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.title</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">1em</span>;<span class="comment">/*缩进*/</span></span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*ul li*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">list-style:</span></span><br><span class="line"><span class="comment">    non 去掉实心圆</span></span><br><span class="line"><span class="comment">    circle 空心圆</span></span><br><span class="line"><span class="comment">    square 正方形</span></span><br><span class="line"><span class="comment">decimal 数字</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*ul&#123;!*nav替换效果*!</span></span><br><span class="line"><span class="comment">    background: antiquewhite;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: burlywood;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-7、背景"><a href="#3-7、背景" class="headerlink" title="3.7、背景"></a>3.7、背景</h3><ol><li>背景颜色：background</li><li>背景图片</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">&quot;&quot;</span>);<span class="comment">/*默认是全部平铺的*/</span></span><br><span class="line"><span class="attribute">background-repeat</span>:repeat-x/*水平平铺*/</span><br><span class="line">background-repeat:repeat-y/*垂直平铺*/</span><br><span class="line">background-repeat:no-repeat/*不平铺*/</span><br></pre></td></tr></table></figure><h3 id="3-8、渐变"><a href="#3-8、渐变" class="headerlink" title="3.8、渐变"></a>3.8、渐变</h3><p>渐变背景网址：<a href="https://www.grabient.com/">https://www.grabient.com</a><br>径向渐变、圆形渐变</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">            <span class="attribute">background-color</span>: <span class="number">#4158D0</span>;</span><br><span class="line">            <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">43deg</span>, <span class="number">#4158D0</span> <span class="number">0%</span>, <span class="number">#C850C0</span> <span class="number">46%</span>, <span class="number">#FFCC70</span> <span class="number">100%</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="4、盒子模型"><a href="#4、盒子模型" class="headerlink" title="4、盒子模型"></a>4、盒子模型</h2><h3 id="4-1什么是盒子模型"><a href="#4-1什么是盒子模型" class="headerlink" title="4.1什么是盒子模型"></a>4.1什么是盒子模型</h3><p><img src="/images/CssReview/20201030095724647.png" alt="在这里插入图片描述"></p><ol><li>margin：外边距</li><li>padding：内边距</li><li>border：边框</li></ol><h3 id="4-2、边框"><a href="#4-2、边框" class="headerlink" title="4.2、边框"></a>4.2、边框</h3><p>border：粗细 样式 颜色</p><ol><li>边框的粗细</li><li>边框的样式</li><li>边框的颜色</li></ol><h3 id="4-3、外边距—-妙用：居中"><a href="#4-3、外边距—-妙用：居中" class="headerlink" title="4.3、外边距—-妙用：居中"></a>4.3、外边距—-妙用：居中</h3><p>margin-left/right/top/bottom–&gt;表示四边，可分别设置，也可以同时设置如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">margin</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>/*分别表示上、右、下、左；从上开始顺时针*/</span><br><span class="line">/*例<span class="number">1</span>：居中*/</span><br><span class="line">margin:<span class="number">0</span> auto /*auto表示左右自动*/</span><br><span class="line">/*例<span class="number">2</span>：*/</span><br><span class="line">margin:<span class="number">4px</span>/*表示上、右、下、左都为<span class="number">4px</span>*/</span><br><span class="line">/*例<span class="number">3</span>*/</span><br><span class="line">margin:<span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span>/*表示上为<span class="number">10px</span>，左右为<span class="number">20px</span>，下为<span class="number">30px</span>*/</span><br></pre></td></tr></table></figure><p>盒子的计算方式：<br>margin+border+padding+内容的大小</p><p>总结：<br>body总有一个默认的外边距 margin:0<br>常见操作：初始化</p><h3 id="4-4、圆角边框—-border-radius"><a href="#4-4、圆角边框—-border-radius" class="headerlink" title="4.4、圆角边框—-border-radius"></a>4.4、圆角边框—-border-radius</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">        <span class="selector-tag">div</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">10px</span> solid red;</span><br><span class="line">            <span class="comment">/*一个border-radius只管一个圆的1/4*/</span></span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">50px</span> <span class="number">20px</span> <span class="number">20px</span> <span class="number">30px</span>;<span class="comment">/*左上 右上 右下 左下 ,顺时针方向*/</span></span><br><span class="line">        &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="4-5、盒子阴影"><a href="#4-5、盒子阴影" class="headerlink" title="4.5、盒子阴影"></a>4.5、盒子阴影</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">1px</span> black;</span><br></pre></td></tr></table></figure><h2 id="5、浮动"><a href="#5、浮动" class="headerlink" title="5、浮动"></a>5、浮动</h2><h3 id="5-1标准文档流"><a href="#5-1标准文档流" class="headerlink" title="5.1标准文档流"></a>5.1标准文档流</h3><p><img src="/images/CssReview/image-20201206222724159.png" alt="image-20201206222724159"></p><p>块级元素：独占一行 h1~h6 、p、div、 列表…<br>行内   元素：不独占一行 span、a、img、strong</p><p>注： 行内元素可以包含在块级元素中，反之则不可以</p><h3 id="5-2、display（重要）"><a href="#5-2、display（重要）" class="headerlink" title="5.2、display（重要）"></a>5.2、display（重要）</h3><ol><li>block：块元素</li><li>inline：行内元素</li><li>inline-block：是块元素，但是可以内联，在一行</li></ol><blockquote><p>这也是一种实现行内元素排列的方式，但是我们很多情况用float</p></blockquote><ol><li>none：消失</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--block 块元素</span></span><br><span class="line"><span class="comment">        inline 行内元素</span></span><br><span class="line"><span class="comment">        inline-block 是块元素，但是可以内联 ，在一行</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div块元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span行内元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-3、float：left-right左右浮动"><a href="#5-3、float：left-right左右浮动" class="headerlink" title="5.3、float：left/right左右浮动"></a>5.3、float：left/right左右浮动</h3><p>clear：both</p><h3 id="5-4、overflow及父级边框塌陷问题"><a href="#5-4、overflow及父级边框塌陷问题" class="headerlink" title="5.4、overflow及父级边框塌陷问题"></a>5.4、overflow及父级边框塌陷问题</h3><p>clear：<br>right：右侧不允许有浮动元素<br>left：左侧不允许有浮动元素<br>both：两侧不允许有浮动元素<br>none：</p><p>解决塌陷问题方案：<br>方案一：增加父级元素的高度；<br>方案二：增加一个空的div标签，清除浮动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class = &quot;clear&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-class">.clear</span>&#123;</span><br><span class="line"><span class="attribute">clear</span>:both;</span><br><span class="line"><span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>方案三：在父级元素中增加一个overflow属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">overflow</span>:hidden/*隐藏超出部分*/</span><br><span class="line">overflow：scoll/*滚动*/</span><br></pre></td></tr></table></figure><p>方案四：父类添加一个伪类:after</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#father</span>:after&#123;</span><br><span class="line">content:<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="attribute">display</span>:block;</span><br><span class="line"><span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小结：</p><ol><li>浮动元素增加空div—-&gt; 简单、代码尽量避免空div</li><li>设置父元素的高度—–&gt; 简单，但是元素假设有了固定的高度，可能就会超出范围</li><li>overflow—-&gt; 简单，下拉的一些场景避免使用</li><li>父类添加一个伪类:after（<strong>推荐</strong>）—-&gt; 写法稍微复杂，但是没有副作用，<strong>推荐使用</strong></li></ol><h3 id="5-5、display与float对比"><a href="#5-5、display与float对比" class="headerlink" title="5.5、display与float对比"></a>5.5、display与float对比</h3><ol><li>display：方向不可以控制</li><li>float：浮动起来的话会脱离标准文档流，所以要解决父级边框塌陷的问题。</li></ol><h2 id="6、定位"><a href="#6、定位" class="headerlink" title="6、定位"></a>6、定位</h2><h3 id="6-1、相对定位"><a href="#6-1、相对定位" class="headerlink" title="6.1、相对定位"></a>6.1、相对定位</h3><p>相对定位：<strong>positon：relative；</strong><br>相对于原来的位置，进行指定的偏移，相对定位的话，它仍然在标准文档流中！原来的位置会被保留</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">top</span>:-<span class="number">20px</span>;<span class="comment">/*向上偏移20px*/</span></span><br><span class="line"><span class="attribute">left</span>:<span class="number">20px</span>;<span class="comment">/*向右偏移20px*/</span></span><br><span class="line"><span class="attribute">bottom</span>:<span class="number">10px</span>;<span class="comment">/*向上偏移10px*/</span></span><br><span class="line"><span class="attribute">right</span>:<span class="number">20px</span>;<span class="comment">/*向左偏移20px*/</span></span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>相对定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--相对定位</span></span><br><span class="line"><span class="comment">            相对于自己原来的位置进行偏移</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">25px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        #father&#123;</span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">#ffa538</span> <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        #first&#123;</span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">#b3ff38</span> <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#ffa538</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: relative;<span class="comment">/*相对定位：上下左右*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: -<span class="number">20px</span>;<span class="comment">/*向上偏移20px*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">20px</span>;<span class="comment">/*向右偏移20px*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        #second&#123;</span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">#427b11</span> <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#66c77f</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        #third&#123;</span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#b3ff38</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">#38d7ff</span> <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">            <span class="attribute">bottom</span>: <span class="number">10px</span>;<span class="comment">/*向上偏移10px*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;first&quot;</span>&gt;</span>第一个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;second&quot;</span>&gt;</span>第二个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;third&quot;</span>&gt;</span>第三个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>练习：<img src="/images/CssReview/20201030095804693.png" alt="在这里插入图片描述"></p><p>实现代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        #box&#123;</span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">2px</span> red solid;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#ee73b7</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">100px</span>;<span class="comment">/*设置行距100px*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;<span class="comment">/*设置方块*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: <span class="number">#4158D0</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        .a2&#123;</span><br><span class="line"><span class="css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: -<span class="number">100px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        .a4&#123;</span><br><span class="line"><span class="css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: -<span class="number">100px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        .a5&#123;</span><br><span class="line"><span class="css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: -<span class="number">300px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> &gt;</span>连接1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> &gt;</span>连接2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a3&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> &gt;</span>连接3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a4&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> &gt;</span>连接4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a5&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> &gt;</span>连接5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-2、绝对定位-absolute和固定定位-fixed"><a href="#6-2、绝对定位-absolute和固定定位-fixed" class="headerlink" title="6.2、绝对定位-absolute和固定定位-fixed"></a>6.2、绝对定位-absolute和固定定位-fixed</h3><p>定位：基于xxx定位，上下左右~<br>1、没有父级元素定位的前提下，相对于浏览器定位<br>2、假设父级元素存在定位，我们通常会相对于父级元素进行偏移<br>3、在父级元素范围内移动<br>总结：相对一父级或浏览器的位置，进行指定的偏移，绝对定位的话，它不在标准文档流中，原来的位置不会被保留</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">1000px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;<span class="comment">/*absolute 绝对定位*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>)&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#b3ff38</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: fixed;<span class="comment">/*fixed 固定定位*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-3、z-index"><a href="#6-3、z-index" class="headerlink" title="6.3、z-index"></a>6.3、z-index</h3><p><img src="/images/CssReview/20201030095842713.png" alt="在这里插入图片描述"></p><p>图层-z-index：默认是0，最高无限~999</p><p>index.html代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/2020.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;tipText&quot;</span>&gt;</span>学习微服务，找狂神<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;tipBg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>时间：2099-01-01<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>地点：月球一号基地<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#content</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">380px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*父级元素相对定位*/</span></span><br><span class="line"><span class="selector-id">#content</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tipText</span>,<span class="selector-class">.tipBg</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">380px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">216px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tipText</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tipBg</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: orange;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.5</span>;<span class="comment">/*背景透明度*/</span></span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">alpha</span>(opacity=<span class="number">50</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、动画及视野拓展"><a href="#7、动画及视野拓展" class="headerlink" title="7、动画及视野拓展"></a>7、动画及视野拓展</h2><p>css做动画过于繁琐，已有很多工具间接性做出</p><p>百度搜索canvas动画、<a href="https://cybermap.kaspersky.com/cn">卡巴斯基监控站</a>（仅作了解）</p><h2 id="8、总结"><a href="#8、总结" class="headerlink" title="8、总结"></a>8、总结</h2><p><img src="/images/CssReview/20201030100754543.png" alt="CSS导图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS3学习&quot;&gt;&lt;a href=&quot;#CSS3学习&quot; class=&quot;headerlink&quot; title=&quot;CSS3学习&quot;&gt;&lt;/a&gt;CSS3学习&lt;/h1&gt;&lt;p&gt;1.css是什么&lt;/p&gt;
&lt;p&gt;2.CSS怎么用（快速入门）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.CSS选择器</summary>
      
    
    
    
    <category term="Css" scheme="http://example.com/categories/Css/"/>
    
    
    <category term="Css" scheme="http://example.com/tags/Css/"/>
    
    <category term="Css3" scheme="http://example.com/tags/Css3/"/>
    
  </entry>
  
</feed>
